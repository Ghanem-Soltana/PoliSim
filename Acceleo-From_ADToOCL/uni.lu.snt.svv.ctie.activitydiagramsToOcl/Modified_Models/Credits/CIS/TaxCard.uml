<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.1" xmlns:xmi="http://schema.omg.org/spec/XMI/2.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:Default="http:///schemas/Default/_fNm3AAqoEd6-N_NOT9vsCA/2" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/3.0.0/UML" xsi:schemaLocation="http:///schemas/Default/_fNm3AAqoEd6-N_NOT9vsCA/2 Default.profile.uml#_s6-a9036EeSS5u8wdxTIGg">
  <uml:Package xmi:id="_s9wB-k36EeSS5u8wdxTIGg" name="TaxCard">
    <packageImport xmi:id="_s9wB-036EeSS5u8wdxTIGg">
      <importedPackage xmi:type="uml:Model" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#_0"/>
    </packageImport>
    <packageImport xmi:id="_s9wB_E36EeSS5u8wdxTIGg">
      <importedPackage xmi:type="uml:Model" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#_0"/>
    </packageImport>
    <packageImport xmi:id="_s9wB_U36EeSS5u8wdxTIGg">
      <importedPackage xmi:type="uml:Model" href="MARTELibrary.uml#_s96ZM036EeSS5u8wdxTIGg"/>
    </packageImport>
    <packagedElement xmi:type="uml:Package" xmi:id="_s9wB_k36EeSS5u8wdxTIGg" name="Tax_Card_Domain">
      <packageImport xmi:id="_s9wB_036EeSS5u8wdxTIGg" importedPackage="_s9xP1E36EeSS5u8wdxTIGg"/>
      <packageImport xmi:id="_s9wCAE36EeSS5u8wdxTIGg" importedPackage="_s9wCBU36EeSS5u8wdxTIGg"/>
      <packageImport xmi:id="_s9wCAU36EeSS5u8wdxTIGg" importedPackage="_s9xPvk36EeSS5u8wdxTIGg"/>
      <packageImport xmi:id="_s9wCAk36EeSS5u8wdxTIGg" importedPackage="_s9woQk36EeSS5u8wdxTIGg"/>
      <packageImport xmi:id="_s9wCA036EeSS5u8wdxTIGg" importedPackage="_s9wojU36EeSS5u8wdxTIGg"/>
      <packageImport xmi:id="_s9wCBE36EeSS5u8wdxTIGg" importedPackage="_s9xPcE36EeSS5u8wdxTIGg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_s9wCBU36EeSS5u8wdxTIGg" name="Tax_Payer_Concepts">
      <packagedElement xmi:type="uml:Association" xmi:id="_s9wCBk36EeSS5u8wdxTIGg" name="taxed under" memberEnd="_s9woBE36EeSS5u8wdxTIGg _s9woM036EeSS5u8wdxTIGg"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9wCB036EeSS5u8wdxTIGg" name="Income_Tax">
        <ownedAttribute xmi:id="_s9wCCE36EeSS5u8wdxTIGg" name="taxPayer" visibility="private" type="_s9wny036EeSS5u8wdxTIGg" association="_s9woME36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9wCCU36EeSS5u8wdxTIGg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9wCCk36EeSS5u8wdxTIGg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wCC036EeSS5u8wdxTIGg" name="tax_amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wCDE36EeSS5u8wdxTIGg" name="tax_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_s97AHU36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9wCDU36EeSS5u8wdxTIGg" name="Address">
        <ownedAttribute xmi:id="_s9wCDk36EeSS5u8wdxTIGg" name="taxPayer" visibility="private" type="_s9wCW036EeSS5u8wdxTIGg" association="_s9woJ036EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9wCD036EeSS5u8wdxTIGg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9wCEE36EeSS5u8wdxTIGg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wCEU36EeSS5u8wdxTIGg" name="country" visibility="public" type="_s9xPCE36EeSS5u8wdxTIGg">
          <defaultValue xmi:type="uml:InstanceValue" xmi:id="_s9wCEk36EeSS5u8wdxTIGg" name="LU" type="_s9xPCE36EeSS5u8wdxTIGg" instance="_s9xPCU36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wCE036EeSS5u8wdxTIGg" name="street" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wCFE36EeSS5u8wdxTIGg" name="zipCode" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wCFU36EeSS5u8wdxTIGg" name="city" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9wCFk36EeSS5u8wdxTIGg" name="Dependent">
        <generalization xmi:id="_s9wCF036EeSS5u8wdxTIGg" general="_s9wCW036EeSS5u8wdxTIGg"/>
        <ownedAttribute xmi:id="_s9wCGE36EeSS5u8wdxTIGg" name="dependent_type" visibility="public" type="_s9xPLU36EeSS5u8wdxTIGg"/>
        <ownedAttribute xmi:id="_s9wCGU36EeSS5u8wdxTIGg" name="household" visibility="private" type="_s9wCQk36EeSS5u8wdxTIGg" association="_s9woLk36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9wCGk36EeSS5u8wdxTIGg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9wCG036EeSS5u8wdxTIGg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wCHE36EeSS5u8wdxTIGg" name="responsible_person" visibility="private" type="_s9wny036EeSS5u8wdxTIGg" association="_s9woLU36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9wCHU36EeSS5u8wdxTIGg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9wCHk36EeSS5u8wdxTIGg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wCH036EeSS5u8wdxTIGg" name="continued_studies" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_s9wCIE36EeSS5u8wdxTIGg">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wCIU36EeSS5u8wdxTIGg" name="expense" visibility="private" type="_s9xO7036EeSS5u8wdxTIGg" association="_s9woL036EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9wCIk36EeSS5u8wdxTIGg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9wCI036EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wCJE36EeSS5u8wdxTIGg" name="tax_Payer" visibility="private" type="_s9wny036EeSS5u8wdxTIGg" association="_s9woLE36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9wCJU36EeSS5u8wdxTIGg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9wCJk36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_s9wCJ036EeSS5u8wdxTIGg" name="compute_if_dependent_receives_allowances_eligible_for_CIM" isQuery="true">
          <eAnnotations xmi:id="_s9wCKE36EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_s9wCKU36EeSS5u8wdxTIGg" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_s9wCKk36EeSS5u8wdxTIGg" name="compute_if_dependent_receives_allowances_eligible_for_DS" isQuery="true">
          <eAnnotations xmi:id="_s9wCK036EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_s9wCLE36EeSS5u8wdxTIGg" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_s9wCLU36EeSS5u8wdxTIGg" name="compute_if_dependent_receives_allowances_eligible_for_CE_dependance_and_care" isQuery="true">
          <eAnnotations xmi:id="_s9wCLk36EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_s9wCL036EeSS5u8wdxTIGg" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_s9wCME36EeSS5u8wdxTIGg" name="is_dependent_following_continued_studies" isQuery="true" postcondition="_s9wCMk36EeSS5u8wdxTIGg">
          <eAnnotations xmi:id="_s9wCMU36EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_s9wCMk36EeSS5u8wdxTIGg" name="is_dependent_following_continued_studies" constrainedElement="_s9wCME36EeSS5u8wdxTIGg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9wCM036EeSS5u8wdxTIGg">
              <language>OCL</language>
              <body>self.continued_studies = IN_continued_studies&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_s9wCNE36EeSS5u8wdxTIGg" name="IN_continued_studies">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_s9wCNU36EeSS5u8wdxTIGg" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9wCNk36EeSS5u8wdxTIGg" name="External_Allowance">
        <ownedAttribute xmi:id="_s9wCN036EeSS5u8wdxTIGg" name="amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wCOE36EeSS5u8wdxTIGg" name="grantor" visibility="public" type="_s9xPAE36EeSS5u8wdxTIGg"/>
        <ownedAttribute xmi:id="_s9wCOU36EeSS5u8wdxTIGg" name="person" visibility="private" type="_s9wCW036EeSS5u8wdxTIGg" association="_s9woKE36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9wCOk36EeSS5u8wdxTIGg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9wCO036EeSS5u8wdxTIGg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wCPE36EeSS5u8wdxTIGg" name="valid_from_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_s97AHU36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wCPU36EeSS5u8wdxTIGg" name="valid_until_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_s97AHU36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9wCPk36EeSS5u8wdxTIGg" name="Fiscal_Address">
        <generalization xmi:id="_s9wCP036EeSS5u8wdxTIGg" general="_s9wCDU36EeSS5u8wdxTIGg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9wCQE36EeSS5u8wdxTIGg" name="Habitual_Address">
        <generalization xmi:id="_s9wCQU36EeSS5u8wdxTIGg" general="_s9wCDU36EeSS5u8wdxTIGg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9wCQk36EeSS5u8wdxTIGg" name="Household">
        <ownedAttribute xmi:id="_s9wCQ036EeSS5u8wdxTIGg" name="tax_Payer" visibility="private" type="_s9wny036EeSS5u8wdxTIGg" association="_s9woK036EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9wCRE36EeSS5u8wdxTIGg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9wCRU36EeSS5u8wdxTIGg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wCRk36EeSS5u8wdxTIGg" name="dependent" visibility="private" type="_s9wCFk36EeSS5u8wdxTIGg" association="_s9woLk36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9wCR036EeSS5u8wdxTIGg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9wCSE36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9wCSU36EeSS5u8wdxTIGg" name="Legal_Union_Record">
        <ownedComment xmi:id="_s9wCSk36EeSS5u8wdxTIGg" annotatedElement="_s9wCSU36EeSS5u8wdxTIGg">
          <body>&lt;p>&lt;span style=&quot;font-size:16pt;&quot;>When&amp;nbsp;a&amp;nbsp;decision&amp;nbsp;for&amp;nbsp;Dates&amp;nbsp;would&amp;nbsp;be&amp;nbsp;taken,&amp;nbsp;&lt;/span>&lt;/p>&lt;p>&lt;span style=&quot;font-size:16pt;&quot;>we&amp;nbsp;must&amp;nbsp;take&amp;nbsp;into&amp;nbsp;account&amp;nbsp;that&amp;nbsp;all&amp;nbsp;marriages&amp;nbsp;and&amp;nbsp;partnerships&amp;nbsp;are&amp;nbsp;mutually&amp;nbsp;exclusive.&lt;/span>&lt;/p></body>
        </ownedComment>
        <ownedRule xmi:id="_s9wCS036EeSS5u8wdxTIGg" name="Legal_Union-different_people-constraint" constrainedElement="_s9wCSU36EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9wCTE36EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>if self.end_date.oclIsUndefined() then&#xA;/**LEGAL UNION IS VALID**/&#xA;self.individual_A.SSNo &lt;> self.individual_B.SSNo&#xA;and&#xA;self.individual_A->size()=1 and&#xA;self.individual_B->size()=1&#xA;else&#xA;/**LEGAL UNION IS AUTHORIZED WITH ONLY ONE PERSON**/&#xA;false&#xA;endif&#xA;</body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:id="_s9wCTU36EeSS5u8wdxTIGg" name="start_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_s97AHU36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wCTk36EeSS5u8wdxTIGg" name="end_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_s97AHU36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wCT036EeSS5u8wdxTIGg" name="individual_A" visibility="private" type="_s9wCW036EeSS5u8wdxTIGg" association="_s9woKk36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9wCUE36EeSS5u8wdxTIGg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9wCUU36EeSS5u8wdxTIGg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wCUk36EeSS5u8wdxTIGg" name="individual_B" visibility="private" type="_s9wCW036EeSS5u8wdxTIGg" association="_s9woKU36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9wCU036EeSS5u8wdxTIGg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9wCVE36EeSS5u8wdxTIGg" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9wCVU36EeSS5u8wdxTIGg" name="Marriage_Record">
        <generalization xmi:id="_s9wCVk36EeSS5u8wdxTIGg" general="_s9wCSU36EeSS5u8wdxTIGg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9wCV036EeSS5u8wdxTIGg" name="Non_Resident_Tax_Payer">
        <generalization xmi:id="_s9wCWE36EeSS5u8wdxTIGg" general="_s9wny036EeSS5u8wdxTIGg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9wCWU36EeSS5u8wdxTIGg" name="Partnership_Record">
        <generalization xmi:id="_s9wCWk36EeSS5u8wdxTIGg" general="_s9wCSU36EeSS5u8wdxTIGg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9wCW036EeSS5u8wdxTIGg" name="Physical_Person">
        <ownedAttribute xmi:id="_s9wCXE36EeSS5u8wdxTIGg" name="name" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wCXU36EeSS5u8wdxTIGg" name="is_assisting_spouse" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wCXk36EeSS5u8wdxTIGg" name="SSNo" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wCX036EeSS5u8wdxTIGg" name="allowances" visibility="private" type="_s9wCNk36EeSS5u8wdxTIGg" association="_s9woKE36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9wCYE36EeSS5u8wdxTIGg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9wCYU36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wCYk36EeSS5u8wdxTIGg" name="addresses" visibility="private" type="_s9wCDU36EeSS5u8wdxTIGg" association="_s9woJ036EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9wCY036EeSS5u8wdxTIGg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9wCZE36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wCZU36EeSS5u8wdxTIGg" name="legal_union_A" visibility="private" type="_s9wCSU36EeSS5u8wdxTIGg" association="_s9woKk36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9wCZk36EeSS5u8wdxTIGg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9wnsE36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wnsU36EeSS5u8wdxTIGg" name="legal_union_B" visibility="private" type="_s9wCSU36EeSS5u8wdxTIGg" association="_s9woKU36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9wnsk36EeSS5u8wdxTIGg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9wns036EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wntE36EeSS5u8wdxTIGg" name="age" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wntU36EeSS5u8wdxTIGg" name="disability_percentage" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_s9wntk36EeSS5u8wdxTIGg">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wnt036EeSS5u8wdxTIGg" name="is_affiliated_personnaly_to_social_security" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_s9wnuE36EeSS5u8wdxTIGg" name="is_separated_from" isQuery="true">
          <eAnnotations xmi:id="_s9wnuU36EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_s9wnuk36EeSS5u8wdxTIGg" key="computaion"/>
          </eAnnotations>
          <ownedParameter xmi:id="_s9wnu036EeSS5u8wdxTIGg" name="IN_person" type="_s9wCW036EeSS5u8wdxTIGg"/>
          <ownedParameter xmi:id="_s9wnvE36EeSS5u8wdxTIGg" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_s9wnvU36EeSS5u8wdxTIGg" name="is_person_assisting_spouse" isQuery="true" postcondition="_s9wnv036EeSS5u8wdxTIGg">
          <eAnnotations xmi:id="_s9wnvk36EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_s9wnv036EeSS5u8wdxTIGg" name="is_assisting_spouse" constrainedElement="_s9wnvU36EeSS5u8wdxTIGg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9wnwE36EeSS5u8wdxTIGg">
              <language>OCL</language>
              <body>self.is_assisting_spouse = IN_assisting_spouse&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_s9wnwU36EeSS5u8wdxTIGg" name="IN_assisting_spouse">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_s9wnwk36EeSS5u8wdxTIGg" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_s9wnw036EeSS5u8wdxTIGg" name="is_person_affiliated_personnaly_to_social_security" isQuery="true" postcondition="_s9wnxU36EeSS5u8wdxTIGg">
          <eAnnotations xmi:id="_s9wnxE36EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_s9wnxU36EeSS5u8wdxTIGg" name="is_person_affiliated_personnaly_affiliated_to_social_security" constrainedElement="_s9wnw036EeSS5u8wdxTIGg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9wnxk36EeSS5u8wdxTIGg">
              <language>OCL</language>
              <body>self.is_affiliated_personnaly_to_social_security = IN_personnaly_affiliated&#xA;&#xA;&#xA;&#xA;&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_s9wnx036EeSS5u8wdxTIGg" name="IN_personnaly_affiliated">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_s9wnyE36EeSS5u8wdxTIGg" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9wnyU36EeSS5u8wdxTIGg" name="Resident_Tax_Payer">
        <generalization xmi:id="_s9wnyk36EeSS5u8wdxTIGg" general="_s9wny036EeSS5u8wdxTIGg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9wny036EeSS5u8wdxTIGg" name="Tax_Payer">
        <ownedRule xmi:id="_s9wnzE36EeSS5u8wdxTIGg" name="NonResidentTaxPayer-constraint" constrainedElement="_s9wCV036EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9wnzU36EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>&#x9;self.addresses->exists( fiscal_add:Address | &#xA;&#x9;&#x9;fiscal_add.oclIsTypeOf(Fiscal_Address) and fiscal_add.country&lt;>Country::LU) and&#xA;&#x9;self.addresses->exists( hab_add:Address | &#xA;&#x9;&#x9;hab_add.oclIsTypeOf(Habitual_Address) and hab_add.country&lt;>Country::LU) and&#xA;&#x9;self.incomes->exists(inc:Income_Concepts::Income | inc.oclIsTypeOf(Income_Concepts::Local_Income))&#xA;implies&#xA;&#x9;self.oclIsTypeOf(Non_Resident_Tax_Payer)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_s9wnzk36EeSS5u8wdxTIGg" name="ResidentTaxPayer-constraint" constrainedElement="_s9wnyU36EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9wnz036EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>&#x9;self.addresses->exists( fiscal_add:Address | &#xA;&#x9;&#x9;fiscal_add.oclIsTypeOf(Fiscal_Address) and fiscal_add.country=Country::LU) or&#xA;&#x9;self.addresses->exists( hab_add:Address | &#xA;&#x9;&#x9;hab_add.oclIsTypeOf(Habitual_Address) and hab_add.country=Country::LU) &#xA;implies&#xA;&#x9;self.oclIsTypeOf(Resident_Tax_Payer)</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_s9wn0E36EeSS5u8wdxTIGg" name="SubjectToIncomeTax-constraint" constrainedElement="_s9wny036EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9wn0U36EeSS5u8wdxTIGg" name="subjectToIncomeTax ">
            <language>OCL</language>
            <body>&#x9;self.incomes->exists(inc:Income_Concepts::Income |&#xA;&#x9;&#x9; inc.oclIsTypeOf(Income_Concepts::Local_Income) or inc.oclIsTypeOf(Income_Concepts::Foreign_Income))&#xA;implies&#xA;&#x9;not self.incomeTax->isEmpty()&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_s9wn0k36EeSS5u8wdxTIGg" name="TaxCredit-CIS-constraint" constrainedElement="_s9wny036EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9wn0036EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>let   employement_income: Set(Income_Concepts::Income) = &#xA;      &#x9;self.incomes->select(inc|&#xA;      &#x9;&#x9;inc.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;not inc.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;   &#x9;   &#x9;&#x9;inc.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) and&#xA;       &#x9;&#x9;inc.start_date_within_taxation_year=self.incomeTax.tax_year),&#xA;       &#x9;total_income: Integer = employement_income.income_amount->sum(),&#xA;&#x9;&#x9;tax_liability :Integer = employement_income.tax_liability->sum() in&#xA;&#x9;&#x9;&#x9; &#x9;&#x9; &#xA;&#x9;&#x9;&#xA;&#x9;if(employement_income->size()>0) then&#xA;&#x9;&#x9; if (total_income>936*tax_liability) then&#xA;&#x9;&#x9; let set_of_CIS: Set(Income_Tax_Credit_Concepts::Income_Tax_Credit) = self.income_Tax_Credit->select(type|type.oclIsTypeOf(Income_Tax_Credit_Concepts::CIS) and type.tax_year=self.incomeTax.tax_year),&#xA;&#x9;&#x9;&#x9;size_set_of_CIS :Integer = set_of_CIS->size(),&#xA;&#x9;&#x9;&#x9; a_CIS: Income_Tax_Credit_Concepts::Income_Tax_Credit = set_of_CIS->any(true) in&#xA;&#x9; &#x9;    &#xA;&#x9; &#x9;    size_set_of_CIS = 1 and&#xA;&#x9;&#x9;&#x9;/**CIS IS CREDITED TO THE TAX PAYER**/&#xA;&#x9;&#x9;&#x9;a_CIS.yearly = Constants::FLAT_RATE_CIS_YEARLY.oclAsType(Integer)*tax_liability&#xA;      &#x9;else&#xA;      &#x9;&#x9;/**ERROR CIS CANNOT BE CREDITED**/&#xA;      &#x9;&#x9;false&#xA;      &#x9;endif&#x9;&#xA;     else&#xA;     &#x9;false&#xA;     endif&#xA;  &#xA;    </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_s9wn1E36EeSS5u8wdxTIGg" name="TaxCredit-CIP-constraint" constrainedElement="_s9wny036EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9wn1U36EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>let   employement_income: Set(Income_Concepts::Income) = &#xA;      &#x9;self.incomes->select(inc|&#xA;      &#x9;&#x9;inc.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;not inc.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;   &#x9;   &#x9;&#x9;inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) and&#xA;       &#x9;&#x9;inc.start_date_within_taxation_year=self.incomeTax.tax_year),&#xA;       &#x9;total_income: Integer = employement_income.income_amount->sum(),&#xA;&#x9;&#x9;tax_liability :Integer = employement_income.tax_liability->sum() in&#xA;&#x9;&#x9;&#x9; &#x9;&#x9; &#xA;&#x9;if(employement_income->size()>0) then&#xA;&#x9;&#x9; if (total_income>936*tax_liability) then&#xA;&#x9;&#x9; let set_of_CIP: Set(Income_Tax_Credit_Concepts::Income_Tax_Credit) = self.income_Tax_Credit->select(type|type.oclIsTypeOf(Income_Tax_Credit_Concepts::CIP) and type.tax_year=self.incomeTax.tax_year),&#xA;&#x9;&#x9;&#x9;size_set_of_CIP :Integer = set_of_CIP->size(),&#xA;&#x9;&#x9;&#x9; a_CIP: Income_Tax_Credit_Concepts::Income_Tax_Credit = set_of_CIP->any(true) in&#xA;&#x9; &#x9;    &#xA;&#x9; &#x9;    size_set_of_CIP = 1 and&#xA;&#x9;&#x9;&#x9;/**CIP IS CREDITED TO THE TAX PAYER**/&#xA;&#x9;&#x9;&#x9;a_CIP.yearly = Constants::FLAT_RATE_CIP_YEARLY.oclAsType(Integer) *tax_liability&#xA;      &#x9;else&#xA;      &#x9;&#x9;/**ERROR CIP CANNOT BE CREDITED**/&#xA;      &#x9;&#x9;false&#xA;      &#x9;endif&#x9;&#xA;     else&#xA;     &#x9;false&#xA;     endif&#xA;      &#x9;&#xA;      &#x9;&#xA;    </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_s9wn1k36EeSS5u8wdxTIGg" name="TaxCredit-CIM-constraint" constrainedElement="_s9wny036EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9wn1036EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>let&#xA; a_CIM : Income_Tax_Credit_Concepts::CIM = self.income_Tax_Credit->select(c | c.oclIsTypeOf(Income_Tax_Credit_Concepts::CIM) and c.tax_year = self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Credit_Concepts::CIM),&#xA; current_employement_income: Set(Income_Concepts::Income) = self.incomes->select(inc|&#xA;      &#x9;&#x9;inc.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;(inc.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)) and&#xA;      &#x9;&#x9;inc.start_date_within_taxation_year=self.incomeTax.tax_year) ,&#xA;      &#x9;&#x9;&#xA;income_TaxClass1A: Set(Income_Concepts::Income) = &#xA;      &#x9;&#x9;current_employement_income->select(inc|&#xA;      &#x9;&#x9;      &#x9;&#x9;inc.oclAsType(Income_Concepts::Local_Income).tax_card->exists(tc|tc.tax_Class = Tax_Class_Category::One_A)),&#xA;tax_liability : Integer = income_TaxClass1A.tax_liability->sum()&#xA;      &#x9;&#x9;in&#xA;&#xA;       if (current_employement_income->size()>0) then&#xA;&#x9;&#x9;&#x9;if &#x9;(income_TaxClass1A->size()>0) then&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;let child_with_allowances : Set(Dependent) = self.dependents->select(dep:Dependent|dep.dependent_type=Dependent_Type::CHILD and dep.compute_if_dependent_receives_allowances_eligible_for_CIM()=true and&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;dep.allowances->exists(al|al.valid_from_date=self.incomeTax.tax_year and al.valid_until_date = self.incomeTax.tax_year)=true) in&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9; if  child_with_allowances ->size()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CIM ALLOWED**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;a_CIM.yearly= Constants::FLAT_RATE_CIM_YEARLY.oclAsType(Integer) * tax_liability&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9; else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CIM, MISSING CHILD ALLOWANCE**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9; endif&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CIM, NOT TAX CLASS 1A**/&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CIM, NOT ELIGIBLE INCOME*/&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#xA;&#xA;&#x9;&#xA;/**NAVIGATION&#xA;self.tax_class&#xA;self.income_Tax_Credit->&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;self.tax_class&#xA;self.incomeTax.tax_year&#xA;self.incomes&#xA;inc.oclAsType(Income_Concepts::Local_Income).tax_card&#xA;self.incomeTax.tax_year&#xA;self.dependents&#xA;dep.allowances&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;**/</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_s9wn2E36EeSS5u8wdxTIGg" name="Legal_Union-monogamus-constraint" constrainedElement="_s9wny036EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9wn2U36EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>let legal_union: Set(Legal_Union_Record) = self.legal_union_A->select(couple|couple.end_date->isEmpty()) in&#xA;if (legal_union->size()=1) then&#x9;&#xA;&#x9;/**YOU ARE IN LIGEL UNION WITH ONLY ONE PERSON**/&#xA;&#x9;true&#xA;else&#xA;&#x9;/**ERROR YOU CANNOT BE IN LEGAL UNION WITH MORE THAN ONE PERSON**/&#xA;&#x9;false&#xA;endif&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_s9wn2k36EeSS5u8wdxTIGg" name="TaxClass-unique-constraint" constrainedElement="_s9wny036EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9wn2036EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>let tax_classes: Set(Tax_Class) = self.tax_class->select(tax_classe|tax_class.valid_until_date->isEmpty()) in&#xA;if tax_classes->size()=1 then&#x9;&#xA;&#x9;/**ONLY ONE TAX CLASS AT TIME**/&#xA;&#x9;true&#xA;else&#xA;&#x9;/**ERROR YOU CANNOT HAVE SEVERAL TAX CLASSES AT TIME**/&#xA;&#x9;false&#xA;endif</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_s9wn3E36EeSS5u8wdxTIGg" name="TaxDeduction-CE-constraint" constrainedElement="_s9wny036EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9wn3U36EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>let set_of_CE: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::CE) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year),&#xA;&#x9; CE_invalidity:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::INALIDITY_AND_INFIRMITY),&#xA;&#x9; CE_dependence:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD),&#xA;&#x9; CE_child_not_part_of_household:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::CARE_FOR_CHILDREN_NOT_BEING_PART_OF_HOUSEHOLD),&#xA;&#x9; income_subject_to_witholding_tax : Set(Income_Concepts::Income) = self.incomes->select(income|income.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not income.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.start_date_within_taxation_year = self.incomeTax.tax_year),&#xA; &#x9; extraordinary_expenses : &#x9;Set(Expense_Concepts::Expense) = self.expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclIsTypeOf(Expense_Concepts::Extraordinary_Expense_CE)),&#x9;&#xA; &#x9; extraordinary_expense_invalidity_and_infirmity  : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::INALIDITY_AND_INFIRMITY),&#xA; &#x9; extraordinary_expense_dependence_and_care : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD), &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA; &#x9; extraordinary_expense_care_for_children_not_part_of_the_household : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::CARE_FOR_CHILDREN_NOT_BEING_PART_OF_HOUSEHOLD),  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#xA;&#x9; declared_expense:Integer=extraordinary_expenses.declared_amount->sum() in&#xA;&#x9; &#xA;&#x9;if (income_subject_to_witholding_tax->size()>0) then&#xA;&#x9;&#x9;if (extraordinary_expenses->any(true).oclAsType(Expense_Concepts::Extraordinary_Expense_CE).is_above_thresholded_deduction_percentage_for_CE()=true) then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if extraordinary_expense_invalidity_and_infirmity->size()>0 then &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if self.oclIsTypeOf(Resident_Tax_Payer) then&#xA;&#x9;&#x9;&#x9;&#x9;/**CE FOR INVALIDITY AND INFIRMITY ON THE TAX CARD**/&#xA;&#x9;&#x9;&#x9;&#x9;CE_invalidity->size() = 1&#x9;and&#xA;&#x9;&#x9;&#x9;&#x9;CE_invalidity->any(true).deductible_amount = CE_invalidity->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).disability_flat_rate&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if  extraordinary_expense_dependence_and_care ->size()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->size()=1 and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;let &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expenses_for_dependence_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::DEPENDENCE_CARE) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; expenses_for_house_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|expense.expense_purpose=Expense_Purpose::HOUSE_CARE) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; expenses_for_child_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::CHILD_CARE),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;amount_house_care: Integer = expenses_for_house_care.declared_amount->sum(),&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sum_of_expenses:Integer =  expenses_for_child_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.compute_if_dependent_receives_allowances_eligible_for_CE_dependance_and_care() =true and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.dependent_type=Dependent_Type::CHILD and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(expense.dependent.oclAsType(Physical_Person).age&lt;14) or&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.oclAsType(Physical_Person).disability_percentage>0).declared_amount->sum() in&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(expenses_for_child_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CHILD CARE, CHILDREN BEING PART OF THE HOUSHOLD**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(amount_house_care + sum_of_expenses)>Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(expenses_for_dependence_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CLOSE RELATIVE DEPENDENCE CARE**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount = Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer)+ CE_dependence->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).dependent_relative_flat_rate&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;CE_dependence->any(true).deductible_amount = Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(expenses_for_dependence_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CLOSE RELATIVE DEPENDENCE CARE**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount= amount_house_care + sum_of_expenses + CE_dependence->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).dependent_relative_flat_rate&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount= amount_house_care + sum_of_expenses&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif &#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if  CE_child_not_part_of_household->size()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; CE_child_not_part_of_household->size()= 1 and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CARE FOR CHILDREN NOT BEING PART OF THE HOUSEHOLD**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;let&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expenses_for_child_not_part_of_houselod_care: Set(Expense_Concepts::Expense) = self.expenses->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::CHILD_CARE),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;sum_expenses_for_children:Integer = expenses_for_child_not_part_of_houselod_care->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.compute_if_dependent_receives_allowances_eligible_for_CE_dependance_and_care() =false and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;((expense.dependent.age&lt;=21) or&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(expense.dependent.age>21 and expense.dependent.continued_studies=true and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.tax_Payer.incomes.income_amount->sum()&lt;0.6*Constants::MINIMUM_SALARY.oclAsType(Integer)))).declared_amount->sum() in&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(sum_expenses_for_children>Constants::MAXIMUM_CE_RATE_FOR_CHILD_NOT_BEING_PART_OF_HOUSEHOLD.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;CE_child_not_part_of_household->any(true).deductible_amount  = Constants::MAXIMUM_CE_RATE_FOR_CHILD_NOT_BEING_PART_OF_HOUSEHOLD.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_child_not_part_of_household->any(true).deductible_amount = sum_expenses_for_children&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;/*use it to fill the tax card, temporary until decision on how to model the tax card with respect to the tax payer&#xA;&#x9;&#x9;&#x9;CE_invalidity->any(true).deductible_amount +&#xA;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount + &#xA;&#x9;&#x9;&#x9;CE_child_not_part_of_household->any(true).deductible_amount */&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CE, NOT SUBJECT TO WITHOLDING**/&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#x9;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_s9wn3k36EeSS5u8wdxTIGg" name="TaxDeduction-AC-extra_professional-constraint" constrainedElement="_s9wny036EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9wn3036EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>let set_of_AC: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::AC) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year),&#xA;&#x9;ac: Income_Tax_Deduction_Concepts::AC = set_of_AC->any(true).oclAsType(Income_Tax_Deduction_Concepts::AC),&#xA;&#x9;spouse: Physical_Person = self.legal_union_A->select(couple|couple.end_date->isEmpty())->any(true).individual_B,&#xA;&#x9;taxpayer_income_eligible_type : Boolean = self.incomes->exists(inc|ac.is_eligible_income_for_AC(inc)),&#xA;&#x9;spouse_income_eligible_type : Boolean = spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->exists(inc|ac.is_eligible_income_for_AC(inc)),&#xA;&#x9;&#xA;&#x9;taxpayer_income_eligible_type_assisting_spouse : Boolean = self.incomes->exists(inc|ac.is_eligible_income_for_AC_assisting_spouse(inc)),&#xA;&#x9;spouse_income_eligible_type_assisting_spouse : Boolean = spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->exists(inc|ac.is_eligible_income_for_AC_assisting_spouse(inc)),&#xA;&#x9;&#xA;&#x9;taxpayer_personnaly_affiliated_to_social_security : Boolean = self.is_affiliated_personnaly_to_social_security,&#xA;&#x9;taxpayer_assisting_spouse: Boolean = self.is_assisting_spouse,&#xA;&#x9;&#xA;&#x9;spouse_personnaly_affiliated_to_social_security : Boolean = spouse.is_affiliated_personnaly_to_social_security,&#xA;&#x9;spouse_assisting_spouse: Boolean =  spouse.is_assisting_spouse&#xA;&#x9;in&#xA;&#x9; &#xA;&#x9; if taxpayer_income_eligible_type=true and spouse_income_eligible_type=true then&#xA;&#x9; &#x9;if taxpayer_personnaly_affiliated_to_social_security=true  and spouse_personnaly_affiliated_to_social_security = true then&#xA;&#x9; &#x9;&#x9;ac.deductible_amount= Constants::FLAT_RATE_FOR_EXTRA_PROFESSIONAL_DEDUCTION&#xA;&#x9; &#x9;else&#xA;&#x9; &#x9;&#x9;false&#xA;&#x9; &#x9;endif&#xA;&#x9; else&#xA;&#x9; &#x9;&#x9;if taxpayer_income_eligible_type=true xor spouse_income_eligible_type=true then&#x9; &#x9;&#x9;&#xA;&#x9; &#x9;&#x9;&#x9;if  self.incomes->exists(inc|inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) and inc.compute_duration_of_contract() &lt;=36) xor&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exists(inc|inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)  and inc.compute_duration_of_contract() &lt;=36) then&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;true&#x9; &#x9;&#x9;&#x9;&#x9;&#xA;&#x9; &#x9;&#x9;&#x9;else&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;ac.deductible_amount=0 &#xA;&#x9; &#x9;&#x9;&#x9;endif&#x9;&#xA;&#x9; &#x9;&#x9;&#x9;&#xA;&#x9; &#x9;&#x9;else&#xA;&#x9; &#x9;&#x9;&#x9; if taxpayer_income_eligible_type_assisting_spouse=true xor taxpayer_income_eligible_type_assisting_spouse=true then&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;if (taxpayer_personnaly_affiliated_to_social_security=true and spouse_personnaly_affiliated_to_social_security = false)  xor &#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;(taxpayer_personnaly_affiliated_to_social_security=false and spouse_personnaly_affiliated_to_social_security = true) then&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;else&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;ac.deductible_amount=0&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9; else&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;ac.deductible_amount =0 &#xA;&#x9;&#x9;&#x9; endif&#xA;&#x9; &#x9;endif&#xA;&#x9; endif&#xA;/**NAVIGATIONS&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;self.income_Tax_Deduction->&#xA;self.incomeTax.tax_year&#xA;self.legal_union_A->select&#xA;self.incomes->exists&#xA;spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->exists&#xA;self.incomes->exists(i&#xA;spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->&#xA;self.incomes->exists(&#xA;inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)&#xA;spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->&#xA;inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)**/</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_s9wn4E36EeSS5u8wdxTIGg" name="TaxDeduction-DS-1-permanent_expense" constrainedElement="_s9wny036EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9wn4U36EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>let &#xA;permanent_expense: Set(Expense_Concepts::Expense) = self.expenses->select(expense|expense.oclIsTypeOf(Expense_Concepts::Permanent_Expense) and expense.year_expense_was_incurred_in=self.incomeTax.tax_year),&#xA;alimony: Set(Expense_Concepts::Expense) = permanent_expense->select(alimony|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;alimony.oclAsType(Expense_Concepts::Permanent_Expense).category = Expense_Concepts::Category_of_Permanent_Expense::ALIMONY and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;alimony.oclAsType(Expense_Concepts::Permanent_Expense).is_eligible_for_deduction = true),&#xA;debt: Set(Expense_Concepts::Expense) = permanent_expense->select(debt|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;debt.oclAsType(Expense_Concepts::Permanent_Expense).category = Expense_Concepts::Category_of_Permanent_Expense::MISCELLANEOUS_DEBT),&#xA;ds_alimony: Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense).permanent_expense_category =  Expense_Concepts::Category_of_Permanent_Expense::ALIMONY and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense),&#xA;tax_liability : Integer = self.incomes.tax_liability->sum(),&#xA;ds_debt: Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense).permanent_expense_category =  Expense_Concepts::Category_of_Permanent_Expense::MISCELLANEOUS_DEBT and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense)&#xA;&#x9;   in&#x9;&#xA;&#xA;if permanent_expense->size()>0 then&#xA;&#x9;if debt->size()>0 then&#xA;&#x9;&#x9;ds_debt.deductible_amount = debt.declared_amount->sum()/2 * tax_liability&#xA;&#x9;else&#xA;&#x9;&#x9;false&#xA;&#x9;endif and&#xA;&#x9;if alimony->size()>0 then&#xA;&#x9;&#x9;alimony->forAll(al|self.is_separated_from(al.dependent)=true)&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;let sum_alimony: Integer = alimony.declared_amount->sum() * tax_liability in&#xA;&#x9;&#x9;if sum_alimony&lt;=Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ALIMONY_EXPENSE.oclAsType(Integer) then&#xA;&#x9;&#x9;&#x9;ds_alimony.deductible_amount = sum_alimony&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;ds_alimony.deductible_amount = Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ALIMONY_EXPENSE.oclAsType(Integer) &#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif&#xA;&#xA;/**NAVIGATION&#xA;self.expenses->select&#xA;self.incomeTax.tax_year&#xA;self.income_Tax_Deduction->select&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;al.dependent**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_s9wn4k36EeSS5u8wdxTIGg" name="TaxDeduction-DS-2-interest_expense" constrainedElement="_s9wny036EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9wn4036EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>self.incomes->forAll(inc |&#xA;&#xA;if (inc.end_date_within_taxation_year = self.incomeTax.tax_year) then&#xA;&#xA;let &#xA;interest_expense: Set(Expense_Concepts::Expense) = inc.expenses->select(expense|expense.oclIsTypeOf(Expense_Concepts::Interest_Expense) and expense.year_expense_was_incurred_in=self.incomeTax.tax_year),&#xA;ds_interest_expense: Income_Tax_Deduction_Concepts::DS_for_Interest_Expense = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Interest_Expense) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.expenses->includesAll(interest_expense) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Interest_Expense),&#xA;dependent_children_with_allowances: Set(Dependent) = self.dependents->select(deps|deps.compute_if_dependent_receives_allowances_eligible_for_DS() =true),&#xA;tax_liability : Integer =inc.tax_liability in &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;if interest_expense->size()>0 then&#xA;&#x9;let sum_interest_expense: Integer = interest_expense.declared_amount->sum() in&#xA;&#x9;if sum_interest_expense&lt;=ds_interest_expense.maximum_deductible_amount then&#xA;&#x9;&#xA;&#x9;&#x9;ds_interest_expense.deductible_amount = sum_interest_expense * tax_liability&#xA;&#x9;else&#xA;&#x9;&#x9;ds_interest_expense.deductible_amount = ds_interest_expense.maximum_deductible_amount * tax_liability&#x9;&#x9;&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif&#xA;else&#xA;false&#xA;endif&#xA;)&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_s9wn5E36EeSS5u8wdxTIGg" name="TaxDeduction-DS-3-health_and_pension_insurance" constrainedElement="_s9wny036EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9wn5U36EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>self.incomes->forAll( inc | &#xA;&#xA;let &#xA;mandatory_health_and_pension_insurance: Set(Expense_Concepts::Expense) = inc.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Health_and_Pension_Insurance).category =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::MANDATORY_HEALTH_AND_PENSION_INSURANCE&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Health_and_Pension_Insurance).is_related_to_additional_salary=true),&#xA;additional_pension_insurance: Set(Expense_Concepts::Expense) = inc.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Health_and_Pension_Insurance).category =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::ADDITIONAL_EMPLOYERS_PENSION_INSURANCE),&#xA;continued_health_and_pension_insurance: Set(Expense_Concepts::Expense) = inc.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Health_and_Pension_Insurance).category =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::CONTINUED_HEALTH_AND_PENSION_INSURANCE),&#xA;ds_mandatory_health_and_pension : Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance).insurance_category = &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::MANDATORY_HEALTH_AND_PENSION_INSURANCE and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year and type.expenses->includesAll(mandatory_health_and_pension_insurance)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance),&#xA;ds_additional_pension_insurance : Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance).insurance_category = &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::ADDITIONAL_EMPLOYERS_PENSION_INSURANCE and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and type.expenses->includesAll(additional_pension_insurance)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance),&#xA;ds_continued_health_and_pension_insurance : Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance).insurance_category = &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::CONTINUED_HEALTH_AND_PENSION_INSURANCE and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and type.expenses->includesAll(continued_health_and_pension_insurance)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance),&#xA;tax_liability : Integer = inc.tax_liability  in &#xA;&#xA;if mandatory_health_and_pension_insurance->size()>0 then&#xA;&#x9;if inc.oclIsTypeOf(Income_Concepts::Employment_Income) then&#xA;&#x9;let sum_mandatory_health_and_pension_insurance : Integer = mandatory_health_and_pension_insurance.declared_amount->sum() in&#xA;&#x9;&#x9;ds_mandatory_health_and_pension.deductible_amount = sum_mandatory_health_and_pension_insurance&#xA;&#x9;else&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif &#xA;and&#xA;if additional_pension_insurance->size()>0 then&#xA;&#x9;if inc.oclIsTypeOf(Income_Concepts::Employment_Income) then&#xA;&#x9;let sum_additional_pension_insurance : Integer = additional_pension_insurance.declared_amount->sum() in&#xA;&#x9;&#x9;if&#x9;sum_additional_pension_insurance &lt;= Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ADDITIONAL_PENSION_AND_INSURANCE.oclAsType(Integer) then&#xA;&#x9;&#x9;&#x9;ds_additional_pension_insurance.deductible_amount = sum_additional_pension_insurance&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;ds_additional_pension_insurance.deductible_amount = Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ADDITIONAL_PENSION_AND_INSURANCE.oclAsType(Integer)&#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif and&#xA;if continued_health_and_pension_insurance->size()>0 then&#xA;&#x9;let sum_continued_health_and_pension_insurance : Integer = continued_health_and_pension_insurance.declared_amount->sum() in&#xA;&#x9;&#x9;ds_continued_health_and_pension_insurance.deductible_amount = tax_liability * sum_continued_health_and_pension_insurance&#xA;else&#xA;&#x9;false&#xA;endif&#xA;)&#xA;&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_s9wn5k36EeSS5u8wdxTIGg" name="TaxDeduction-DS-4-private_insurance_and_plan" constrainedElement="_s9wny036EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9wn5036EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>let &#xA;insurance_and_plan: Set(Expense_Concepts::Expense) = self.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).category &lt;>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::OLD_AGE_PENSION_PLAN&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).category &lt;>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::PRIVATE_LIFE_INSURANCE&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).is_private_insurance_and_plan_eligible_for_deduction=true),&#xA;life_insurance: Set(Expense_Concepts::Expense) = self.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).category =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::PRIVATE_LIFE_INSURANCE&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).is_private_insurance_and_plan_eligible_for_deduction=true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).duration_of_contract >=10),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;old_age_pension_plan: Set(Expense_Concepts::Expense) = self.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).category =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::OLD_AGE_PENSION_PLAN&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).is_private_insurance_and_plan_eligible_for_deduction=true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).duration_of_contract >=10),&#xA;ds_private_insurance_and_plan: Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan).private_insurance_and_plan_category &lt;> &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::OLD_AGE_PENSION_PLAN and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan),&#xA;ds_old_age_pension_plan: Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan).private_insurance_and_plan_category = &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::OLD_AGE_PENSION_PLAN and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan),&#xA;tax_liability : Integer = self.incomes.tax_liability->sum() in&#xA;&#xA;if insurance_and_plan->size()>0 then&#xA;&#xA;let sum_insurance_and_plan : Integer = insurance_and_plan.declared_amount->sum() + life_insurance.declared_amount->sum() + &#xA;      &#x9;&#x9;&#x9;ds_private_insurance_and_plan.increase_for_life_insurance in&#xA;&#x9;&#x9;&#xA;if&#x9;sum_insurance_and_plan &lt;= ds_private_insurance_and_plan.maximum_deductible_amount_for_private_insurance then&#xA;&#x9;&#x9;&#x9;ds_private_insurance_and_plan.deductible_amount = sum_insurance_and_plan&#xA;&#x9;else&#xA;&#x9;&#x9;&#x9;ds_private_insurance_and_plan.deductible_amount = ds_private_insurance_and_plan.maximum_deductible_amount_for_private_insurance&#x9;&#x9;&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif&#xA;&#xA;and&#xA;&#xA;if old_age_pension_plan->size()>0 then&#xA;let sum_old_age_pension_plan : Integer = old_age_pension_plan.declared_amount->sum() in&#xA;&#x9;if&#x9;sum_old_age_pension_plan &lt;= ds_old_age_pension_plan.maximum_deductible_amount_for_old_age_pension_plan then&#xA;&#x9;&#x9;&#x9;ds_old_age_pension_plan.deductible_amount = sum_old_age_pension_plan&#xA;&#x9;else&#xA;&#x9;&#x9;&#x9;ds_old_age_pension_plan.deductible_amount = ds_old_age_pension_plan.maximum_deductible_amount_for_private_insurance&#x9;&#x9;&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif&#xA;&#xA;/**NAVIGATIONS&#xA;self.expenses->&#xA;self.incomeTax.tax_year&#xA;self.expenses->&#xA;self.incomeTax.tax_year->&#xA;self.expenses->&#xA;self.incomeTax.tax_year&#xA;self.income_Tax_Deduction->select&#xA;self.incomeTax.tax_year&#xA;**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_s9wn6E36EeSS5u8wdxTIGg" name="TaxDeduction-DS-5-donation" constrainedElement="_s9wny036EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9wn6U36EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>let &#xA;donations: Set(Expense_Concepts::Expense) = self.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Donation)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;or expense.oclAsType(Expense_Concepts::Donation).is_donation_reported = true)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Donation).is_beneficiary_eligible=true),&#xA;ds_donation: Income_Tax_Deduction_Concepts::DS_for_Donation = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Donation) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Donation) in &#x9;&#x9;&#x9;&#x9;&#x9;&#xA;if donations->size()>0 then&#xA;&#x9;let sum_donation: Integer = donations.declared_amount->sum() in&#xA;&#x9;if sum_donation >= Constants::MINIMUM_DEDUCTIBLE_AMOUNT_FOR_DONATIONS.oclAsType(Integer) then&#xA;&#x9;&#x9;if sum_donation &lt;= ds_donation.maximum_deductible_amount then&#xA;&#x9;&#x9;ds_donation.deductible_amount = sum_donation&#xA;&#x9;else&#xA;&#x9;&#x9;ds_donation.deductible_amount = ds_donation.maximum_deductible_amount&#xA;&#x9;endif&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif&#xA;&#xA; </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_s9wn6k36EeSS5u8wdxTIGg" name="TaxDeduction-DS-6-loss_carryforward" constrainedElement="_s9wny036EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9wn6036EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>self.incomes->forAll( inc | &#xA;&#xA;                            if (&#xA;                            &#x9;&#x9;(inc.income_type.oclIsTypeOf(Income_Concepts::Agriculture_and_Forestry_Income) or&#xA;                            &#x9;&#x9;inc.income_type.oclIsTypeOf(Income_Concepts::Independent_Professional_Services_Income) or&#xA;                                inc.income_type.oclIsTypeOf(Income_Concepts::Trade_and_Business_Income))&#xA;                               and (inc.end_date_within_taxation_year = self.incomeTax.tax_year)) then /**PUT &lt;, when deciding how to model Date or how to use &quot;&lt;&quot; with the Marte Profile **/&#xA;                               let&#xA;                                 &#x9;losses: Set(Expense_Concepts::Expense) = inc.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Loss_Carryforward) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).regular_accountability = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).compensation_by_other_means=false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).tax_payer_has_been_partner_in_business = false),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;losses_successor: Set(Expense_Concepts::Expense) = inc.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Loss_Carryforward) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).regular_accountability = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).compensation_by_other_means=false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).tax_payer_has_been_partner_in_business = true &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).tax_payer_has_inherited_business_ownership = true),&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ds_loss: Income_Tax_Deduction_Concepts::DS_for_Loss_Carryforward = losses.deduction->select(type| &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Loss_Carryforward) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Loss_Carryforward) in &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(inc.end_date_within_taxation_year = 1990) then /**PUT &lt;, when deciding how to model Date or how to use &quot;&lt;&quot; with the Marte Profile **/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;if losses.declared_amount->sum()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ds_loss.deductible_amount =  losses.declared_amount->sum()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if losses_successor.declared_amount->sum() >0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ds_loss.deductible_amount = losses_successor.declared_amount->sum() &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ds_loss.deductible_amount = 0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; else &#xA;                                &#x9;&#x9; false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif)&#xA;&#xA;/**NAVIGATIONS:&#xA;self.incomes->&#xA;inc.expenses->&#xA;inc.expenses->&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;losses.deduction->&#xA;inc.income_type&#xA;inc.income_type&#xA;inc.income_type&#xA;**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_s9wn7E36EeSS5u8wdxTIGg" name="TaxCard-unique-constraint" constrainedElement="_s9wny036EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9wn7U36EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>self.incomes->forAll(income|income.tax_card->select(tc|tc.validity=true)->size() &lt;= 1)&#xA;/**THE INCOME CAN HAVE AT MOST ONE VALID TAX CARD, IF THE CONTRACT HAS ENDED THAN IT IS ZERO VALID**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_s9wn7k36EeSS5u8wdxTIGg" name="TaxDeduction-FD-constraint" constrainedElement="_s9wny036EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9wn7036EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>self.incomes->forAll(income|&#xA;&#xA;&#x9;let &#xA;&#x9;&#x9;fd_expenses : Set(Expense_Concepts::Expense)= self.expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Travel_Expense_FD) and&#xA;&#x9;&#x9;&#x9;exp.year_expense_was_incurred_in=self.incomeTax.tax_year),&#xA;&#x9;&#x9;declared_amount : Integer = fd_expenses.declared_amount->sum(),&#xA;&#x9;&#x9;a_FD:Income_Tax_Deduction_Concepts::FD= self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::FD) and type.tax_year=self.incomeTax.tax_year and&#xA;&#x9;&#x9;&#x9;type.expenses->includesAll(fd_expenses))->any(true).oclAsType(Income_Tax_Deduction_Concepts::FD) in&#xA;&#xA;if ((income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) or&#xA;income.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or&#xA;income.income_type.oclIsTypeOf(Income_Concepts::Rentals_and_Leases_Income)) and&#xA;income.start_date_within_taxation_year = self.incomeTax.tax_year) then&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#xA;&#x9;&#x9;if  (a_FD.calculated_distance>a_FD.distance_declared_in_january) then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if  (a_FD.calculated_distance>Constants::MINIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;if (a_FD.calculated_distance>Constants::MAXIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/**MAXIMAL FLAT DISTANCE FOR TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;a_FD.deductible_amount = Constants::FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT.oclAsType(Integer) * Constants::MAXIMAL_FLAT_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/**REAL DISTANCE FOR TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;a_FD.deductible_amount = Constants::FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT.oclAsType(Integer) * a_FD.calculated_distance&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;/**NO TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;a_FD.deductible_amount = 0&#xA;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/*NO CHANGES FOR FD, TRAVEL EXPENSE IS ALREADY DEDUCED FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;endif&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;a_FD.yearly=  a_FD.deductible_amount and&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;a_FD.monthly = a_FD.deductible_amount/12 and&#xA;&#x9;&#x9;a_FD.daily = a_FD.monthly/24&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE FD FOR TRAVEL EXPENSE, THERE IS NO INCOME TYPE ELIGIBLE FOR FD**/&#xA;&#x9;&#x9;a_FD.deductible_amount = 0&#xA;&#x9;endif&#xA;)&#xA;&#xA;&#xA;/** NAVIGATIONS&#xA;self.incomes&#xA;self.expenses&#xA;self.incomeTax&#xA;self.income_Tax_Deduction&#xA;type.expenses&#xA;income.income_type&#xA;income.income_type&#xA;income.income_type&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;**/</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_s9wn8E36EeSS5u8wdxTIGg" name="TaxDeduction-FO-constraint" constrainedElement="_s9wny036EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9wn8U36EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>self.incomes->forAll(income| &#xA;let &#xA;&#x9; fo_expenses : Set(Expense_Concepts::Expense) = income.expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Miscellaneous_Expense_FO) and exp.year_expense_was_incurred_in = self.incomeTax.tax_year),&#xA;&#x9; declared_expense:Integer=fo_expenses.declared_amount->sum(),&#xA;&#x9; set_of_FO: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|type.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO) &#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and type.tax_year=self.incomeTax.tax_year&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and type.expenses->includesAll(fo_expenses)),&#xA;&#x9; size_set_of_FO:Integer = set_of_FO->size(),&#xA;&#x9; a_FO:Income_Tax_Deduction_Concepts::FO=set_of_FO->any(true).oclAsType(Income_Tax_Deduction_Concepts::FO),&#xA;&#x9; income_type_for_taxpayer_authorized_for_FO : Boolean = ((income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) or&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.income_type.oclIsTypeOf(Income_Concepts::Rentals_and_Leases_Income)) and&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.start_date_within_taxation_year = self.incomeTax.tax_year)&#x9; in&#xA;if size_set_of_FO>1 then&#xA;&#x9;/**TAX PAYER CANNOT RECEIVE MORE THAN ONE FO PER INCOME AND EXPENSES ATTACHED TO THE INCOME**/&#xA;&#x9;false&#xA;else&#xA;&#x9;if income_type_for_taxpayer_authorized_for_FO = true then&#xA;&#x9;&#x9;if(not self.taxed_jointly) then &#xA;&#x9;&#x9;&#x9;if(declared_expense> Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;a_FO.rate_type_for_FO = Type_of_Rate::REAL_COST&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;a_FO.rate_type_for_FO = Type_of_Rate::REGULAR&#xA;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/**FLAT RATE OR REAL COSTS DEFINED BY JOINT TAXATION**/&#xA;&#x9;&#x9;&#x9;/*do we want to care about this, or up to the agent to decide*/&#xA;&#x9;&#x9;&#x9;let spouse_FO: Income_Tax_Deduction_Concepts::FO =  self.legal_union_A.individual_B.oclAsType(Tax_Payer).income_Tax_Deduction->&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select(type|type.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO))->any(true).oclAsType(Income_Tax_Deduction_Concepts::FO),&#xA;&#x9;&#x9;&#x9;&#x9; spouse_declared_expense:Integer=self.legal_union_A.individual_B.oclAsType(Tax_Payer).expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Miscellaneous_Expense_FO))->any(true).declared_amount in&#xA;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;(a_FO.rate_type_for_FO = Type_of_Rate::REAL_COST and declared_expense> Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer) and spouse_FO.rate_type_for_FO = Type_of_Rate::REGULAR) xor&#xA;&#x9;&#x9;&#x9;(a_FO.rate_type_for_FO = Type_of_Rate::REGULAR and spouse_FO.rate_type_for_FO = Type_of_Rate::REAL_COST and  spouse_declared_expense>Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)) &#xA;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if (a_FO.rate_type_for_FO = Type_of_Rate::REGULAR) then&#xA;&#x9;&#x9;&#x9;/*FLAT RATE FOR FO EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;a_FO.oclAsType(Income_Tax_Deduction_Concepts::Income_Tax_Deduction).deductible_amount = Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)+Constants::DISABILITY_FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/**REAL COST FOR FO EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;a_FO.deductible_amount = declared_expense+Constants::DISABILITY_FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)&#xA;&#xA;&#x9;&#x9;endif&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;a_FO.yearly=  a_FO.deductible_amount and&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;a_FO.monthly = a_FO.deductible_amount/12 and&#xA;&#x9;&#x9;a_FO.daily = a_FO.monthly/24&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE FO, THERE IS NO INCOME TYPE ELIGIBLE FOR FO**/&#xA;&#x9;&#x9;a_FO.deductible_amount = 0&#xA;&#x9;endif&#xA;endif&#xA;)&#xA;&#xA;/**NAVIGATION &#xA;&#xA;self.income_Tax_Deduction->select(type|type.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO) and type.tax_year=self.incomeTax.tax_year),&#xA;self.incomeTax.tax_year&#xA;self.incomes->select(income&#xA;income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)&#xA;income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)&#xA;income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)&#xA;self.expenses->select(exp&#xA;self.legal_union_A.individual_B.oclAsType(Tax_Payer).income_Tax_Deduction->&#xA;self.legal_union_A.individual_B.oclAsType(Tax_Payer).expenses->selec&#xA;a_FO.oclAsType(Income_Tax_Deduction_Concepts::Income_Tax_Deduction).tax_year&#xA;&#xA;&#xA;**/</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_s9wn8k36EeSS5u8wdxTIGg" name="test_for_iterate" constrainedElement="_s9wny036EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9wn8036EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>let out : Integer = self.expenses->iterate(it; acc:Integer = 0| if (self.age>18) then acc + 1 else 0 endif) in&#xA;&#xA;out >5 &#xA;&#xA;and self.is_dependent_part_of_the_household(self.dependents->any(true))&#xA;&#xA;&#xA;&#xA;&#xA; &#xA; &#xA; &#xA;&#xA;&#xA; &#xA;&#xA;&#xA;&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_s9wn9E36EeSS5u8wdxTIGg" name="NEW_TaxDeduction-CE-INVALIDITY" constrainedElement="_s9wny036EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9wn9U36EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>let set_of_CE: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::CE) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year),&#xA;&#x9; CE_invalidity:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::INALIDITY_AND_INFIRMITY),&#xA;&#x9;income_subject_to_witholding_tax : Set(Income_Concepts::Income) = self.incomes->select(income|income.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not income.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.start_date_within_taxation_year = self.incomeTax.tax_year),&#xA; &#x9; extraordinary_expenses : &#x9;Set(Expense_Concepts::Expense) = self.expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclIsTypeOf(Expense_Concepts::Extraordinary_Expense_CE)),&#x9;&#xA; &#x9; extraordinary_expense_invalidity_and_infirmity  : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::INALIDITY_AND_INFIRMITY),&#x9;&#xA;&#x9; declared_expense:Integer=extraordinary_expense_invalidity_and_infirmity.declared_amount->sum() in&#xA;&#x9;if (income_subject_to_witholding_tax->size()>0) then&#xA;&#x9;&#x9;if (extraordinary_expenses->any(true).oclAsType(Expense_Concepts::Extraordinary_Expense_CE).is_above_thresholded_deduction_percentage_for_CE()=true) then&#xA;&#x9;&#x9;&#x9;if extraordinary_expense_invalidity_and_infirmity->size()>0 then &#xA;&#x9;&#x9;&#x9;&#x9;if self.oclIsTypeOf(Resident_Tax_Payer) then&#xA;&#x9;&#x9;&#x9;&#x9;/**CE FOR INVALIDITY AND INFIRMITY ON THE TAX CARD**/&#xA;&#x9;&#x9;&#x9;&#x9;CE_invalidity->size() = 1&#x9;and&#xA;&#x9;&#x9;&#x9;&#x9;CE_invalidity->any(true).deductible_amount = CE_invalidity->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).disability_flat_rate&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;endif&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;false&#xA;&#x9;&#x9;endif&#x9;&#xA;else&#xA;false&#xA;endif&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_s9wn9k36EeSS5u8wdxTIGg" name="NEW_TaxDeduction-CE-DEPENDENCE-AND-CARE" constrainedElement="_s9wny036EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9wn9036EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>let set_of_CE: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::CE) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year),&#xA;&#x9; CE_dependence:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD),&#xA;&#x9; income_subject_to_witholding_tax : Set(Income_Concepts::Income) = self.incomes->select(income|income.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not income.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.start_date_within_taxation_year = self.incomeTax.tax_year),&#xA; &#x9; extraordinary_expenses : &#x9;Set(Expense_Concepts::Expense) = self.expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclIsTypeOf(Expense_Concepts::Extraordinary_Expense_CE)),&#x9;&#xA; &#x9; extraordinary_expense_dependence_and_care : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD), &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9; declared_expense:Integer=extraordinary_expense_dependence_and_care.declared_amount->sum() in&#xA;&#x9; &#xA;&#x9;if (income_subject_to_witholding_tax->size()>0) then&#xA;&#x9;&#x9;if (extraordinary_expenses->any(true).oclAsType(Expense_Concepts::Extraordinary_Expense_CE).is_above_thresholded_deduction_percentage_for_CE()=true) then&#xA;&#x9;&#x9;&#x9;&#x9;if  extraordinary_expense_dependence_and_care ->size()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->size()=1 and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;let &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expenses_for_dependence_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::DEPENDENCE_CARE) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; expenses_for_house_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|expense.expense_purpose=Expense_Purpose::HOUSE_CARE) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; expenses_for_child_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::CHILD_CARE),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;amount_house_care: Integer = expenses_for_house_care.declared_amount->sum(),&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sum_of_expenses:Integer =  expenses_for_child_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.compute_if_dependent_receives_allowances_eligible_for_CE_dependance_and_care() =true and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.dependent_type=Dependent_Type::CHILD and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(expense.dependent.oclAsType(Physical_Person).age&lt;14) or&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.oclAsType(Physical_Person).disability_percentage>0).declared_amount->sum() in&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(expenses_for_child_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CHILD CARE, CHILDREN BEING PART OF THE HOUSHOLD**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(amount_house_care + sum_of_expenses)>Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(expenses_for_dependence_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CLOSE RELATIVE DEPENDENCE CARE**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount = Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer)+ CE_dependence->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).dependent_relative_flat_rate&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;CE_dependence->any(true).deductible_amount = Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(expenses_for_dependence_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CLOSE RELATIVE DEPENDENCE CARE**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount= amount_house_care + sum_of_expenses + CE_dependence->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).dependent_relative_flat_rate&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount= amount_house_care + sum_of_expenses&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   endif &#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;endif&#x9;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CE, NOT SUBJECT TO WITHOLDING**/&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#x9;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_s9wn-E36EeSS5u8wdxTIGg" name="NEW_TaxDeduction-CE-DEPENDENCE-AND-CARE-CHILDREN-NOT-PART-OF-HOUSEHOLD" constrainedElement="_s9wny036EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9wn-U36EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>let set_of_CE: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::CE) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year),&#xA;&#x9; CE_child_not_part_of_household:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::CARE_FOR_CHILDREN_NOT_BEING_PART_OF_HOUSEHOLD),&#xA;&#x9; income_subject_to_witholding_tax : Set(Income_Concepts::Income) = self.incomes->select(income|income.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not income.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.start_date_within_taxation_year = self.incomeTax.tax_year),&#xA; &#x9; extraordinary_expenses : &#x9;Set(Expense_Concepts::Expense) = self.expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclIsTypeOf(Expense_Concepts::Extraordinary_Expense_CE)),&#x9;&#xA; &#x9; extraordinary_expense_care_for_children_not_part_of_the_household : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::CARE_FOR_CHILDREN_NOT_BEING_PART_OF_HOUSEHOLD),  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#xA;&#x9; declared_expense:Integer=extraordinary_expense_care_for_children_not_part_of_the_household.declared_amount->sum() in&#xA;&#x9; &#x9; &#xA;&#x9;if (income_subject_to_witholding_tax->size()>0) then&#xA;&#x9;&#x9;if (extraordinary_expenses->any(true).oclAsType(Expense_Concepts::Extraordinary_Expense_CE).is_above_thresholded_deduction_percentage_for_CE()=true) then&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;     if  CE_child_not_part_of_household->size()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; CE_child_not_part_of_household->size()= 1 and&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CARE FOR CHILDREN NOT BEING PART OF THE HOUSEHOLD**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;let&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expenses_for_child_not_part_of_houselod_care: Set(Expense_Concepts::Expense) = self.expenses->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::CHILD_CARE),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;sum_expenses_for_children:Integer = expenses_for_child_not_part_of_houselod_care->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.compute_if_dependent_receives_allowances_eligible_for_CE_dependance_and_care() =false and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;((expense.dependent.age&lt;=21) or&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(expense.dependent.age>21 and expense.dependent.continued_studies=true and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.tax_Payer.incomes.income_amount->sum()&lt;0.6*Constants::MINIMUM_SALARY.oclAsType(Integer)))).declared_amount->sum() in&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(sum_expenses_for_children>Constants::MAXIMUM_CE_RATE_FOR_CHILD_NOT_BEING_PART_OF_HOUSEHOLD.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;CE_child_not_part_of_household->any(true).deductible_amount  = Constants::MAXIMUM_CE_RATE_FOR_CHILD_NOT_BEING_PART_OF_HOUSEHOLD.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_child_not_part_of_household->any(true).deductible_amount = sum_expenses_for_children&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CE, NOT SUBJECT TO WITHOLDING**/&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#x9;</body>
          </specification>
        </ownedRule>
        <generalization xmi:id="_s9wn-k36EeSS5u8wdxTIGg" general="_s9wCW036EeSS5u8wdxTIGg"/>
        <ownedAttribute xmi:id="_s9wn-036EeSS5u8wdxTIGg" name="incomes" visibility="private" type="_s9woY036EeSS5u8wdxTIGg" association="_s9xPB036EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9wn_E36EeSS5u8wdxTIGg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9wn_U36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wn_k36EeSS5u8wdxTIGg" name="incomeTax" visibility="private" type="_s9wCB036EeSS5u8wdxTIGg" association="_s9woME36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9wn_036EeSS5u8wdxTIGg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9woAE36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9woAU36EeSS5u8wdxTIGg" name="income_Tax_Credit" visibility="private" type="_s9xPxU36EeSS5u8wdxTIGg" association="_s9xPD036EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9woAk36EeSS5u8wdxTIGg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9woA036EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9woBE36EeSS5u8wdxTIGg" name="tax_class" visibility="private" type="_s9woMU36EeSS5u8wdxTIGg" association="_s9wCBk36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9woBU36EeSS5u8wdxTIGg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9woBk36EeSS5u8wdxTIGg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9woB036EeSS5u8wdxTIGg" name="household" visibility="private" type="_s9wCQk36EeSS5u8wdxTIGg" association="_s9woK036EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9woCE36EeSS5u8wdxTIGg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9woCU36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9woCk36EeSS5u8wdxTIGg" name="dependents" visibility="private" type="_s9wCFk36EeSS5u8wdxTIGg" association="_s9woLU36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9woC036EeSS5u8wdxTIGg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9woDE36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9woDU36EeSS5u8wdxTIGg" name="income_Tax_Deduction" visibility="private" type="_s9x2L036EeSS5u8wdxTIGg" association="_s9xPM036EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9woDk36EeSS5u8wdxTIGg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9woD036EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9woEE36EeSS5u8wdxTIGg" name="taxed_jointly" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9woEU36EeSS5u8wdxTIGg" name="expenses" visibility="private" type="_s9xO7036EeSS5u8wdxTIGg" association="_s9xPNE36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9woEk36EeSS5u8wdxTIGg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9woE036EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9woFE36EeSS5u8wdxTIGg" name="dependent" visibility="private" type="_s9wCFk36EeSS5u8wdxTIGg" association="_s9woLE36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9woFU36EeSS5u8wdxTIGg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9woFk36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9woF036EeSS5u8wdxTIGg" name="tax_Card" visibility="private" type="_s9xPcU36EeSS5u8wdxTIGg" aggregation="shared" association="_s9woJk36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9woGE36EeSS5u8wdxTIGg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9woGU36EeSS5u8wdxTIGg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9woGk36EeSS5u8wdxTIGg" name="taxation_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_s97AHU36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_s9woG036EeSS5u8wdxTIGg" name="is_dependent_part_of_the_household" isQuery="true" bodyCondition="_s9woHU36EeSS5u8wdxTIGg">
          <eAnnotations xmi:id="_s9woHE36EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_s9woHU36EeSS5u8wdxTIGg" name="is_child_part_of_household" constrainedElement="_s9woG036EeSS5u8wdxTIGg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9woHk36EeSS5u8wdxTIGg">
              <language>OCL</language>
              <body>let responsible_person: Tax_Payer = IN_dependent.responsible_person,&#xA;     household_tax_payer_same_as_respnsible: Boolean = IN_dependent.household.tax_Payer.oclAsType(Physical_Person).SSNo = responsible_person.oclAsType(Physical_Person).SSNo&#xA;in&#xA;if (responsible_person->notEmpty() and household_tax_payer_same_as_respnsible) then&#xA;&#x9;/**THE CHILD IS PART OF THE TAX PAYERS HOUSEHOLD**/&#xA;&#x9;result = true&#xA;else &#xA;&#x9;/**THE CHILD IS NOT PART OF THE TAX PAYERS HOUSEHOLD**/&#xA;&#x9;result = false&#xA;endif&#xA;&#xA;&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_s9woH036EeSS5u8wdxTIGg" name="IN_dependent" type="_s9wCFk36EeSS5u8wdxTIGg"/>
          <ownedParameter xmi:id="_s9woIE36EeSS5u8wdxTIGg" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_s9woIU36EeSS5u8wdxTIGg" name="number_of_months_of_allowance" isQuery="true" postcondition="_s9woI036EeSS5u8wdxTIGg">
          <eAnnotations xmi:id="_s9woIk36EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_s9woI036EeSS5u8wdxTIGg" name="number_od_months_of_allowance" constrainedElement="_s9woIU36EeSS5u8wdxTIGg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9woJE36EeSS5u8wdxTIGg">
              <language>OCL</language>
              <body>result = 1&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_s9woJU36EeSS5u8wdxTIGg" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_s9woJk36EeSS5u8wdxTIGg" name="" memberEnd="_s9woF036EeSS5u8wdxTIGg _s9xPrE36EeSS5u8wdxTIGg"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_s9woJ036EeSS5u8wdxTIGg" name="located at" memberEnd="_s9wCYk36EeSS5u8wdxTIGg _s9wCDk36EeSS5u8wdxTIGg"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_s9woKE36EeSS5u8wdxTIGg" name="receives" memberEnd="_s9wCX036EeSS5u8wdxTIGg _s9wCOU36EeSS5u8wdxTIGg"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_s9woKU36EeSS5u8wdxTIGg" name="person B" memberEnd="_s9wCUk36EeSS5u8wdxTIGg _s9wnsU36EeSS5u8wdxTIGg"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_s9woKk36EeSS5u8wdxTIGg" name="person A" memberEnd="_s9wCT036EeSS5u8wdxTIGg _s9wCZU36EeSS5u8wdxTIGg"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_s9woK036EeSS5u8wdxTIGg" name="maintains" memberEnd="_s9woB036EeSS5u8wdxTIGg _s9wCQ036EeSS5u8wdxTIGg"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_s9woLE36EeSS5u8wdxTIGg" name="as tax payer" memberEnd="_s9wCJE36EeSS5u8wdxTIGg _s9woFE36EeSS5u8wdxTIGg"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_s9woLU36EeSS5u8wdxTIGg" name="supports" memberEnd="_s9woCk36EeSS5u8wdxTIGg _s9wCHE36EeSS5u8wdxTIGg"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_s9woLk36EeSS5u8wdxTIGg" name="is part of" memberEnd="_s9wCGU36EeSS5u8wdxTIGg _s9wCRk36EeSS5u8wdxTIGg"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_s9woL036EeSS5u8wdxTIGg" name="incurred over" memberEnd="_s9xO9k36EeSS5u8wdxTIGg _s9wCIU36EeSS5u8wdxTIGg"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_s9woME36EeSS5u8wdxTIGg" name="is subject to" memberEnd="_s9wn_k36EeSS5u8wdxTIGg _s9wCCE36EeSS5u8wdxTIGg"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9woMU36EeSS5u8wdxTIGg" name="Tax_Class">
        <ownedAttribute xmi:id="_s9woMk36EeSS5u8wdxTIGg" name="tax_class" visibility="public" type="_s9xPIk36EeSS5u8wdxTIGg"/>
        <ownedAttribute xmi:id="_s9woM036EeSS5u8wdxTIGg" name="tax_Payer" visibility="private" type="_s9wny036EeSS5u8wdxTIGg" association="_s9wCBk36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9woNE36EeSS5u8wdxTIGg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9woNU36EeSS5u8wdxTIGg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9woNk36EeSS5u8wdxTIGg" name="valid_from_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_s97AHU36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9woN036EeSS5u8wdxTIGg" name="valid_until_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_s97AHU36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9woOE36EeSS5u8wdxTIGg" name="tax_card" visibility="private" type="_s9xPcU36EeSS5u8wdxTIGg" association="_s9xPMk36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9woOU36EeSS5u8wdxTIGg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9woOk36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9woO036EeSS5u8wdxTIGg" name="current_tax_class" visibility="private" type="_s9woMU36EeSS5u8wdxTIGg" association="_s9woQU36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9woPE36EeSS5u8wdxTIGg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9woPU36EeSS5u8wdxTIGg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9woPk36EeSS5u8wdxTIGg" name="prev" visibility="private" type="_s9woMU36EeSS5u8wdxTIGg" association="_s9woQU36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9woP036EeSS5u8wdxTIGg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9woQE36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_s9woQU36EeSS5u8wdxTIGg" name="replaced by" memberEnd="_s9woO036EeSS5u8wdxTIGg _s9woPk36EeSS5u8wdxTIGg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_s9woQk36EeSS5u8wdxTIGg" name="Income_Concepts">
      <ownedComment xmi:id="_s9woQ036EeSS5u8wdxTIGg" annotatedElement="_s9woXU36EeSS5u8wdxTIGg">
        <body>&lt;p> Art.91, alinea 1, numero 2&lt;/p></body>
      </ownedComment>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9woRE36EeSS5u8wdxTIGg" name="Income_Type">
        <ownedAttribute xmi:id="_s9woRU36EeSS5u8wdxTIGg" name="subjectToWithholdingTax" visibility="private">
          <ownedComment xmi:id="_s9woRk36EeSS5u8wdxTIGg" annotatedElement="_s9woRU36EeSS5u8wdxTIGg">
            <body>&lt;p>The&amp;nbsp;following&amp;nbsp;types&amp;nbsp;of&amp;nbsp;income&amp;nbsp;are&amp;nbsp;subject&amp;nbsp;to&amp;nbsp;withholding&amp;nbsp;tax:&lt;/p>&lt;p>Employment&lt;/p>&lt;p>Pensions&amp;nbsp;and&amp;nbsp;Annuities&lt;/p>&lt;p>Investments&amp;nbsp;(not&amp;nbsp;all&amp;nbsp;types&amp;nbsp;might&amp;nbsp;be&amp;nbsp;subject&amp;nbsp;to&amp;nbsp;withholding.&amp;nbsp;The&amp;nbsp;types&amp;nbsp;subject&amp;nbsp;to&amp;nbsp;withholding&amp;nbsp;have&amp;nbsp;been&amp;nbsp;elaborated&amp;nbsp;on&amp;nbsp;page&amp;nbsp;15&amp;nbsp;of&amp;nbsp;the&amp;nbsp;memento)&lt;/p>&lt;p>&lt;/p></body>
          </ownedComment>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9woR036EeSS5u8wdxTIGg" name="income" visibility="private" type="_s9woY036EeSS5u8wdxTIGg" association="_s9woXk36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9woSE36EeSS5u8wdxTIGg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9woSU36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9woSk36EeSS5u8wdxTIGg" name="Trade_and_Business_Income">
        <generalization xmi:id="_s9woS036EeSS5u8wdxTIGg" general="_s9woRE36EeSS5u8wdxTIGg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9woTE36EeSS5u8wdxTIGg" name="Agriculture_and_Forestry_Income">
        <generalization xmi:id="_s9woTU36EeSS5u8wdxTIGg" general="_s9woRE36EeSS5u8wdxTIGg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9woTk36EeSS5u8wdxTIGg" name="Independent_Professional_Services_Income">
        <generalization xmi:id="_s9woT036EeSS5u8wdxTIGg" general="_s9woRE36EeSS5u8wdxTIGg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9woUE36EeSS5u8wdxTIGg" name="Pensions_and_Annuities_Income">
        <generalization xmi:id="_s9woUU36EeSS5u8wdxTIGg" general="_s9woRE36EeSS5u8wdxTIGg"/>
        <ownedAttribute xmi:id="_s9woUk36EeSS5u8wdxTIGg" name="occasional_payement" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_s9woU036EeSS5u8wdxTIGg">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9woVE36EeSS5u8wdxTIGg" name="Capital_and_Investments_Income">
        <generalization xmi:id="_s9woVU36EeSS5u8wdxTIGg" general="_s9woRE36EeSS5u8wdxTIGg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9woVk36EeSS5u8wdxTIGg" name="Employment_Income">
        <generalization xmi:id="_s9woV036EeSS5u8wdxTIGg" general="_s9woRE36EeSS5u8wdxTIGg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9woWE36EeSS5u8wdxTIGg" name="Rentals_and_Leases_Income">
        <generalization xmi:id="_s9woWU36EeSS5u8wdxTIGg" general="_s9woRE36EeSS5u8wdxTIGg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9woWk36EeSS5u8wdxTIGg" name="Sundry_Income">
        <generalization xmi:id="_s9woW036EeSS5u8wdxTIGg" general="_s9woRE36EeSS5u8wdxTIGg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9woXE36EeSS5u8wdxTIGg" name="Directors_Fee">
        <generalization xmi:id="_s9woXU36EeSS5u8wdxTIGg" general="_s9woTk36EeSS5u8wdxTIGg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_s9woXk36EeSS5u8wdxTIGg" name="has as type" memberEnd="_s9wock36EeSS5u8wdxTIGg _s9woR036EeSS5u8wdxTIGg"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9woX036EeSS5u8wdxTIGg" name="Foreign_Income">
        <generalization xmi:id="_s9woYE36EeSS5u8wdxTIGg" general="_s9woY036EeSS5u8wdxTIGg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9woYU36EeSS5u8wdxTIGg" name="Local_Income">
        <generalization xmi:id="_s9woYk36EeSS5u8wdxTIGg" general="_s9woY036EeSS5u8wdxTIGg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9woY036EeSS5u8wdxTIGg" name="Income">
        <ownedRule xmi:id="_s9woZE36EeSS5u8wdxTIGg" name="Tax_Deduction_FD-constraint" constrainedElement="_s9woY036EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9woZU36EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>(self .income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) or&#xA;self.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or&#xA;self.income_type.oclIsTypeOf(Income_Concepts::Rentals_and_Leases_Income)) = true&#xA;and&#xA;self.start_date_within_taxation_year = self.taxPayer.incomeTax.tax_year &#xA;and&#xA;let fd_expenses : Set(Expense_Concepts::Expense) = self.expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Travel_Expense_FD) and exp.year_expense_was_incurred_in = self.start_date_within_taxation_year) in&#xA;     fd_expenses->notEmpty()&#xA;     &#xA;implies&#xA;&#xA;&#x9; fd_expenses->forAll(a_FD|&#x9; &#xA;&#x9; if  (a_FD.deduction.oclAsType(Income_Tax_Deduction_Concepts::FD).calculated_distance>a_FD.deduction.oclAsType(Income_Tax_Deduction_Concepts::FD).distance_declared_in_january) then&#xA;&#x9;&#x9;if  (a_FD.deduction.oclAsType(Income_Tax_Deduction_Concepts::FD).calculated_distance>Constants::MINIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if (a_FD.deduction.oclAsType(Income_Tax_Deduction_Concepts::FD).calculated_distance>Constants::MAXIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/**MAXIMAL FLAT DISTANCE FOR TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;a_FD.deduction.deductible_amount = Constants::FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT.oclAsType(Integer) * Constants::MAXIMAL_FLAT_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/**REAL DISTANCE FOR TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;a_FD.deduction.deductible_amount = Constants::FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT.oclAsType(Integer) * a_FD.deduction.oclAsType(Income_Tax_Deduction_Concepts::FD).calculated_distance&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;/**MINIMAL FLAT DISTANCE FOR TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;a_FD.deduction.deductible_amount = Constants::FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT.oclAsType(Integer) * Constants::MINIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/*NO CHANGES FOR FD, TRAVEL EXPENSE IS ALREADY DEDUCED FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;endif&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;a_FD.deduction.yearly=  a_FD.deduction.deductible_amount and&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;a_FD.deduction.monthly = a_FD.deduction.deductible_amount/12 and&#xA;&#x9;&#x9;a_FD.deduction.daily = a_FD.deduction.monthly/25&#xA;)&#xA;&#x9; </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_s9woZk36EeSS5u8wdxTIGg" name="Tax_Deduction_FO-constraint" constrainedElement="_s9woY036EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9woZ036EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>(self.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) or&#xA;self.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or&#xA;self.income_type.oclIsTypeOf(Income_Concepts::Rentals_and_Leases_Income)) = true&#xA;and&#xA;self.start_date_within_taxation_year = self.taxPayer.incomeTax.tax_year&#xA;and&#xA;let fo_expenses : Set(Expense_Concepts::Expense) = self.expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Miscellaneous_Expense_FO) and exp.year_expense_was_incurred_in = self.start_date_within_taxation_year),&#xA;&#x9;declared_expense : Integer = fo_expenses.declared_amount->sum() in&#xA;&#x9;&#xA;     fo_expenses->notEmpty()&#xA;&#xA;implies&#xA;&#xA;&#x9;fo_expenses->forAll(fo|&#xA;&#x9;&#x9;&#x9;/*do we want to care about this, or up to the agent to decide*/&#xA;&#x9;&#x9;&#x9;let spouse_FO: Income_Tax_Deduction_Concepts::FO =  self.taxPayer.legal_union_A.individual_B.oclAsType(Tax_Payer_Concepts::Tax_Payer).income_Tax_Deduction->&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select(type|type.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO))->any(true).oclAsType(Income_Tax_Deduction_Concepts::FO),&#xA;&#x9;&#x9;&#x9;&#x9; spouse_declared_expense:Integer=self.taxPayer.legal_union_A.individual_B.oclAsType(Tax_Payer_Concepts::Tax_Payer).expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Miscellaneous_Expense_FO))->any(true).declared_amount in&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if(fo.deduction.oclAsType(Income_Tax_Deduction_Concepts::FO) .rate_type_for_FO = Type_of_Rate::REAL_COST) then &#xA;&#x9;&#x9;&#x9;&#x9;if(self.taxPayer.taxed_jointly) then &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(spouse_FO.rate_type_for_FO= Type_of_Rate::REAL_COST) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;fo.deduction.oclAsType(Income_Tax_Deduction_Concepts::FO) .rate_type_for_FO = Type_of_Rate::REGULAR&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if(declared_expense>Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE= Type_of_Rate::REAL_COST&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;&#x9;endif&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if (Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE = Type_of_Rate::REGULAR) then&#xA;&#x9;&#x9;&#x9;/*FLAT RATE FOR FO EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;fo.deduction.deductible_amount =Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)+Constants::DISABILITY_FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/**REAL COST FOR FO EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;fo.deduction.deductible_amount = declared_expense+Constants::DISABILITY_FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)&#xA;&#x9;&#x9;endif&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;fo.deduction.oclAsType(Income_Tax_Deduction_Concepts::FO) .yearly=  fo.deduction.deductible_amount and&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;fo.deduction.oclAsType(Income_Tax_Deduction_Concepts::FO) .monthly = fo.deduction.deductible_amount/12 and&#xA;&#x9;&#x9;fo.deduction.oclAsType(Income_Tax_Deduction_Concepts::FO) .daily = fo.deduction.monthly/25 &#x9;&#xA;&#x9;) &#xA;&#x9;</body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:id="_s9woaE36EeSS5u8wdxTIGg" name="taxPayer" visibility="private" type="_s9wny036EeSS5u8wdxTIGg" association="_s9xPB036EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9woaU36EeSS5u8wdxTIGg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9woak36EeSS5u8wdxTIGg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9woa036EeSS5u8wdxTIGg" name="income_amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wobE36EeSS5u8wdxTIGg" name="start_date_within_taxation_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_s97AHU36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wobU36EeSS5u8wdxTIGg" name="start_date_of_contract" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_s97AHU36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wobk36EeSS5u8wdxTIGg" name="end_date_within_taxation_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_s97AHU36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wob036EeSS5u8wdxTIGg" name="tax_card" visibility="private" type="_s9xPcU36EeSS5u8wdxTIGg" association="_s9xPLE36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9wocE36EeSS5u8wdxTIGg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9wocU36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wock36EeSS5u8wdxTIGg" name="income_type" visibility="private" type="_s9woRE36EeSS5u8wdxTIGg" association="_s9woXk36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9woc036EeSS5u8wdxTIGg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9wodE36EeSS5u8wdxTIGg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wodU36EeSS5u8wdxTIGg" name="expenses" visibility="private" type="_s9xO7036EeSS5u8wdxTIGg" association="_s9xO7k36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9wodk36EeSS5u8wdxTIGg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9wod036EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9woeE36EeSS5u8wdxTIGg" name="tax_liability" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9woeU36EeSS5u8wdxTIGg" name="distances" visibility="private" type="_s9wohU36EeSS5u8wdxTIGg" association="_s9wojE36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9woek36EeSS5u8wdxTIGg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9woe036EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_s9wofE36EeSS5u8wdxTIGg" name="compute_duration_of_contract" isQuery="true" postcondition="_s9wofk36EeSS5u8wdxTIGg">
          <eAnnotations xmi:id="_s9wofU36EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_s9wofk36EeSS5u8wdxTIGg" name="get_duration" constrainedElement="_s9wofE36EeSS5u8wdxTIGg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9wof036EeSS5u8wdxTIGg">
              <language>OCL</language>
              <body>result=1&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_s9wogE36EeSS5u8wdxTIGg" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_s9wogU36EeSS5u8wdxTIGg" name="compute_duration_of_contract_within_taxation_year" isQuery="true">
          <eAnnotations xmi:id="_s9wogk36EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_s9wog036EeSS5u8wdxTIGg" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_s9wohE36EeSS5u8wdxTIGg" name="IN_date">
            <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_s97AHU36EeSS5u8wdxTIGg"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9wohU36EeSS5u8wdxTIGg" name="Distance">
        <ownedAttribute xmi:type="uml:Port" xmi:id="_s9wohk36EeSS5u8wdxTIGg" name="value" aggregation="composite">
          <type xmi:type="uml:DataType" href="CTIE_Library.uml#_s905KE36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_s9woh036EeSS5u8wdxTIGg" name="month" aggregation="composite">
          <type xmi:type="uml:DataType" href="CTIE_Library.uml#_s90TKk36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Port" xmi:id="_s9woiE36EeSS5u8wdxTIGg" name="full_time_equivalent" aggregation="composite">
          <type xmi:type="uml:DataType" href="CTIE_Library.uml#_s90TKk36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9woiU36EeSS5u8wdxTIGg" name="income" visibility="private" type="_s9woY036EeSS5u8wdxTIGg" association="_s9wojE36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9woik36EeSS5u8wdxTIGg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9woi036EeSS5u8wdxTIGg" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_s9wojE36EeSS5u8wdxTIGg" name="has" memberEnd="_s9woiU36EeSS5u8wdxTIGg _s9woeU36EeSS5u8wdxTIGg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_s9wojU36EeSS5u8wdxTIGg" name="Expense_Concepts">
      <packagedElement xmi:type="uml:Class" xmi:id="_s9wojk36EeSS5u8wdxTIGg" name="Permanent_Expense">
        <generalization xmi:id="_s9woj036EeSS5u8wdxTIGg" general="_s9wom036EeSS5u8wdxTIGg"/>
        <ownedAttribute xmi:id="_s9wokE36EeSS5u8wdxTIGg" name="category" visibility="public" type="_s9xO4U36EeSS5u8wdxTIGg"/>
        <ownedAttribute xmi:id="_s9wokU36EeSS5u8wdxTIGg" name="is_eligible_for_deduction" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_s9wokk36EeSS5u8wdxTIGg">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedOperation xmi:id="_s9wok036EeSS5u8wdxTIGg" name="is_expense_eligible_for_deduction" isQuery="true" postcondition="_s9wolU36EeSS5u8wdxTIGg">
          <eAnnotations xmi:id="_s9wolE36EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_s9wolU36EeSS5u8wdxTIGg" name="is_eligible" constrainedElement="_s9wok036EeSS5u8wdxTIGg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9wolk36EeSS5u8wdxTIGg">
              <language>OCL</language>
              <body>self.is_eligible_for_deduction = IN_agent_response and&#xA;result = IN_agent_response&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_s9wol036EeSS5u8wdxTIGg" name="IN_agent_response">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_s9womE36EeSS5u8wdxTIGg" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9womU36EeSS5u8wdxTIGg" name="Interest_Expense">
        <generalization xmi:id="_s9womk36EeSS5u8wdxTIGg" general="_s9wom036EeSS5u8wdxTIGg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9wom036EeSS5u8wdxTIGg" name="Special_Expense_DS">
        <generalization xmi:id="_s9wonE36EeSS5u8wdxTIGg" general="_s9xO7036EeSS5u8wdxTIGg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9wonU36EeSS5u8wdxTIGg" name="Private_Insurance_and_Plan">
        <generalization xmi:id="_s9wonk36EeSS5u8wdxTIGg" general="_s9wom036EeSS5u8wdxTIGg"/>
        <ownedAttribute xmi:id="_s9won036EeSS5u8wdxTIGg" name="category" visibility="public" type="_s9xO5E36EeSS5u8wdxTIGg"/>
        <ownedAttribute xmi:id="_s9wooE36EeSS5u8wdxTIGg" name="duration_of_contract" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wooU36EeSS5u8wdxTIGg" name="is_private_insurance_and_plan_eligible_for_deduction" visibility="public" isDerived="true">
          <eAnnotations xmi:id="_s9wook36EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_s9woo036EeSS5u8wdxTIGg">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedOperation xmi:id="_s9wopE36EeSS5u8wdxTIGg" name="is_private_insurance_and_plan_eligible_for_deduction" isQuery="true" postcondition="_s9wopk36EeSS5u8wdxTIGg">
          <eAnnotations xmi:id="_s9wopU36EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_s9wopk36EeSS5u8wdxTIGg" name="is_private_insurance_and_plan_eligible_for_deduction" constrainedElement="_s9wopE36EeSS5u8wdxTIGg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9wop036EeSS5u8wdxTIGg">
              <language>OCL</language>
              <body>self.is_private_insurance_and_plan_eligible_for_deduction = IN_eligible_plan&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_s9woqE36EeSS5u8wdxTIGg" name="IN_eligible_plan">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9woqU36EeSS5u8wdxTIGg" name="Health_and_Pension_Insurance">
        <generalization xmi:id="_s9woqk36EeSS5u8wdxTIGg" general="_s9wom036EeSS5u8wdxTIGg"/>
        <ownedAttribute xmi:id="_s9woq036EeSS5u8wdxTIGg" name="category" visibility="public" type="_s9xO6k36EeSS5u8wdxTIGg"/>
        <ownedAttribute xmi:id="_s9worE36EeSS5u8wdxTIGg" name="is_related_to_additional_salary" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_s9worU36EeSS5u8wdxTIGg">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9work36EeSS5u8wdxTIGg" name="Donation">
        <generalization xmi:id="_s9wor036EeSS5u8wdxTIGg" general="_s9wom036EeSS5u8wdxTIGg"/>
        <ownedAttribute xmi:id="_s9wosE36EeSS5u8wdxTIGg" name="beneficiary" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wosU36EeSS5u8wdxTIGg" name="is_beneficiary_eligible" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_s9wosk36EeSS5u8wdxTIGg">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wos036EeSS5u8wdxTIGg" name="is_donation_reported" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_s9wotE36EeSS5u8wdxTIGg" name="get_beneficiary_eligibility_for_deduction" isQuery="true" postcondition="_s9wotk36EeSS5u8wdxTIGg">
          <eAnnotations xmi:id="_s9wotU36EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_s9wotk36EeSS5u8wdxTIGg" name="is_leagaly_approved_beneficiary" constrainedElement="_s9wotE36EeSS5u8wdxTIGg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9wot036EeSS5u8wdxTIGg">
              <language>OCL</language>
              <body>is_beneficiary_eligible = IN_eligibility&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_s9wouE36EeSS5u8wdxTIGg" name="IN_eligibility">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9wouU36EeSS5u8wdxTIGg" name="Loss_Carryforward">
        <ownedRule xmi:id="_s9wouk36EeSS5u8wdxTIGg" name="ExpensePossibleOnlyIfCertainIncomeType-constraint" constrainedElement="_s9wouU36EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9wou036EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>self.oclIsTypeOf(Loss_Carryforward) implies&#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Agriculture_and_Forestry_Income) or &#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Independent_Professional_Services_Income) or&#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Trade_and_Business_Income)&#xA;&#xA;</body>
          </specification>
        </ownedRule>
        <generalization xmi:id="_s9wovE36EeSS5u8wdxTIGg" general="_s9wom036EeSS5u8wdxTIGg"/>
        <ownedAttribute xmi:id="_s9wovU36EeSS5u8wdxTIGg" name="regular_accountability" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wovk36EeSS5u8wdxTIGg" name="compensation_by_other_means" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wov036EeSS5u8wdxTIGg" name="tax_payer_has_inherited_business_ownership" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_s9wowE36EeSS5u8wdxTIGg">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9wowU36EeSS5u8wdxTIGg" name="tax_payer_has_been_partner_in_business" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_s9wowk36EeSS5u8wdxTIGg" value="true">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedOperation xmi:id="_s9wow036EeSS5u8wdxTIGg" name="is_accountability_regular" isQuery="true" postcondition="_s9woxU36EeSS5u8wdxTIGg">
          <eAnnotations xmi:id="_s9woxE36EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_s9woxU36EeSS5u8wdxTIGg" name="is_accounatbility_regular" constrainedElement="_s9wow036EeSS5u8wdxTIGg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9woxk36EeSS5u8wdxTIGg">
              <language>OCL</language>
              <body>self.regular_accountability = IN_regularity</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_s9wox036EeSS5u8wdxTIGg" name="IN_regularity">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_s9woyE36EeSS5u8wdxTIGg" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_s9woyU36EeSS5u8wdxTIGg" name="is_compensated_by_other_means" isQuery="true" postcondition="_s9xOwE36EeSS5u8wdxTIGg">
          <eAnnotations xmi:id="_s9woyk36EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_s9xOwE36EeSS5u8wdxTIGg" name="is_compensated_by_other_means" constrainedElement="_s9woyU36EeSS5u8wdxTIGg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9xOwU36EeSS5u8wdxTIGg">
              <language>OCL</language>
              <body>self.compensation_by_other_means = IN_compensated</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_s9xOwk36EeSS5u8wdxTIGg" name="IN_compensated">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_s9xOw036EeSS5u8wdxTIGg" name="has_been_tax_payer_partner_in_business" isQuery="true" postcondition="_s9xOxU36EeSS5u8wdxTIGg">
          <eAnnotations xmi:id="_s9xOxE36EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_s9xOxU36EeSS5u8wdxTIGg" name="partner_in_business" constrainedElement="_s9xOw036EeSS5u8wdxTIGg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9xOxk36EeSS5u8wdxTIGg">
              <language>OCL</language>
              <body>self.tax_payer_has_been_partner_in_business = IN_has_been_partner_in_business&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_s9xOx036EeSS5u8wdxTIGg" name="IN_has_been_partner_in_business">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_s9xOyE36EeSS5u8wdxTIGg" name="has_tax_payer_inherited_business_ownership" isQuery="true" postcondition="_s9xOyk36EeSS5u8wdxTIGg">
          <eAnnotations xmi:id="_s9xOyU36EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_s9xOyk36EeSS5u8wdxTIGg" name="inherited_business_ownership" constrainedElement="_s9xOyE36EeSS5u8wdxTIGg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9xOy036EeSS5u8wdxTIGg">
              <language>OCL</language>
              <body>self.tax_payer_has_inherited_business_ownership = IN_inherited_business_ownership</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_s9xOzE36EeSS5u8wdxTIGg" name="IN_inherited_business_ownership">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9xOzU36EeSS5u8wdxTIGg" name="Spousal_Expense_AC">
        <generalization xmi:id="_s9xOzk36EeSS5u8wdxTIGg" general="_s9xO7036EeSS5u8wdxTIGg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9xOz036EeSS5u8wdxTIGg" name="Extraordinary_Expense_CE">
        <generalization xmi:id="_s9xO0E36EeSS5u8wdxTIGg" general="_s9xO7036EeSS5u8wdxTIGg"/>
        <ownedAttribute xmi:id="_s9xO0U36EeSS5u8wdxTIGg" name="thresholded_deduction_percentage" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xO0k36EeSS5u8wdxTIGg" name="ce_type" visibility="public" type="_s9xPOE36EeSS5u8wdxTIGg"/>
        <ownedOperation xmi:id="_s9xO0036EeSS5u8wdxTIGg" name="is_above_thresholded_deduction_percentage_for_CE" isQuery="true">
          <eAnnotations xmi:id="_s9xO1E36EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_s9xO1U36EeSS5u8wdxTIGg" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_s9xO1k36EeSS5u8wdxTIGg" name="compute_thresholded_deduction_percentage_for_CE" isQuery="true" postcondition="_s9xO2E36EeSS5u8wdxTIGg">
          <eAnnotations xmi:id="_s9xO1036EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_s9xO2E36EeSS5u8wdxTIGg" name="thresholded_deduction_percentage" constrainedElement="_s9xO1k36EeSS5u8wdxTIGg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9xO2U36EeSS5u8wdxTIGg">
              <language>OCL</language>
              <body>self.thresholded_deduction_percentage = IN_thresholded_deduction_percentage&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_s9xO2k36EeSS5u8wdxTIGg" name="IN_thresholded_deduction_percentage">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9xO2036EeSS5u8wdxTIGg" name="Travel_Expense_FD">
        <generalization xmi:id="_s9xO3E36EeSS5u8wdxTIGg" general="_s9xO3036EeSS5u8wdxTIGg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9xO3U36EeSS5u8wdxTIGg" name="Miscellaneous_Expense_FO">
        <generalization xmi:id="_s9xO3k36EeSS5u8wdxTIGg" general="_s9xO3036EeSS5u8wdxTIGg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9xO3036EeSS5u8wdxTIGg" name="Professional_Expense">
        <generalization xmi:id="_s9xO4E36EeSS5u8wdxTIGg" general="_s9xO7036EeSS5u8wdxTIGg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="_s9xO4U36EeSS5u8wdxTIGg" name="Category_of_Permanent_Expense">
        <ownedLiteral xmi:id="_s9xO4k36EeSS5u8wdxTIGg" name="MISCELLANEOUS_DEBT" classifier="_s9xO4U36EeSS5u8wdxTIGg"/>
        <ownedLiteral xmi:id="_s9xO4036EeSS5u8wdxTIGg" name="ALIMONY" classifier="_s9xO4U36EeSS5u8wdxTIGg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="_s9xO5E36EeSS5u8wdxTIGg" name="Category_of_Private_Insurance_and_Plan">
        <ownedLiteral xmi:id="_s9xO5U36EeSS5u8wdxTIGg" name="PRIVATE_INSURANCE" classifier="_s9xO5E36EeSS5u8wdxTIGg"/>
        <ownedLiteral xmi:id="_s9xO5k36EeSS5u8wdxTIGg" name="PRIVATE_LIFE_INSURANCE" classifier="_s9xO6k36EeSS5u8wdxTIGg"/>
        <ownedLiteral xmi:id="_s9xO5036EeSS5u8wdxTIGg" name="COMPANY_MEMBERS_PRIVATE_INSURANCE" classifier="_s9xO5E36EeSS5u8wdxTIGg"/>
        <ownedLiteral xmi:id="_s9xO6E36EeSS5u8wdxTIGg" name="HOUSING_SAVING_PLAN" classifier="_s9xO6k36EeSS5u8wdxTIGg"/>
        <ownedLiteral xmi:id="_s9xO6U36EeSS5u8wdxTIGg" name="OLD_AGE_PENSION_PLAN" classifier="_s9xO6k36EeSS5u8wdxTIGg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="_s9xO6k36EeSS5u8wdxTIGg" name="Category_of_Health_and_Pension_Insurances">
        <ownedLiteral xmi:id="_s9xO6036EeSS5u8wdxTIGg" name="MANDATORY_HEALTH_AND_PENSION_INSURANCE" classifier="_s9xO6k36EeSS5u8wdxTIGg"/>
        <ownedLiteral xmi:id="_s9xO7E36EeSS5u8wdxTIGg" name="ADDITIONAL_EMPLOYERS_PENSION_INSURANCE" classifier="_s9xO6k36EeSS5u8wdxTIGg"/>
        <ownedLiteral xmi:id="_s9xO7U36EeSS5u8wdxTIGg" name="CONTINUED_HEALTH_AND_PENSION_INSURANCE" classifier="_s9xO6k36EeSS5u8wdxTIGg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_s9xO7k36EeSS5u8wdxTIGg" name="influences" memberEnd="_s9xO-k36EeSS5u8wdxTIGg _s9wodU36EeSS5u8wdxTIGg"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9xO7036EeSS5u8wdxTIGg" name="Expense">
        <ownedAttribute xmi:id="_s9xO8E36EeSS5u8wdxTIGg" name="tax_Payer" visibility="private" type="_s9wny036EeSS5u8wdxTIGg" association="_s9xPNE36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9xO8U36EeSS5u8wdxTIGg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9xO8k36EeSS5u8wdxTIGg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xO8036EeSS5u8wdxTIGg" name="declared_amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xO9E36EeSS5u8wdxTIGg" name="expense_purpose" visibility="public" type="_s9xPPE36EeSS5u8wdxTIGg">
          <defaultValue xmi:type="uml:InstanceValue" xmi:id="_s9xO9U36EeSS5u8wdxTIGg" name="OTHER" type="_s9xPPE36EeSS5u8wdxTIGg" instance="_s9xPQE36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xO9k36EeSS5u8wdxTIGg" name="dependent" visibility="private" type="_s9wCFk36EeSS5u8wdxTIGg" association="_s9woL036EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9xO9036EeSS5u8wdxTIGg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9xO-E36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xO-U36EeSS5u8wdxTIGg" name="year_expense_was_incurred_in" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xO-k36EeSS5u8wdxTIGg" name="income" visibility="private" type="_s9woY036EeSS5u8wdxTIGg" association="_s9xO7k36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9xO-036EeSS5u8wdxTIGg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9xO_E36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xO_U36EeSS5u8wdxTIGg" name="deduction" visibility="private" type="_s9x2L036EeSS5u8wdxTIGg" association="_s9x2Pk36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9xO_k36EeSS5u8wdxTIGg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9xO_036EeSS5u8wdxTIGg"/>
        </ownedAttribute>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_s9xPAE36EeSS5u8wdxTIGg" name="Grantor">
      <ownedLiteral xmi:id="_s9xPAU36EeSS5u8wdxTIGg" name="ACD" classifier="_s9xPAE36EeSS5u8wdxTIGg"/>
      <ownedLiteral xmi:id="_s9xPAk36EeSS5u8wdxTIGg" name="Employer" classifier="_s9xPAE36EeSS5u8wdxTIGg"/>
      <ownedLiteral xmi:id="_s9xPA036EeSS5u8wdxTIGg" name="CNPF" classifier="_s9xPAE36EeSS5u8wdxTIGg"/>
      <ownedLiteral xmi:id="_s9xPBE36EeSS5u8wdxTIGg" name="CEDIES" classifier="_s9xPAE36EeSS5u8wdxTIGg"/>
      <ownedLiteral xmi:id="_s9xPBU36EeSS5u8wdxTIGg" name="SNJ" classifier="_s9xPAE36EeSS5u8wdxTIGg"/>
      <ownedLiteral xmi:id="_s9xPBk36EeSS5u8wdxTIGg" name="CNAP" classifier="_s9xPAE36EeSS5u8wdxTIGg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_s9xPB036EeSS5u8wdxTIGg" name="earns" memberEnd="_s9wn-036EeSS5u8wdxTIGg _s9woaE36EeSS5u8wdxTIGg"/>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_s9xPCE36EeSS5u8wdxTIGg" name="Country">
      <ownedLiteral xmi:id="_s9xPCU36EeSS5u8wdxTIGg" name="LU" classifier="_s9xPCE36EeSS5u8wdxTIGg"/>
      <ownedLiteral xmi:id="_s9xPCk36EeSS5u8wdxTIGg" name="FR" classifier="_s9xPCE36EeSS5u8wdxTIGg"/>
      <ownedLiteral xmi:id="_s9xPC036EeSS5u8wdxTIGg" name="BE" classifier="_s9xPCE36EeSS5u8wdxTIGg"/>
      <ownedLiteral xmi:id="_s9xPDE36EeSS5u8wdxTIGg" name="DE" classifier="_s9xPCE36EeSS5u8wdxTIGg"/>
      <ownedLiteral xmi:id="_s9xPDU36EeSS5u8wdxTIGg" name="NL" classifier="_s9xPCE36EeSS5u8wdxTIGg"/>
      <ownedLiteral xmi:id="_s9xPDk36EeSS5u8wdxTIGg" name="OTHER" classifier="_s9xPCE36EeSS5u8wdxTIGg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_s9xPD036EeSS5u8wdxTIGg" name="credited for" memberEnd="_s9woAU36EeSS5u8wdxTIGg _s9xPx036EeSS5u8wdxTIGg"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_s9xPEE36EeSS5u8wdxTIGg" name="Date">
      <ownedAttribute xmi:id="_s9xPEU36EeSS5u8wdxTIGg" name="day" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9xPEk36EeSS5u8wdxTIGg" value="*"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9xPE036EeSS5u8wdxTIGg" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_s9xPFE36EeSS5u8wdxTIGg" name="month" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_s9xPFU36EeSS5u8wdxTIGg" name="year" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_s9xPFk36EeSS5u8wdxTIGg" name="Job_Activity">
      <ownedLiteral xmi:id="_s9xPF036EeSS5u8wdxTIGg" name="Salary" classifier="_s9xPFk36EeSS5u8wdxTIGg"/>
      <ownedLiteral xmi:id="_s9xPGE36EeSS5u8wdxTIGg" name="Pension" classifier="_s9xPFk36EeSS5u8wdxTIGg"/>
      <ownedLiteral xmi:id="_s9xPGU36EeSS5u8wdxTIGg" name="Annuity" classifier="_s9xPFk36EeSS5u8wdxTIGg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_s9xPGk36EeSS5u8wdxTIGg" name="Tax_Card_Type">
      <ownedLiteral xmi:id="_s9xPG036EeSS5u8wdxTIGg" name="Principal" classifier="_s9xPGk36EeSS5u8wdxTIGg"/>
      <ownedLiteral xmi:id="_s9xPHE36EeSS5u8wdxTIGg" name="Additional" classifier="_s9xPGk36EeSS5u8wdxTIGg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_s9xPHU36EeSS5u8wdxTIGg" name="Tax_Office">
      <ownedLiteral xmi:id="_s9xPHk36EeSS5u8wdxTIGg" name="RTS_2" classifier="_s9xPHU36EeSS5u8wdxTIGg"/>
      <ownedLiteral xmi:id="_s9xPH036EeSS5u8wdxTIGg" name="RTS_3" classifier="_s9xPHU36EeSS5u8wdxTIGg"/>
      <ownedLiteral xmi:id="_s9xPIE36EeSS5u8wdxTIGg" name="RTS_Esch" classifier="_s9xPHU36EeSS5u8wdxTIGg"/>
      <ownedLiteral xmi:id="_s9xPIU36EeSS5u8wdxTIGg" name="RTS_Ettelbruck" classifier="_s9xPHU36EeSS5u8wdxTIGg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_s9xPIk36EeSS5u8wdxTIGg" name="Tax_Class_Category">
      <ownedLiteral xmi:id="_s9xPI036EeSS5u8wdxTIGg" name="One" classifier="_s9xPIk36EeSS5u8wdxTIGg"/>
      <ownedLiteral xmi:id="_s9xPJE36EeSS5u8wdxTIGg" name="One_A" classifier="_s9xPIk36EeSS5u8wdxTIGg"/>
      <ownedLiteral xmi:id="_s9xPJU36EeSS5u8wdxTIGg" name="Two" classifier="_s9xPIk36EeSS5u8wdxTIGg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_s9xPJk36EeSS5u8wdxTIGg" name="Town">
      <ownedLiteral xmi:id="_s9xPJ036EeSS5u8wdxTIGg" name="Luxembourg_city" classifier="_s9xPJk36EeSS5u8wdxTIGg"/>
      <ownedLiteral xmi:id="_s9xPKE36EeSS5u8wdxTIGg" name="Bertrange" classifier="_s9xPJk36EeSS5u8wdxTIGg"/>
      <ownedLiteral xmi:id="_s9xPKU36EeSS5u8wdxTIGg" name="Strassen" classifier="_s9xPJk36EeSS5u8wdxTIGg"/>
      <ownedLiteral xmi:id="_s9xPKk36EeSS5u8wdxTIGg" name="Bettembourg" classifier="_s9xPJk36EeSS5u8wdxTIGg"/>
      <ownedLiteral xmi:id="_s9xPK036EeSS5u8wdxTIGg" name="Beaufort" classifier="_s9xPJk36EeSS5u8wdxTIGg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_s9xPLE36EeSS5u8wdxTIGg" name="linked to" memberEnd="_s9wob036EeSS5u8wdxTIGg _s9xPhk36EeSS5u8wdxTIGg"/>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_s9xPLU36EeSS5u8wdxTIGg" name="Dependent_Type">
      <ownedLiteral xmi:id="_s9xPLk36EeSS5u8wdxTIGg" name="CHILD" classifier="_s9xPLU36EeSS5u8wdxTIGg"/>
      <ownedLiteral xmi:id="_s9xPL036EeSS5u8wdxTIGg" name="SPOUSE" classifier="_s9xPLU36EeSS5u8wdxTIGg"/>
      <ownedLiteral xmi:id="_s9xPME36EeSS5u8wdxTIGg" name="RELATIVE" classifier="_s9xPLU36EeSS5u8wdxTIGg"/>
      <ownedLiteral xmi:id="_s9xPMU36EeSS5u8wdxTIGg" name="OTHER_FAMILY_MEMBER" classifier="_s9xPLU36EeSS5u8wdxTIGg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_s9xPMk36EeSS5u8wdxTIGg" name="provides" memberEnd="_s9xPiU36EeSS5u8wdxTIGg _s9woOE36EeSS5u8wdxTIGg"/>
    <packagedElement xmi:type="uml:Association" xmi:id="_s9xPM036EeSS5u8wdxTIGg" name="receives" memberEnd="_s9woDU36EeSS5u8wdxTIGg _s9x2NE36EeSS5u8wdxTIGg"/>
    <packagedElement xmi:type="uml:Association" xmi:id="_s9xPNE36EeSS5u8wdxTIGg" name="declares" memberEnd="_s9woEU36EeSS5u8wdxTIGg _s9xO8E36EeSS5u8wdxTIGg"/>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_s9xPNU36EeSS5u8wdxTIGg" name="Type_of_Rate">
      <ownedLiteral xmi:id="_s9xPNk36EeSS5u8wdxTIGg" name="REGULAR" classifier="_s9xPNU36EeSS5u8wdxTIGg"/>
      <ownedLiteral xmi:id="_s9xPN036EeSS5u8wdxTIGg" name="REAL_COST" classifier="_s9xPNU36EeSS5u8wdxTIGg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_s9xPOE36EeSS5u8wdxTIGg" name="CE_Type">
      <ownedLiteral xmi:id="_s9xPOU36EeSS5u8wdxTIGg" name="INALIDITY_AND_INFIRMITY" classifier="_s9xPOE36EeSS5u8wdxTIGg"/>
      <ownedLiteral xmi:id="_s9xPOk36EeSS5u8wdxTIGg" name="DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD" classifier="_s9xPOE36EeSS5u8wdxTIGg"/>
      <ownedLiteral xmi:id="_s9xPO036EeSS5u8wdxTIGg" name="CARE_FOR_CHILDREN_NOT_BEING_PART_OF_HOUSEHOLD" classifier="_s9xPOE36EeSS5u8wdxTIGg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_s9xPPE36EeSS5u8wdxTIGg" name="Expense_Purpose">
      <ownedLiteral xmi:id="_s9xPPU36EeSS5u8wdxTIGg" name="HOUSE_CARE" classifier="_s9xPPE36EeSS5u8wdxTIGg"/>
      <ownedLiteral xmi:id="_s9xPPk36EeSS5u8wdxTIGg" name="CHILD_CARE" classifier="_s9xPPE36EeSS5u8wdxTIGg"/>
      <ownedLiteral xmi:id="_s9xPP036EeSS5u8wdxTIGg" name="DEPENDENCE_CARE" classifier="_s9xPPE36EeSS5u8wdxTIGg"/>
      <ownedLiteral xmi:id="_s9xPQE36EeSS5u8wdxTIGg" name="OTHER" classifier="_s9xPPE36EeSS5u8wdxTIGg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_s9xPQU36EeSS5u8wdxTIGg" name="Constants">
      <ownedLiteral xmi:id="_s9xPQk36EeSS5u8wdxTIGg" name="MAXIMUM_CE_RATE_FOR_CHILD_NOT_BEING_PART_OF_HOUSEHOLD" classifier="_s9xPQU36EeSS5u8wdxTIGg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_s9xPQ036EeSS5u8wdxTIGg" value="3480"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_s9xPRE36EeSS5u8wdxTIGg" name="MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE" classifier="_s9xPQU36EeSS5u8wdxTIGg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_s9xPRU36EeSS5u8wdxTIGg" value="3600"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_s9xPRk36EeSS5u8wdxTIGg" name="MINIMUM_SALARY" classifier="_s9xPQU36EeSS5u8wdxTIGg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_s9xPR036EeSS5u8wdxTIGg" value="1500"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_s9xPSE36EeSS5u8wdxTIGg" name="FLAT_RATE_FOR_EXTRA_PROFESSIONAL_DEDUCTION" classifier="_s9xPQU36EeSS5u8wdxTIGg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_s9xPSU36EeSS5u8wdxTIGg" value="4500"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_s9xPSk36EeSS5u8wdxTIGg" name="MAXIMUM_DEDUCTIBLE_PERCENTAGE_FOR_DONATIONS" classifier="_s9xPQU36EeSS5u8wdxTIGg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_s9xPS036EeSS5u8wdxTIGg" value="20"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_s9xPTE36EeSS5u8wdxTIGg" name="MINIMUM_DEDUCTIBLE_AMOUNT_FOR_DONATIONS" classifier="_s9xPQU36EeSS5u8wdxTIGg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_s9xPTU36EeSS5u8wdxTIGg" value="120"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_s9xPTk36EeSS5u8wdxTIGg" name="MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ADDITIONAL_PENSION_AND_INSURANCE" classifier="_s9xPQU36EeSS5u8wdxTIGg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_s9xPT036EeSS5u8wdxTIGg"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_s9xPUE36EeSS5u8wdxTIGg" name="MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ALIMONY_EXPENSE" classifier="_s9xPQU36EeSS5u8wdxTIGg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_s9xPUU36EeSS5u8wdxTIGg" value="24000"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_s9xPUk36EeSS5u8wdxTIGg" name="FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT" classifier="_s9xPQU36EeSS5u8wdxTIGg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_s9xPU036EeSS5u8wdxTIGg" value="99"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_s9xPVE36EeSS5u8wdxTIGg" name="MAXIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION" classifier="_s9xPQU36EeSS5u8wdxTIGg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_s9xPVU36EeSS5u8wdxTIGg" value="26"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_s9xPVk36EeSS5u8wdxTIGg" name="MAXIMAL_FLAT_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION" classifier="_s9xPQU36EeSS5u8wdxTIGg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_s9xPV036EeSS5u8wdxTIGg" value="30"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_s9xPWE36EeSS5u8wdxTIGg" name="MINIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION" classifier="_s9xPQU36EeSS5u8wdxTIGg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_s9xPWU36EeSS5u8wdxTIGg" value="4"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_s9xPWk36EeSS5u8wdxTIGg" name="FLAT_RATE_CIM_DAILY" classifier="_s9xPQU36EeSS5u8wdxTIGg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_s9xPW036EeSS5u8wdxTIGg" value="2"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_s9xPXE36EeSS5u8wdxTIGg" name="FLAT_RATE_CIM_MONTHLY" classifier="_s9xPQU36EeSS5u8wdxTIGg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_s9xPXU36EeSS5u8wdxTIGg" value="62"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_s9xPXk36EeSS5u8wdxTIGg" name="FLAT_RATE_CIM_YEARLY" classifier="_s9xPQU36EeSS5u8wdxTIGg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_s9xPX036EeSS5u8wdxTIGg" value="750"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_s9xPYE36EeSS5u8wdxTIGg" name="FLAT_RATE_CIP_DAILY" classifier="_s9xPQU36EeSS5u8wdxTIGg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_s9xPYU36EeSS5u8wdxTIGg" value="1"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_s9xPYk36EeSS5u8wdxTIGg" name="FLAT_RATE_CIP_MONTHLY" classifier="_s9xPQU36EeSS5u8wdxTIGg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_s9xPY036EeSS5u8wdxTIGg" value="25"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_s9xPZE36EeSS5u8wdxTIGg" name="FLAT_RATE_CIP_YEARLY" classifier="_s9xPQU36EeSS5u8wdxTIGg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_s9xPZU36EeSS5u8wdxTIGg" value="300"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_s9xPZk36EeSS5u8wdxTIGg" name="FLAT_RATE_CIS_DAILY" classifier="_s9xPQU36EeSS5u8wdxTIGg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_s9xPZ036EeSS5u8wdxTIGg" value="1"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_s9xPaE36EeSS5u8wdxTIGg" name="FLAT_RATE_CIS_MONTHLY" classifier="_s9xPQU36EeSS5u8wdxTIGg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_s9xPaU36EeSS5u8wdxTIGg" value="25"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_s9xPak36EeSS5u8wdxTIGg" name="FLAT_RATE_CIS_YEARLY" classifier="_s9xPQU36EeSS5u8wdxTIGg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_s9xPa036EeSS5u8wdxTIGg" value="300"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_s9xPbE36EeSS5u8wdxTIGg" name="MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_DS" classifier="_s9xPQU36EeSS5u8wdxTIGg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_s9xPbU36EeSS5u8wdxTIGg" value="480"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_s9xPbk36EeSS5u8wdxTIGg" name="FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE" classifier="_s9xPQU36EeSS5u8wdxTIGg"/>
      <ownedLiteral xmi:id="_s9xPb036EeSS5u8wdxTIGg" name="DISABILITY_FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE" classifier="_s9xPQU36EeSS5u8wdxTIGg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_s9xPcE36EeSS5u8wdxTIGg" name="Tax_Card_Concepts">
      <packagedElement xmi:type="uml:Class" xmi:id="_s9xPcU36EeSS5u8wdxTIGg" name="Tax_Card">
        <ownedRule xmi:id="_s9xPck36EeSS5u8wdxTIGg" name="SubjectToWithholdingTax-constraint" constrainedElement="_s9xPcU36EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9xPc036EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>not self.oclIsUndefined() &#xA;implies&#xA;(self.income.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or &#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) or&#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Capital_and_Investments_Income) or&#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Directors_Fee)&#xA;)&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_s9xPdE36EeSS5u8wdxTIGg" name="Tax_Credits-constraint" constrainedElement="_s9xPcU36EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9xPdU36EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>self.tax_card_type = Tax_Card_Type::Principal &#xA;&#xA;implies&#xA;&#xA;let cim : Income_Tax_Credit_Concepts::CIM = self.income_Tax_Credit->select(c|c.oclIsTypeOf(Income_Tax_Credit_Concepts::CIM) and c.tax_year = self.valid_from_date)->any(true).oclAsType(Income_Tax_Credit_Concepts::CIM),&#xA;&#x9;cis : Income_Tax_Credit_Concepts::CIS = self.income_Tax_Credit->select(cis|cis.oclIsTypeOf(Income_Tax_Credit_Concepts::CIS) and cis.tax_year = self.valid_from_date)->any(true).oclAsType(Income_Tax_Credit_Concepts::CIS),&#xA;&#x9;cip : Income_Tax_Credit_Concepts::CIP = self.income_Tax_Credit->select(cip|cip.oclIsTypeOf(Income_Tax_Credit_Concepts::CIP) and cip.tax_year = self.valid_from_date)->any(true).oclAsType(Income_Tax_Credit_Concepts::CIP) in&#xA;&#x9;&#xA;(not cis.oclIsUndefined()) xor (not cip.oclIsUndefined()) = true&#xA;and&#xA;if not cim.oclIsUndefined() then &#xA;&#x9;self.credit_CIM_daily = cim.daily and&#xA;&#x9;self.credit_CIM_monthly = cim.monthly &#xA;else&#xA;&#x9;true&#xA;endif&#xA;and&#xA;if not cis.oclIsUndefined()then&#xA;&#x9;self.credit_CIS_daily = cis.daily and&#xA;&#x9;self.credit_CIS_monthly = cis.monthly &#xA;else&#xA;&#x9;true&#xA;endif&#xA;and&#xA;if not cip.oclIsUndefined()then&#xA;&#x9;self.credit_CIP_monthly = cip.monthly &#xA;else&#xA;&#x9;true&#xA;endif</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_s9xPdk36EeSS5u8wdxTIGg" name="Tax_Card_AC-constraint" constrainedElement="_s9xPcU36EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9xPd036EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>let set_ac : Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(deduction|deduction.oclIsTypeOf(Income_Tax_Deduction_Concepts::AC) and deduction.tax_year = self.valid_from_date),&#xA;&#x9;ac : Income_Tax_Deduction_Concepts::AC = set_ac->any(true).oclAsType(Income_Tax_Deduction_Concepts::AC),&#xA;&#x9;set_fo : Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(deduction|deduction.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO) and deduction.tax_year = self.valid_from_date),&#xA;&#x9;set_ds : Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(deduction|deduction.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS) and deduction.tax_year = self.valid_from_date) in&#xA;&#x9;&#xA;set_ac->size() = 1 &#xA;implies&#xA;&#xA;self.tax_card_type=Tax_Card_Type::Additional and&#xA;self.tax_Payer.taxed_jointly and&#xA;self.deduction_AC_yearly = ac.deductible_amount and&#xA;self.deduction_AC_monthly = ac.deductible_amount/12 and&#xA;self.deduction_AC_daily = self.deduction_AC_monthly/25 /**25 working days per month**/ and&#xA;&#xA;if(set_ds->size()>0) then&#xA;&#x9;set_ds->size() =1 and&#xA;&#x9;self.deduction_DS_yearly->notEmpty() and&#xA;&#x9;self.deduction_DS_yearly = set_ds.deductible_amount ->sum()&#xA;else&#xA;&#x9;true&#xA;endif&#xA;&#xA;and&#xA;&#xA;if(set_fo->size()>0) then&#xA;&#x9;set_fo->size() = 1 and&#xA;&#x9;self.deduction_FO_yearly->notEmpty() and&#xA;&#x9;self.deduction_FO_yearly = set_fo.deductible_amount ->sum()&#xA;else&#xA;&#x9;true&#xA;endif&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_s9xPeE36EeSS5u8wdxTIGg" name="Tax_Card_FD-constraint" constrainedElement="_s9xPcU36EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9xPeU36EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>not self.oclIsUndefined()&#xA;implies&#xA;self.income.taxPayer.income_Tax_Deduction->select(d|d.oclIsTypeOf(Income_Tax_Deduction_Concepts::FD) and d.tax_year = self.valid_from_date)->size() = 1&#xA;&#xA;and &#xA;let fd : Income_Tax_Deduction_Concepts::FD = self.income_Tax_Deduction->select(d|d.oclIsTypeOf(Income_Tax_Deduction_Concepts::FD) and d.tax_year = self.valid_from_date)->any(true).oclAsType(Income_Tax_Deduction_Concepts::FD) in&#xA;self.deduction_FD_daily = fd.daily and&#xA;self.deduction_FD_monthly = fd.monthly and&#xA;self.deduction_FD_yearly = fd.yearly&#xA;&#xA;&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_s9xPek36EeSS5u8wdxTIGg" name="Tax_Card_DS-constraint" constrainedElement="_s9xPcU36EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9xPe036EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>let set_ds : Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(d|d.oclIsTypeOf( Income_Tax_Deduction_Concepts::DS) and d.tax_year = self.valid_from_date),&#xA;&#x9;total_ds : Integer = set_ds.deductible_amount->sum()  in&#xA;set_ds->size()>0 and&#xA;self.tax_card_type = Tax_Card_Type::Principal&#xA;&#xA;implies&#xA;&#xA;if total_ds > Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_DS.oclAsType(Integer) then&#xA; &#x9;/**THE DIFFERENCE BETWEEN THE MINIMUM AND THE TOTAL DS AMOUNT IS WRITTEN ON THE TAX CARD**/&#xA; &#x9;self.deduction_DS_monthly = (total_ds - Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_DS.oclAsType(Integer))/self.income^^compute_duration_of_contract_within_taxation_year(self.valid_from_date)->first().result&#xA; else&#xA; &#x9;/**NO NEED TO PUT DETAILS ON THE TAX CARD**/&#xA; &#x9;false&#xA; endif</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_s9xPfE36EeSS5u8wdxTIGg" name="Tax_Card_CE-constraint" constrainedElement="_s9xPcU36EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9xPfU36EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>let set_ce : Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(deduction|deduction.oclIsTypeOf(Income_Tax_Deduction_Concepts::CE) and deduction.tax_year = self.valid_from_date),&#xA;&#x9;ce : Income_Tax_Deduction_Concepts::CE = set_ce->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE) in&#xA;&#x9;&#xA;&#x9;set_ce->size() = 1 &#xA;implies&#xA;&#xA;self.tax_card_type=Tax_Card_Type::Principal and&#xA;self.deduction_CE_yearly = ce.deductible_amount and&#xA;self.deduction_CE_monthly = ce.deductible_amount/12 and&#xA;self.deduction_CE_daily = self.deduction_CE_monthly/25 /**25 working days per month**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_s9xPfk36EeSS5u8wdxTIGg" name="Tax_Card_FO-constraint" constrainedElement="_s9xPcU36EeSS5u8wdxTIGg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9xPf036EeSS5u8wdxTIGg">
            <language>OCL</language>
            <body>not self.oclIsUndefined()&#xA;implies&#xA;self.income.taxPayer.income_Tax_Deduction->select(d|d.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO) and d.tax_year = self.valid_from_date)->size() = 1&#xA;&#xA;and &#xA;&#xA;let fo : Income_Tax_Deduction_Concepts::FO = self.income_Tax_Deduction->select(d|d.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO) and d.tax_year = self.valid_from_date)->any(true).oclAsType(Income_Tax_Deduction_Concepts::FO) in&#xA;self.deduction_FO_daily = fo.daily and&#xA;self.deduction_FO_monthly = fo.monthly and&#xA;self.deduction_FO_yearly = fo.yearly&#xA;</body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:id="_s9xPgE36EeSS5u8wdxTIGg" name="card_identifier" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPgU36EeSS5u8wdxTIGg" name="tax_card_type" visibility="public" type="_s9xPGk36EeSS5u8wdxTIGg"/>
        <ownedAttribute xmi:id="_s9xPgk36EeSS5u8wdxTIGg" name="tax_office" visibility="public" type="_s9xPHU36EeSS5u8wdxTIGg"/>
        <ownedAttribute xmi:id="_s9xPg036EeSS5u8wdxTIGg" name="valid_from_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_s97AHU36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPhE36EeSS5u8wdxTIGg" name="valid_until_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_s97AHU36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPhU36EeSS5u8wdxTIGg" name="percentage_of_witholding" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPhk36EeSS5u8wdxTIGg" name="income" visibility="private" type="_s9woY036EeSS5u8wdxTIGg" association="_s9xPLE36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9xPh036EeSS5u8wdxTIGg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9xPiE36EeSS5u8wdxTIGg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPiU36EeSS5u8wdxTIGg" name="tax_Class" visibility="private" type="_s9woMU36EeSS5u8wdxTIGg" association="_s9xPMk36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9xPik36EeSS5u8wdxTIGg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9xPi036EeSS5u8wdxTIGg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPjE36EeSS5u8wdxTIGg" name="tax_payers_SSno" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPjU36EeSS5u8wdxTIGg" name="tax_payers_name_surname" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9xPjk36EeSS5u8wdxTIGg" value="2"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9xPj036EeSS5u8wdxTIGg" value="2"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPkE36EeSS5u8wdxTIGg" name="tax_payers_partner_name_surname" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9xPkU36EeSS5u8wdxTIGg" value="2"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9xPkk36EeSS5u8wdxTIGg" value="2"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPk036EeSS5u8wdxTIGg" name="tax_payers_address" visibility="public" type="_s9wCDU36EeSS5u8wdxTIGg" isDerived="true"/>
        <ownedAttribute xmi:id="_s9xPlE36EeSS5u8wdxTIGg" name="jobs_Employer_SSNo" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPlU36EeSS5u8wdxTIGg" name="jobs_employers_name" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPlk36EeSS5u8wdxTIGg" name="jobs_activity_type" visibility="public" type="_s9xPFk36EeSS5u8wdxTIGg" isDerived="true"/>
        <ownedAttribute xmi:id="_s9xPl036EeSS5u8wdxTIGg" name="jobs_place_of_work" visibility="public" type="_s9xPJk36EeSS5u8wdxTIGg" isDerived="true"/>
        <ownedAttribute xmi:id="_s9xPmE36EeSS5u8wdxTIGg" name="deduction_FD_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPmU36EeSS5u8wdxTIGg" name="deduction_FD_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPmk36EeSS5u8wdxTIGg" name="deduction_FD_yearly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPm036EeSS5u8wdxTIGg" name="deduction_AC_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPnE36EeSS5u8wdxTIGg" name="deduction_AC_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPnU36EeSS5u8wdxTIGg" name="deduction_AC_yearly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPnk36EeSS5u8wdxTIGg" name="deduction_CE_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPn036EeSS5u8wdxTIGg" name="deduction_CE_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPoE36EeSS5u8wdxTIGg" name="deduction_CE_yearly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPoU36EeSS5u8wdxTIGg" name="deduction_DS_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPok36EeSS5u8wdxTIGg" name="deduction_DS_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPo036EeSS5u8wdxTIGg" name="deduction_DS_yearly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPpE36EeSS5u8wdxTIGg" name="deduction_FO_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPpU36EeSS5u8wdxTIGg" name="deduction_FO_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPpk36EeSS5u8wdxTIGg" name="deduction_FO_yearly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPp036EeSS5u8wdxTIGg" name="credit_CIS_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPqE36EeSS5u8wdxTIGg" name="credit_CIS_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPqU36EeSS5u8wdxTIGg" name="credit_CIP_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPqk36EeSS5u8wdxTIGg" name="credit_CIM_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPq036EeSS5u8wdxTIGg" name="credit_CIM_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPrE36EeSS5u8wdxTIGg" name="tax_Payer" visibility="private" type="_s9wny036EeSS5u8wdxTIGg" association="_s9woJk36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9xPrU36EeSS5u8wdxTIGg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9xPrk36EeSS5u8wdxTIGg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPr036EeSS5u8wdxTIGg" name="income_Tax_Credit" visibility="private" type="_s9xPxU36EeSS5u8wdxTIGg" aggregation="shared" association="_s9xPvE36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9xPsE36EeSS5u8wdxTIGg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9xPsU36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPsk36EeSS5u8wdxTIGg" name="income_Tax_Deduction" visibility="private" type="_s9x2L036EeSS5u8wdxTIGg" aggregation="shared" association="_s9x2Lk36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9xPs036EeSS5u8wdxTIGg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9xPtE36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPtU36EeSS5u8wdxTIGg" name="validity" visibility="protected">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPtk36EeSS5u8wdxTIGg" name="previous" visibility="private" type="_s9xPcU36EeSS5u8wdxTIGg" association="_s9xPvU36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9xPt036EeSS5u8wdxTIGg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9xPuE36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPuU36EeSS5u8wdxTIGg" name="current_tax_card" visibility="private" type="_s9xPcU36EeSS5u8wdxTIGg" association="_s9xPvU36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9xPuk36EeSS5u8wdxTIGg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9xPu036EeSS5u8wdxTIGg" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_s9xPvE36EeSS5u8wdxTIGg" name="include" memberEnd="_s9xP0U36EeSS5u8wdxTIGg _s9xPr036EeSS5u8wdxTIGg"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_s9xPvU36EeSS5u8wdxTIGg" name="invalidated by" memberEnd="_s9xPtk36EeSS5u8wdxTIGg _s9xPuU36EeSS5u8wdxTIGg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_s9xPvk36EeSS5u8wdxTIGg" name="Income_Tax_Credit_Concepts">
      <packagedElement xmi:type="uml:Class" xmi:id="_s9xPv036EeSS5u8wdxTIGg" name="CIM">
        <generalization xmi:id="_s9xPwE36EeSS5u8wdxTIGg" general="_s9xPxU36EeSS5u8wdxTIGg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9xPwU36EeSS5u8wdxTIGg" name="CIP">
        <generalization xmi:id="_s9xPwk36EeSS5u8wdxTIGg" general="_s9xPxU36EeSS5u8wdxTIGg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9xPw036EeSS5u8wdxTIGg" name="CIS">
        <generalization xmi:id="_s9xPxE36EeSS5u8wdxTIGg" general="_s9xPxU36EeSS5u8wdxTIGg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9xPxU36EeSS5u8wdxTIGg" name="Income_Tax_Credit">
        <ownedAttribute xmi:id="_s9xPxk36EeSS5u8wdxTIGg" name="grantedBy" visibility="public" type="_s9xPAE36EeSS5u8wdxTIGg"/>
        <ownedAttribute xmi:id="_s9xPx036EeSS5u8wdxTIGg" name="taxPayer" visibility="private" type="_s9wny036EeSS5u8wdxTIGg" association="_s9xPD036EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9xPyE36EeSS5u8wdxTIGg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9xPyU36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPyk36EeSS5u8wdxTIGg" name="tax_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPy036EeSS5u8wdxTIGg" name="yearly" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_s9xPzE36EeSS5u8wdxTIGg" value="300">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPzU36EeSS5u8wdxTIGg" name="monthly" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_s9xPzk36EeSS5u8wdxTIGg" value="25">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xPz036EeSS5u8wdxTIGg" name="daily" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_s9xP0E36EeSS5u8wdxTIGg" value="1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xP0U36EeSS5u8wdxTIGg" name="taxation_Frame" visibility="private" type="_s9xPcU36EeSS5u8wdxTIGg" association="_s9xPvE36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9xP0k36EeSS5u8wdxTIGg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9xP0036EeSS5u8wdxTIGg"/>
        </ownedAttribute>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_s9xP1E36EeSS5u8wdxTIGg" name="Income_Tax_Deduction_Concepts">
      <packagedElement xmi:type="uml:Class" xmi:id="_s9xP1U36EeSS5u8wdxTIGg" name="FD">
        <generalization xmi:id="_s9xP1k36EeSS5u8wdxTIGg" general="_s9x2KU36EeSS5u8wdxTIGg"/>
        <ownedAttribute xmi:id="_s9xP1036EeSS5u8wdxTIGg" name="distance_declared_in_january" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9xP2E36EeSS5u8wdxTIGg" name="calculated_distance" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_s9xP2U36EeSS5u8wdxTIGg" name="compute_distance_unit_between_home_and_workpalce" isQuery="true">
          <eAnnotations xmi:id="_s9xP2k36EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_s9xP2036EeSS5u8wdxTIGg" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9x10E36EeSS5u8wdxTIGg" name="FO">
        <generalization xmi:id="_s9x10U36EeSS5u8wdxTIGg" general="_s9x2KU36EeSS5u8wdxTIGg"/>
        <ownedAttribute xmi:id="_s9x10k36EeSS5u8wdxTIGg" name="rate_type_for_FO" visibility="public" type="_s9xPNU36EeSS5u8wdxTIGg" isDerived="true"/>
        <ownedOperation xmi:id="_s9x10036EeSS5u8wdxTIGg" name="compute_disability_flat_rate" isQuery="true">
          <eAnnotations xmi:id="_s9x11E36EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_s9x11U36EeSS5u8wdxTIGg" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_s9x11k36EeSS5u8wdxTIGg" name="compute_regular_flat_rate" isQuery="true">
          <eAnnotations xmi:id="_s9x11036EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_s9x12E36EeSS5u8wdxTIGg" key="lookup"/>
          </eAnnotations>
          <ownedParameter xmi:id="_s9x12U36EeSS5u8wdxTIGg" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9x12k36EeSS5u8wdxTIGg" name="CE">
        <eAnnotations xmi:id="_s9x12036EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
        <generalization xmi:id="_s9x13E36EeSS5u8wdxTIGg" general="_s9x2L036EeSS5u8wdxTIGg"/>
        <ownedAttribute xmi:id="_s9x13U36EeSS5u8wdxTIGg" name="ce_deduction_type" visibility="public" type="_s9xPOE36EeSS5u8wdxTIGg"/>
        <ownedAttribute xmi:id="_s9x13k36EeSS5u8wdxTIGg" name="dependent_relative_flat_rate" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9x13036EeSS5u8wdxTIGg" name="disability_flat_rate" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_s9x14E36EeSS5u8wdxTIGg" name="compute_disability_flat_rate_for_CE" isQuery="true" postcondition="_s9x14k36EeSS5u8wdxTIGg">
          <eAnnotations xmi:id="_s9x14U36EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_s9x14k36EeSS5u8wdxTIGg" name="compute_disability_flat_rate" constrainedElement="_s9x14E36EeSS5u8wdxTIGg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9x14036EeSS5u8wdxTIGg">
              <language>OCL</language>
              <body>if self.ce_deduction_type = CE_Type::INALIDITY_AND_INFIRMITY then&#xA;&#x9;self.disability_flat_rate = IN_disability_flat_rate&#xA;else&#xA;&#x9;false&#xA;endif&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_s9x15E36EeSS5u8wdxTIGg" name="IN_disability_flat_rate">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_s9x15U36EeSS5u8wdxTIGg" name="compute_dependent_relative_flat_rate_for_CE" isQuery="true" postcondition="_s9x15036EeSS5u8wdxTIGg">
          <eAnnotations xmi:id="_s9x15k36EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_s9x15036EeSS5u8wdxTIGg" name="dependent_relative_flat_rate" constrainedElement="_s9x15U36EeSS5u8wdxTIGg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9x16E36EeSS5u8wdxTIGg">
              <language>OCL</language>
              <body>if self.ce_deduction_type = CE_Type::DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD then&#xA;&#x9;self.dependent_relative_flat_rate = IN_dependent_relative_flat_rate&#xA;else&#x9;&#xA;&#x9;false&#xA;endif&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_s9x16U36EeSS5u8wdxTIGg" name="IN_dependent_relative_flat_rate">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9x16k36EeSS5u8wdxTIGg" name="AC">
        <generalization xmi:id="_s9x16036EeSS5u8wdxTIGg" general="_s9x2L036EeSS5u8wdxTIGg"/>
        <ownedOperation xmi:id="_s9x17E36EeSS5u8wdxTIGg" name="is_eligible_income_for_AC" isQuery="true" postcondition="_s9x17k36EeSS5u8wdxTIGg">
          <eAnnotations xmi:id="_s9x17U36EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_s9x17k36EeSS5u8wdxTIGg" name="is_eligible_income_for_AC" constrainedElement="_s9x17E36EeSS5u8wdxTIGg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9x17036EeSS5u8wdxTIGg">
              <language>OCL</language>
              <body>if IN_income.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or&#xA;&#x9;IN_income.income_type.oclIsTypeOf(Income_Concepts::Independent_Professional_Services_Income) or&#xA;&#x9;IN_income.income_type.oclIsTypeOf(Income_Concepts::Agriculture_and_Forestry_Income) or&#xA;&#x9;IN_income.income_type.oclIsTypeOf(Income_Concepts::Trade_and_Business_Income) then&#xA;&#x9;result = true&#xA;else&#xA;&#x9;result=false&#xA;endif&#xA; </body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_s9x18E36EeSS5u8wdxTIGg" name="IN_income" type="_s9woY036EeSS5u8wdxTIGg"/>
          <ownedParameter xmi:id="_s9x18U36EeSS5u8wdxTIGg" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_s9x18k36EeSS5u8wdxTIGg" name="is_eligible_income_for_AC_assisting_spouse" isQuery="true" postcondition="_s9x19E36EeSS5u8wdxTIGg">
          <eAnnotations xmi:id="_s9x18036EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_s9x19E36EeSS5u8wdxTIGg" name="is_eligible_income_for_AC_assisting_spouse" constrainedElement="_s9x18k36EeSS5u8wdxTIGg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9x19U36EeSS5u8wdxTIGg">
              <language>OCL</language>
              <body>if  IN_income.income_type.oclIsTypeOf(Income_Concepts::Independent_Professional_Services_Income) or&#xA;&#x9;IN_income.income_type.oclIsTypeOf(Income_Concepts::Trade_and_Business_Income) then&#xA;&#x9;result = true&#xA;else&#xA;&#x9;result=false&#xA;endif&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_s9x19k36EeSS5u8wdxTIGg" name="IN_income" type="_s9woY036EeSS5u8wdxTIGg"/>
          <ownedParameter xmi:id="_s9x19036EeSS5u8wdxTIGg" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9x1-E36EeSS5u8wdxTIGg" name="DS_for_Permanent_Expense">
        <generalization xmi:id="_s9x1-U36EeSS5u8wdxTIGg" general="_s9x2K036EeSS5u8wdxTIGg"/>
        <ownedAttribute xmi:id="_s9x1-k36EeSS5u8wdxTIGg" name="permanent_expense_category" visibility="public" type="_s9xO4U36EeSS5u8wdxTIGg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9x1-036EeSS5u8wdxTIGg" name="DS_for_Interest_Expense">
        <generalization xmi:id="_s9x1_E36EeSS5u8wdxTIGg" general="_s9x2K036EeSS5u8wdxTIGg"/>
        <ownedOperation xmi:id="_s9x1_U36EeSS5u8wdxTIGg" name="compute_maximum_deductible_amount" isQuery="true" postcondition="_s9x1_036EeSS5u8wdxTIGg">
          <eAnnotations xmi:id="_s9x1_k36EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_s9x1_036EeSS5u8wdxTIGg" name="maximum_deductible_amount" constrainedElement="_s9x1_U36EeSS5u8wdxTIGg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9x2AE36EeSS5u8wdxTIGg">
              <language>OCL</language>
              <body>result = 1 and&#xA;self.maximum_deductible_amount = 1&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_s9x2AU36EeSS5u8wdxTIGg" name="result" isOrdered="true" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_s9x2Ak36EeSS5u8wdxTIGg" name="IN_children_with_allowances" type="_s9wCFk36EeSS5u8wdxTIGg">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9x2A036EeSS5u8wdxTIGg" value="*"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9x2BE36EeSS5u8wdxTIGg"/>
          </ownedParameter>
          <ownedParameter xmi:id="_s9x2BU36EeSS5u8wdxTIGg" name="IN_legal_union" type="_s9wCSU36EeSS5u8wdxTIGg">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9x2Bk36EeSS5u8wdxTIGg" value="*"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9x2B036EeSS5u8wdxTIGg"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9x2CE36EeSS5u8wdxTIGg" name="DS_for_Health_and_Pension_Insurance">
        <generalization xmi:id="_s9x2CU36EeSS5u8wdxTIGg" general="_s9x2K036EeSS5u8wdxTIGg"/>
        <ownedAttribute xmi:id="_s9x2Ck36EeSS5u8wdxTIGg" name="insurance_category" visibility="public" type="_s9xO6k36EeSS5u8wdxTIGg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9x2C036EeSS5u8wdxTIGg" name="DS_for_Private_Insurance_and_Plan">
        <generalization xmi:id="_s9x2DE36EeSS5u8wdxTIGg" general="_s9x2K036EeSS5u8wdxTIGg"/>
        <ownedAttribute xmi:id="_s9x2DU36EeSS5u8wdxTIGg" name="private_insurance_and_plan_category" visibility="public" type="_s9xO5E36EeSS5u8wdxTIGg"/>
        <ownedAttribute xmi:id="_s9x2Dk36EeSS5u8wdxTIGg" name="increase_for_life_insurance" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9x2D036EeSS5u8wdxTIGg" name="maximum_deductible_amount_for_private_insurance" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9x2EE36EeSS5u8wdxTIGg" name="maximum_deductible_amount_for_old_age_pension_plan" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_s9x2EU36EeSS5u8wdxTIGg" name="compute_increase_for_life_insurance" isQuery="true" postcondition="_s9x2E036EeSS5u8wdxTIGg">
          <eAnnotations xmi:id="_s9x2Ek36EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_s9x2E036EeSS5u8wdxTIGg" name="get_increase_for_life_insurance" constrainedElement="_s9x2EU36EeSS5u8wdxTIGg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9x2FE36EeSS5u8wdxTIGg">
              <language>OCL</language>
              <body>result = 1&#xA;and self.increase_for_life_insurance = 1&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_s9x2FU36EeSS5u8wdxTIGg" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_s9x2Fk36EeSS5u8wdxTIGg" name="compute_maximum_deductible_amount_for_private_insruance" isQuery="true" postcondition="_s9x2GE36EeSS5u8wdxTIGg">
          <eAnnotations xmi:id="_s9x2F036EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_s9x2GE36EeSS5u8wdxTIGg" name="get_maximum_deductible_amount_for_private_insurance" constrainedElement="_s9x2Fk36EeSS5u8wdxTIGg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9x2GU36EeSS5u8wdxTIGg">
              <language>OCL</language>
              <body>self.maximum_deductible_amount_for_private_insurance = 1&#xA;</body>
            </specification>
          </ownedRule>
        </ownedOperation>
        <ownedOperation xmi:id="_s9x2Gk36EeSS5u8wdxTIGg" name="compute_maximum_deductible_amount_for_old_age_pension_plan" isQuery="true" postcondition="_s9x2HE36EeSS5u8wdxTIGg">
          <eAnnotations xmi:id="_s9x2G036EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_s9x2HE36EeSS5u8wdxTIGg" name="maximum_deductible_amount_for_old_age_pension_plan" constrainedElement="_s9x2Gk36EeSS5u8wdxTIGg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9x2HU36EeSS5u8wdxTIGg">
              <language>OCL</language>
              <body>maximum_deductible_amount_for_old_age_pension_plan = 1&#xA;</body>
            </specification>
          </ownedRule>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9x2Hk36EeSS5u8wdxTIGg" name="DS_for_Loss_Carryforward">
        <generalization xmi:id="_s9x2H036EeSS5u8wdxTIGg" general="_s9x2K036EeSS5u8wdxTIGg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9x2IE36EeSS5u8wdxTIGg" name="DS_for_Donation">
        <generalization xmi:id="_s9x2IU36EeSS5u8wdxTIGg" general="_s9x2K036EeSS5u8wdxTIGg"/>
        <ownedOperation xmi:id="_s9x2Ik36EeSS5u8wdxTIGg" name="compute_maximum_deductible_amount_for_donation" isQuery="true" postcondition="_s9x2JE36EeSS5u8wdxTIGg">
          <eAnnotations xmi:id="_s9x2I036EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_s9x2JE36EeSS5u8wdxTIGg" name="maximum_deductible_amount" constrainedElement="_s9x2Ik36EeSS5u8wdxTIGg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_s9x2JU36EeSS5u8wdxTIGg">
              <language>OCL</language>
              <body>if IN_maximum_percentage = Constants::MAXIMUM_DEDUCTIBLE_PERCENTAGE_FOR_DONATIONS then&#xA;&#x9;self.maximum_deductible_amount = IN_maximum_percentage.oclAsType(Integer)/100 * IN_total_tax_payer_income&#xA;else&#xA;&#x9;false&#xA;endif&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_s9x2Jk36EeSS5u8wdxTIGg" name="IN_maximum_percentage" type="_s9xPQU36EeSS5u8wdxTIGg"/>
          <ownedParameter xmi:id="_s9x2J036EeSS5u8wdxTIGg" name="IN_total_tax_payer_income">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_s9x2KE36EeSS5u8wdxTIGg" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9x2KU36EeSS5u8wdxTIGg" name="Professional_Expenses_Deduction">
        <generalization xmi:id="_s9x2Kk36EeSS5u8wdxTIGg" general="_s9x2L036EeSS5u8wdxTIGg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9x2K036EeSS5u8wdxTIGg" name="DS">
        <generalization xmi:id="_s9x2LE36EeSS5u8wdxTIGg" general="_s9x2L036EeSS5u8wdxTIGg"/>
        <ownedAttribute xmi:id="_s9x2LU36EeSS5u8wdxTIGg" name="maximum_deductible_amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_s9x2Lk36EeSS5u8wdxTIGg" name="considers" memberEnd="_s9x2OE36EeSS5u8wdxTIGg _s9xPsk36EeSS5u8wdxTIGg"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_s9x2L036EeSS5u8wdxTIGg" name="Income_Tax_Deduction">
        <ownedAttribute xmi:id="_s9x2ME36EeSS5u8wdxTIGg" name="tax_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9x2MU36EeSS5u8wdxTIGg" name="daily" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9x2Mk36EeSS5u8wdxTIGg" name="monthly" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9x2M036EeSS5u8wdxTIGg" name="yearly" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9x2NE36EeSS5u8wdxTIGg" name="tax_Payer" visibility="private" type="_s9wny036EeSS5u8wdxTIGg" association="_s9xPM036EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9x2NU36EeSS5u8wdxTIGg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9x2Nk36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9x2N036EeSS5u8wdxTIGg" name="deductible_amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9x2OE36EeSS5u8wdxTIGg" name="tax_card" visibility="private" type="_s9xPcU36EeSS5u8wdxTIGg" association="_s9x2Lk36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9x2OU36EeSS5u8wdxTIGg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9x2Ok36EeSS5u8wdxTIGg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_s9x2O036EeSS5u8wdxTIGg" name="expenses" visibility="private" type="_s9xO7036EeSS5u8wdxTIGg" association="_s9x2Pk36EeSS5u8wdxTIGg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_s9x2PE36EeSS5u8wdxTIGg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_s9x2PU36EeSS5u8wdxTIGg" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_s9x2Pk36EeSS5u8wdxTIGg" name="is computed based on" memberEnd="_s9x2O036EeSS5u8wdxTIGg _s9xO_U36EeSS5u8wdxTIGg"/>
    </packagedElement>
    <profileApplication xmi:id="_s9x2P036EeSS5u8wdxTIGg">
      <eAnnotations xmi:id="_s9x2QE36EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://UML_PROFILES/Standard.profile.uml#_yzU58YinEdqtvbnfB2L_5w"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_PROFILES/Standard.profile.uml#_0"/>
    </profileApplication>
    <profileApplication xmi:id="_s9x2QU36EeSS5u8wdxTIGg">
      <eAnnotations xmi:id="_s9x2Qk36EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="Default.profile.uml#_s6-a9036EeSS5u8wdxTIGg"/>
      </eAnnotations>
      <appliedProfile href="Default.profile.uml#_s6-a9U36EeSS5u8wdxTIGg"/>
    </profileApplication>
    <profileApplication xmi:id="_s9x2Q036EeSS5u8wdxTIGg">
      <eAnnotations xmi:id="_s9x2RE36EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="Deployment.profile.uml#_s7AQDU36EeSS5u8wdxTIGg"/>
      </eAnnotations>
      <appliedProfile href="Deployment.profile.uml#_s7AQC036EeSS5u8wdxTIGg"/>
    </profileApplication>
    <profileApplication xmi:id="_s9x2RU36EeSS5u8wdxTIGg">
      <eAnnotations xmi:id="_s9x2Rk36EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="MARTE_VSL.profile.uml#_s906YU36EeSS5u8wdxTIGg"/>
      </eAnnotations>
      <appliedProfile href="MARTE_VSL.profile.uml#_s906X036EeSS5u8wdxTIGg"/>
    </profileApplication>
    <profileApplication xmi:id="_s9x2R036EeSS5u8wdxTIGg">
      <eAnnotations xmi:id="_s9x2SE36EeSS5u8wdxTIGg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="MARTE_Time.profile.uml#_s9zE7U36EeSS5u8wdxTIGg"/>
      </eAnnotations>
      <appliedProfile href="MARTE_Time.profile.uml#_s9zE6036EeSS5u8wdxTIGg"/>
    </profileApplication>
  </uml:Package>
  <Default:Documentation xmi:id="_s9x2SU36EeSS5u8wdxTIGg" base_Comment="_s9woRk36EeSS5u8wdxTIGg"/>
  <Default:Documentation xmi:id="_s9x2Sk36EeSS5u8wdxTIGg" base_Comment="_s9wCSk36EeSS5u8wdxTIGg"/>
</xmi:XMI>
