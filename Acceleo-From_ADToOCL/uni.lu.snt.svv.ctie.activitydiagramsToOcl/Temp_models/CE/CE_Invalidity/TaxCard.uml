<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.1" xmlns:xmi="http://schema.omg.org/spec/XMI/2.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:Default="http:///schemas/Default/_fNm3AAqoEd6-N_NOT9vsCA/2" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/3.0.0/UML" xsi:schemaLocation="http:///schemas/Default/_fNm3AAqoEd6-N_NOT9vsCA/2 Default.profile.uml#_gOGWr5OXEeS0vu9n5JWWng">
  <uml:Package xmi:id="_gNCBypOXEeS0vu9n5JWWng" name="TaxCard">
    <packageImport xmi:id="_gNCBy5OXEeS0vu9n5JWWng">
      <importedPackage xmi:type="uml:Model" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#_0"/>
    </packageImport>
    <packageImport xmi:id="_gNCBzJOXEeS0vu9n5JWWng">
      <importedPackage xmi:type="uml:Model" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#_0"/>
    </packageImport>
    <packageImport xmi:id="_gNCBzZOXEeS0vu9n5JWWng">
      <importedPackage xmi:type="uml:Model" href="MARTELibrary.uml#_gOL3IJOXEeS0vu9n5JWWng"/>
    </packageImport>
    <packagedElement xmi:type="uml:Package" xmi:id="_gNCBzpOXEeS0vu9n5JWWng" name="Tax_Card_Domain">
      <packageImport xmi:id="_gNCBz5OXEeS0vu9n5JWWng" importedPackage="_gNCoQpOXEeS0vu9n5JWWng"/>
      <packageImport xmi:id="_gNCB0JOXEeS0vu9n5JWWng" importedPackage="_gNCB1ZOXEeS0vu9n5JWWng"/>
      <packageImport xmi:id="_gNCB0ZOXEeS0vu9n5JWWng" importedPackage="_gNCoLJOXEeS0vu9n5JWWng"/>
      <packageImport xmi:id="_gNCB0pOXEeS0vu9n5JWWng" importedPackage="_gNCmsJOXEeS0vu9n5JWWng"/>
      <packageImport xmi:id="_gNCB05OXEeS0vu9n5JWWng" importedPackage="_gNCm8JOXEeS0vu9n5JWWng"/>
      <packageImport xmi:id="_gNCB1JOXEeS0vu9n5JWWng" importedPackage="_gNCn3pOXEeS0vu9n5JWWng"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_gNCB1ZOXEeS0vu9n5JWWng" name="Tax_Payer_Concepts">
      <packagedElement xmi:type="uml:Association" xmi:id="_gNCB1pOXEeS0vu9n5JWWng" name="taxed under" memberEnd="_gNCmcpOXEeS0vu9n5JWWng _gNCmoZOXEeS0vu9n5JWWng"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCB15OXEeS0vu9n5JWWng" name="Income_Tax">
        <ownedAttribute xmi:id="_gNCB2JOXEeS0vu9n5JWWng" name="taxPayer" visibility="private" type="_gNCCUpOXEeS0vu9n5JWWng" association="_gNCmnpOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCB2ZOXEeS0vu9n5JWWng" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCB2pOXEeS0vu9n5JWWng" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCB25OXEeS0vu9n5JWWng" name="tax_amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCB3JOXEeS0vu9n5JWWng" name="tax_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_gOL3oZOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCB3ZOXEeS0vu9n5JWWng" name="Address">
        <ownedAttribute xmi:id="_gNCB3pOXEeS0vu9n5JWWng" name="taxPayer" visibility="private" type="_gNCCK5OXEeS0vu9n5JWWng" association="_gNCmlZOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCB35OXEeS0vu9n5JWWng" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCB4JOXEeS0vu9n5JWWng" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCB4ZOXEeS0vu9n5JWWng" name="country" visibility="public" type="_gNCndpOXEeS0vu9n5JWWng">
          <defaultValue xmi:type="uml:InstanceValue" xmi:id="_gNCB4pOXEeS0vu9n5JWWng" name="LU" type="_gNCndpOXEeS0vu9n5JWWng" instance="_gNCnd5OXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCB45OXEeS0vu9n5JWWng" name="street" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCB5JOXEeS0vu9n5JWWng" name="zipCode" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCB5ZOXEeS0vu9n5JWWng" name="city" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCB5pOXEeS0vu9n5JWWng" name="Dependent">
        <generalization xmi:id="_gNCB55OXEeS0vu9n5JWWng" general="_gNCCK5OXEeS0vu9n5JWWng"/>
        <ownedAttribute xmi:id="_gNCB6JOXEeS0vu9n5JWWng" name="dependent_type" visibility="public" type="_gNCnm5OXEeS0vu9n5JWWng"/>
        <ownedAttribute xmi:id="_gNCB6ZOXEeS0vu9n5JWWng" name="household" visibility="private" type="_gNCCEpOXEeS0vu9n5JWWng" association="_gNCmnJOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCB6pOXEeS0vu9n5JWWng" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCB65OXEeS0vu9n5JWWng" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCB7JOXEeS0vu9n5JWWng" name="responsible_person" visibility="private" type="_gNCCUpOXEeS0vu9n5JWWng" association="_gNCmm5OXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCB7ZOXEeS0vu9n5JWWng" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCB7pOXEeS0vu9n5JWWng" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCB75OXEeS0vu9n5JWWng" name="continued_studies" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_gNCB8JOXEeS0vu9n5JWWng">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCB8ZOXEeS0vu9n5JWWng" name="expense" visibility="private" type="_gNCnXZOXEeS0vu9n5JWWng" association="_gNCmnZOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCB8pOXEeS0vu9n5JWWng" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCB85OXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCB9JOXEeS0vu9n5JWWng" name="tax_Payer" visibility="private" type="_gNCCUpOXEeS0vu9n5JWWng" association="_gNCmmpOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCB9ZOXEeS0vu9n5JWWng" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCB9pOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_gNCB95OXEeS0vu9n5JWWng" name="compute_if_dependent_receives_allowances_eligible_for_CIM" isQuery="true">
          <eAnnotations xmi:id="_gNCB-JOXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_gNCB-ZOXEeS0vu9n5JWWng" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_gNCB-pOXEeS0vu9n5JWWng" name="compute_if_dependent_receives_allowances_eligible_for_DS" isQuery="true">
          <eAnnotations xmi:id="_gNCB-5OXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_gNCB_JOXEeS0vu9n5JWWng" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_gNCB_ZOXEeS0vu9n5JWWng" name="compute_if_dependent_receives_allowances_eligible_for_CE_dependance_and_care" isQuery="true">
          <eAnnotations xmi:id="_gNCB_pOXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_gNCB_5OXEeS0vu9n5JWWng" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_gNCCAJOXEeS0vu9n5JWWng" name="is_dependent_following_continued_studies" isQuery="true" postcondition="_gNCCApOXEeS0vu9n5JWWng">
          <eAnnotations xmi:id="_gNCCAZOXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_gNCCApOXEeS0vu9n5JWWng" name="is_dependent_following_continued_studies" constrainedElement="_gNCCAJOXEeS0vu9n5JWWng">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCCA5OXEeS0vu9n5JWWng">
              <language>OCL</language>
              <body>self.continued_studies = IN_continued_studies&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_gNCCBJOXEeS0vu9n5JWWng" name="IN_continued_studies">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_gNCCBZOXEeS0vu9n5JWWng" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCCBpOXEeS0vu9n5JWWng" name="External_Allowance">
        <ownedAttribute xmi:id="_gNCCB5OXEeS0vu9n5JWWng" name="amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCCCJOXEeS0vu9n5JWWng" name="grantor" visibility="public" type="_gNCnbpOXEeS0vu9n5JWWng"/>
        <ownedAttribute xmi:id="_gNCCCZOXEeS0vu9n5JWWng" name="person" visibility="private" type="_gNCCK5OXEeS0vu9n5JWWng" association="_gNCmlpOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCCCpOXEeS0vu9n5JWWng" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCCC5OXEeS0vu9n5JWWng" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCCDJOXEeS0vu9n5JWWng" name="valid_from_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_gOL3oZOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCCDZOXEeS0vu9n5JWWng" name="valid_until_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_gOL3oZOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCCDpOXEeS0vu9n5JWWng" name="Fiscal_Address">
        <generalization xmi:id="_gNCCD5OXEeS0vu9n5JWWng" general="_gNCB3ZOXEeS0vu9n5JWWng"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCCEJOXEeS0vu9n5JWWng" name="Habitual_Address">
        <generalization xmi:id="_gNCCEZOXEeS0vu9n5JWWng" general="_gNCB3ZOXEeS0vu9n5JWWng"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCCEpOXEeS0vu9n5JWWng" name="Household">
        <ownedAttribute xmi:id="_gNCCE5OXEeS0vu9n5JWWng" name="tax_Payer" visibility="private" type="_gNCCUpOXEeS0vu9n5JWWng" association="_gNCmmZOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCCFJOXEeS0vu9n5JWWng" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCCFZOXEeS0vu9n5JWWng" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCCFpOXEeS0vu9n5JWWng" name="dependent" visibility="private" type="_gNCB5pOXEeS0vu9n5JWWng" association="_gNCmnJOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCCF5OXEeS0vu9n5JWWng" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCCGJOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCCGZOXEeS0vu9n5JWWng" name="Legal_Union_Record">
        <ownedComment xmi:id="_gNCCGpOXEeS0vu9n5JWWng" annotatedElement="_gNCCGZOXEeS0vu9n5JWWng">
          <body>&lt;p>&lt;span style=&quot;font-size:16pt;&quot;>When&amp;nbsp;a&amp;nbsp;decision&amp;nbsp;for&amp;nbsp;Dates&amp;nbsp;would&amp;nbsp;be&amp;nbsp;taken,&amp;nbsp;&lt;/span>&lt;/p>&lt;p>&lt;span style=&quot;font-size:16pt;&quot;>we&amp;nbsp;must&amp;nbsp;take&amp;nbsp;into&amp;nbsp;account&amp;nbsp;that&amp;nbsp;all&amp;nbsp;marriages&amp;nbsp;and&amp;nbsp;partnerships&amp;nbsp;are&amp;nbsp;mutually&amp;nbsp;exclusive.&lt;/span>&lt;/p></body>
        </ownedComment>
        <ownedRule xmi:id="_gNCCG5OXEeS0vu9n5JWWng" name="Legal_Union-different_people-constraint" constrainedElement="_gNCCGZOXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCCHJOXEeS0vu9n5JWWng">
            <language>OCL</language>
            <body>if self.end_date.oclIsUndefined() then&#xA;/**LEGAL UNION IS VALID**/&#xA;self.individual_A.SSNo &lt;> self.individual_B.SSNo&#xA;and&#xA;self.individual_A->size()=1 and&#xA;self.individual_B->size()=1&#xA;else&#xA;/**LEGAL UNION IS AUTHORIZED WITH ONLY ONE PERSON**/&#xA;false&#xA;endif&#xA;</body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:id="_gNCCHZOXEeS0vu9n5JWWng" name="start_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_gOL3oZOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCCHpOXEeS0vu9n5JWWng" name="end_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_gOL3oZOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCCH5OXEeS0vu9n5JWWng" name="individual_A" visibility="private" type="_gNCCK5OXEeS0vu9n5JWWng" association="_gNCmmJOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCCIJOXEeS0vu9n5JWWng" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCCIZOXEeS0vu9n5JWWng" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCCIpOXEeS0vu9n5JWWng" name="individual_B" visibility="private" type="_gNCCK5OXEeS0vu9n5JWWng" association="_gNCml5OXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCCI5OXEeS0vu9n5JWWng" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCCJJOXEeS0vu9n5JWWng" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCCJZOXEeS0vu9n5JWWng" name="Marriage_Record">
        <generalization xmi:id="_gNCCJpOXEeS0vu9n5JWWng" general="_gNCCGZOXEeS0vu9n5JWWng"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCCJ5OXEeS0vu9n5JWWng" name="Non_Resident_Tax_Payer">
        <generalization xmi:id="_gNCCKJOXEeS0vu9n5JWWng" general="_gNCCUpOXEeS0vu9n5JWWng"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCCKZOXEeS0vu9n5JWWng" name="Partnership_Record">
        <generalization xmi:id="_gNCCKpOXEeS0vu9n5JWWng" general="_gNCCGZOXEeS0vu9n5JWWng"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCCK5OXEeS0vu9n5JWWng" name="Physical_Person">
        <ownedAttribute xmi:id="_gNCCLJOXEeS0vu9n5JWWng" name="name" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCCLZOXEeS0vu9n5JWWng" name="is_assisting_spouse" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCCLpOXEeS0vu9n5JWWng" name="SSNo" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCCL5OXEeS0vu9n5JWWng" name="allowances" visibility="private" type="_gNCCBpOXEeS0vu9n5JWWng" association="_gNCmlpOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCCMJOXEeS0vu9n5JWWng" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCCMZOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCCMpOXEeS0vu9n5JWWng" name="addresses" visibility="private" type="_gNCB3ZOXEeS0vu9n5JWWng" association="_gNCmlZOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCCM5OXEeS0vu9n5JWWng" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCCNJOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCCNZOXEeS0vu9n5JWWng" name="legal_union_A" visibility="private" type="_gNCCGZOXEeS0vu9n5JWWng" association="_gNCmmJOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCCNpOXEeS0vu9n5JWWng" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCCN5OXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCCOJOXEeS0vu9n5JWWng" name="legal_union_B" visibility="private" type="_gNCCGZOXEeS0vu9n5JWWng" association="_gNCml5OXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCCOZOXEeS0vu9n5JWWng" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCCOpOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCCO5OXEeS0vu9n5JWWng" name="age" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCCPJOXEeS0vu9n5JWWng" name="disability_percentage" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_gNCCPZOXEeS0vu9n5JWWng">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCCPpOXEeS0vu9n5JWWng" name="is_affiliated_personnaly_to_social_security" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_gNCCP5OXEeS0vu9n5JWWng" name="is_separated_from" isQuery="true">
          <eAnnotations xmi:id="_gNCCQJOXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_gNCCQZOXEeS0vu9n5JWWng" key="computaion"/>
          </eAnnotations>
          <ownedParameter xmi:id="_gNCCQpOXEeS0vu9n5JWWng" name="IN_person" type="_gNCCK5OXEeS0vu9n5JWWng"/>
          <ownedParameter xmi:id="_gNCCQ5OXEeS0vu9n5JWWng" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_gNCCRJOXEeS0vu9n5JWWng" name="is_person_assisting_spouse" isQuery="true" postcondition="_gNCCRpOXEeS0vu9n5JWWng">
          <eAnnotations xmi:id="_gNCCRZOXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_gNCCRpOXEeS0vu9n5JWWng" name="is_assisting_spouse" constrainedElement="_gNCCRJOXEeS0vu9n5JWWng">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCCR5OXEeS0vu9n5JWWng">
              <language>OCL</language>
              <body>self.is_assisting_spouse = IN_assisting_spouse&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_gNCCSJOXEeS0vu9n5JWWng" name="IN_assisting_spouse">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_gNCCSZOXEeS0vu9n5JWWng" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_gNCCSpOXEeS0vu9n5JWWng" name="is_person_affiliated_personnaly_to_social_security" isQuery="true" postcondition="_gNCCTJOXEeS0vu9n5JWWng">
          <eAnnotations xmi:id="_gNCCS5OXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_gNCCTJOXEeS0vu9n5JWWng" name="is_person_affiliated_personnaly_affiliated_to_social_security" constrainedElement="_gNCCSpOXEeS0vu9n5JWWng">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCCTZOXEeS0vu9n5JWWng">
              <language>OCL</language>
              <body>self.is_affiliated_personnaly_to_social_security = IN_personnaly_affiliated&#xA;&#xA;&#xA;&#xA;&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_gNCCTpOXEeS0vu9n5JWWng" name="IN_personnaly_affiliated">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_gNCCT5OXEeS0vu9n5JWWng" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCCUJOXEeS0vu9n5JWWng" name="Resident_Tax_Payer">
        <generalization xmi:id="_gNCCUZOXEeS0vu9n5JWWng" general="_gNCCUpOXEeS0vu9n5JWWng"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCCUpOXEeS0vu9n5JWWng" name="Tax_Payer">
        <ownedRule xmi:id="_gNCCU5OXEeS0vu9n5JWWng" name="NonResidentTaxPayer-constraint" constrainedElement="_gNCCJ5OXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCCVJOXEeS0vu9n5JWWng">
            <language>OCL</language>
            <body>&#x9;self.addresses->exists( fiscal_add:Address | &#xA;&#x9;&#x9;fiscal_add.oclIsTypeOf(Fiscal_Address) and fiscal_add.country&lt;>Country::LU) and&#xA;&#x9;self.addresses->exists( hab_add:Address | &#xA;&#x9;&#x9;hab_add.oclIsTypeOf(Habitual_Address) and hab_add.country&lt;>Country::LU) and&#xA;&#x9;self.incomes->exists(inc:Income_Concepts::Income | inc.oclIsTypeOf(Income_Concepts::Local_Income))&#xA;implies&#xA;&#x9;self.oclIsTypeOf(Non_Resident_Tax_Payer)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_gNCCVZOXEeS0vu9n5JWWng" name="ResidentTaxPayer-constraint" constrainedElement="_gNCCUJOXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCCVpOXEeS0vu9n5JWWng">
            <language>OCL</language>
            <body>&#x9;self.addresses->exists( fiscal_add:Address | &#xA;&#x9;&#x9;fiscal_add.oclIsTypeOf(Fiscal_Address) and fiscal_add.country=Country::LU) or&#xA;&#x9;self.addresses->exists( hab_add:Address | &#xA;&#x9;&#x9;hab_add.oclIsTypeOf(Habitual_Address) and hab_add.country=Country::LU) &#xA;implies&#xA;&#x9;self.oclIsTypeOf(Resident_Tax_Payer)</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_gNCCV5OXEeS0vu9n5JWWng" name="SubjectToIncomeTax-constraint" constrainedElement="_gNCCUpOXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCCWJOXEeS0vu9n5JWWng" name="subjectToIncomeTax ">
            <language>OCL</language>
            <body>&#x9;self.incomes->exists(inc:Income_Concepts::Income |&#xA;&#x9;&#x9; inc.oclIsTypeOf(Income_Concepts::Local_Income) or inc.oclIsTypeOf(Income_Concepts::Foreign_Income))&#xA;implies&#xA;&#x9;not self.incomeTax->isEmpty()&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_gNCCWZOXEeS0vu9n5JWWng" name="TaxCredit-CIS-constraint" constrainedElement="_gNCCUpOXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCCWpOXEeS0vu9n5JWWng">
            <language>OCL</language>
            <body>let   employement_income: Set(Income_Concepts::Income) = &#xA;      &#x9;self.incomes->select(inc|&#xA;      &#x9;&#x9;inc.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;not inc.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;   &#x9;   &#x9;&#x9;inc.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) and&#xA;       &#x9;&#x9;inc.start_date_within_taxation_year=self.incomeTax.tax_year),&#xA;       &#x9;total_income: Integer = employement_income.income_amount->sum(),&#xA;&#x9;&#x9;tax_liability :Integer = employement_income.tax_liability->sum() in&#xA;&#x9;&#x9;&#x9; &#x9;&#x9; &#xA;&#x9;&#x9;&#xA;&#x9;if(employement_income->size()>0) then&#xA;&#x9;&#x9; if (total_income>936*tax_liability) then&#xA;&#x9;&#x9; let set_of_CIS: Set(Income_Tax_Credit_Concepts::Income_Tax_Credit) = self.income_Tax_Credit->select(type|type.oclIsTypeOf(Income_Tax_Credit_Concepts::CIS) and type.tax_year=self.incomeTax.tax_year),&#xA;&#x9;&#x9;&#x9;size_set_of_CIS :Integer = set_of_CIS->size(),&#xA;&#x9;&#x9;&#x9; a_CIS: Income_Tax_Credit_Concepts::Income_Tax_Credit = set_of_CIS->any(true) in&#xA;&#x9; &#x9;    &#xA;&#x9; &#x9;    size_set_of_CIS = 1 and&#xA;&#x9;&#x9;&#x9;/**CIS IS CREDITED TO THE TAX PAYER**/&#xA;&#x9;&#x9;&#x9;a_CIS.yearly = Constants::FLAT_RATE_CIS_YEARLY.oclAsType(Integer)*tax_liability&#xA;      &#x9;else&#xA;      &#x9;&#x9;/**ERROR CIS CANNOT BE CREDITED**/&#xA;      &#x9;&#x9;false&#xA;      &#x9;endif&#x9;&#xA;     else&#xA;     &#x9;false&#xA;     endif&#xA;  &#xA;    </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_gNCCW5OXEeS0vu9n5JWWng" name="TaxCredit-CIP-constraint" constrainedElement="_gNCCUpOXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCCXJOXEeS0vu9n5JWWng">
            <language>OCL</language>
            <body>let   employement_income: Set(Income_Concepts::Income) = &#xA;      &#x9;self.incomes->select(inc|&#xA;      &#x9;&#x9;inc.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;not inc.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;   &#x9;   &#x9;&#x9;inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) and&#xA;       &#x9;&#x9;inc.start_date_within_taxation_year=self.incomeTax.tax_year),&#xA;       &#x9;total_income: Integer = employement_income.income_amount->sum(),&#xA;&#x9;&#x9;tax_liability :Integer = employement_income.tax_liability->sum() in&#xA;&#x9;&#x9;&#x9; &#x9;&#x9; &#xA;&#x9;if(employement_income->size()>0) then&#xA;&#x9;&#x9; if (total_income>936*tax_liability) then&#xA;&#x9;&#x9; let set_of_CIP: Set(Income_Tax_Credit_Concepts::Income_Tax_Credit) = self.income_Tax_Credit->select(type|type.oclIsTypeOf(Income_Tax_Credit_Concepts::CIP) and type.tax_year=self.incomeTax.tax_year),&#xA;&#x9;&#x9;&#x9;size_set_of_CIP :Integer = set_of_CIP->size(),&#xA;&#x9;&#x9;&#x9; a_CIP: Income_Tax_Credit_Concepts::Income_Tax_Credit = set_of_CIP->any(true) in&#xA;&#x9; &#x9;    &#xA;&#x9; &#x9;    size_set_of_CIP = 1 and&#xA;&#x9;&#x9;&#x9;/**CIP IS CREDITED TO THE TAX PAYER**/&#xA;&#x9;&#x9;&#x9;a_CIP.yearly = Constants::FLAT_RATE_CIP_YEARLY.oclAsType(Integer) *tax_liability&#xA;      &#x9;else&#xA;      &#x9;&#x9;/**ERROR CIP CANNOT BE CREDITED**/&#xA;      &#x9;&#x9;false&#xA;      &#x9;endif&#x9;&#xA;     else&#xA;     &#x9;false&#xA;     endif&#xA;      &#x9;&#xA;      &#x9;&#xA;    </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_gNCCXZOXEeS0vu9n5JWWng" name="TaxCredit-CIM-constraint" constrainedElement="_gNCCUpOXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCCXpOXEeS0vu9n5JWWng">
            <language>OCL</language>
            <body>let&#xA; a_CIM : Income_Tax_Credit_Concepts::CIM = self.income_Tax_Credit->select(c | c.oclIsTypeOf(Income_Tax_Credit_Concepts::CIM) and c.tax_year = self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Credit_Concepts::CIM),&#xA; current_employement_income: Set(Income_Concepts::Income) = self.incomes->select(inc|&#xA;      &#x9;&#x9;inc.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;(inc.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)) and&#xA;      &#x9;&#x9;inc.start_date_within_taxation_year=self.incomeTax.tax_year) ,&#xA;      &#x9;&#x9;&#xA;income_TaxClass1A: Set(Income_Concepts::Income) = &#xA;      &#x9;&#x9;current_employement_income->select(inc|&#xA;      &#x9;&#x9;      &#x9;&#x9;inc.oclAsType(Income_Concepts::Local_Income).tax_card->exists(tc|tc.tax_Class = Tax_Class_Category::One_A)),&#xA;tax_liability : Integer = income_TaxClass1A.tax_liability->sum()&#xA;      &#x9;&#x9;in&#xA;&#xA;       if (current_employement_income->size()>0) then&#xA;&#x9;&#x9;&#x9;if &#x9;(income_TaxClass1A->size()>0) then&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;let child_with_allowances : Set(Dependent) = self.dependents->select(dep:Dependent|dep.dependent_type=Dependent_Type::CHILD and dep.compute_if_dependent_receives_allowances_eligible_for_CIM()=true and&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;dep.allowances->exists(al|al.valid_from_date=self.incomeTax.tax_year and al.valid_until_date = self.incomeTax.tax_year)=true) in&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9; if  child_with_allowances ->size()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CIM ALLOWED**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;a_CIM.yearly= Constants::FLAT_RATE_CIM_YEARLY.oclAsType(Integer) * tax_liability&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9; else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CIM, MISSING CHILD ALLOWANCE**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9; endif&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CIM, NOT TAX CLASS 1A**/&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CIM, NOT ELIGIBLE INCOME*/&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#xA;&#xA;&#x9;&#xA;/**NAVIGATION&#xA;self.tax_class&#xA;self.income_Tax_Credit->&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;self.tax_class&#xA;self.incomeTax.tax_year&#xA;self.incomes&#xA;inc.oclAsType(Income_Concepts::Local_Income).tax_card&#xA;self.incomeTax.tax_year&#xA;self.dependents&#xA;dep.allowances&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;**/</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_gNCCX5OXEeS0vu9n5JWWng" name="Legal_Union-monogamus-constraint" constrainedElement="_gNCCUpOXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCCYJOXEeS0vu9n5JWWng">
            <language>OCL</language>
            <body>let legal_union: Set(Legal_Union_Record) = self.legal_union_A->select(couple|couple.end_date->isEmpty()) in&#xA;if (legal_union->size()=1) then&#x9;&#xA;&#x9;/**YOU ARE IN LIGEL UNION WITH ONLY ONE PERSON**/&#xA;&#x9;true&#xA;else&#xA;&#x9;/**ERROR YOU CANNOT BE IN LEGAL UNION WITH MORE THAN ONE PERSON**/&#xA;&#x9;false&#xA;endif&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_gNCCYZOXEeS0vu9n5JWWng" name="TaxClass-unique-constraint" constrainedElement="_gNCCUpOXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCCYpOXEeS0vu9n5JWWng">
            <language>OCL</language>
            <body>let tax_classes: Set(Tax_Class) = self.tax_class->select(tax_classe|tax_class.valid_until_date->isEmpty()) in&#xA;if tax_classes->size()=1 then&#x9;&#xA;&#x9;/**ONLY ONE TAX CLASS AT TIME**/&#xA;&#x9;true&#xA;else&#xA;&#x9;/**ERROR YOU CANNOT HAVE SEVERAL TAX CLASSES AT TIME**/&#xA;&#x9;false&#xA;endif</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_gNCCY5OXEeS0vu9n5JWWng" name="TaxDeduction-CE-constraint" constrainedElement="_gNCCUpOXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCCZJOXEeS0vu9n5JWWng">
            <language>OCL</language>
            <body>let set_of_CE: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::CE) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year),&#xA;&#x9; CE_invalidity:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::INALIDITY_AND_INFIRMITY),&#xA;&#x9; CE_dependence:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD),&#xA;&#x9; CE_child_not_part_of_household:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::CARE_FOR_CHILDREN_NOT_BEING_PART_OF_HOUSEHOLD),&#xA;&#x9; income_subject_to_witholding_tax : Set(Income_Concepts::Income) = self.incomes->select(income|income.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not income.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.start_date_within_taxation_year = self.incomeTax.tax_year),&#xA; &#x9; extraordinary_expenses : &#x9;Set(Expense_Concepts::Expense) = self.expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclIsTypeOf(Expense_Concepts::Extraordinary_Expense_CE)),&#x9;&#xA; &#x9; extraordinary_expense_invalidity_and_infirmity  : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::INALIDITY_AND_INFIRMITY),&#xA; &#x9; extraordinary_expense_dependence_and_care : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD), &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA; &#x9; extraordinary_expense_care_for_children_not_part_of_the_household : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::CARE_FOR_CHILDREN_NOT_BEING_PART_OF_HOUSEHOLD),  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#xA;&#x9; declared_expense:Integer=extraordinary_expenses.declared_amount->sum() in&#xA;&#x9; &#xA;&#x9;if (income_subject_to_witholding_tax->size()>0) then&#xA;&#x9;&#x9;if (extraordinary_expenses->any(true).oclAsType(Expense_Concepts::Extraordinary_Expense_CE).is_above_thresholded_deduction_percentage_for_CE()=true) then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if extraordinary_expense_invalidity_and_infirmity->size()>0 then &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if self.oclIsTypeOf(Resident_Tax_Payer) then&#xA;&#x9;&#x9;&#x9;&#x9;/**CE FOR INVALIDITY AND INFIRMITY ON THE TAX CARD**/&#xA;&#x9;&#x9;&#x9;&#x9;CE_invalidity->size() = 1&#x9;and&#xA;&#x9;&#x9;&#x9;&#x9;CE_invalidity->any(true).deductible_amount = CE_invalidity->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).disability_flat_rate&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if  extraordinary_expense_dependence_and_care ->size()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->size()=1 and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;let &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expenses_for_dependence_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::DEPENDENCE_CARE) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; expenses_for_house_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|expense.expense_purpose=Expense_Purpose::HOUSE_CARE) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; expenses_for_child_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::CHILD_CARE),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;amount_house_care: Integer = expenses_for_house_care.declared_amount->sum(),&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sum_of_expenses:Integer =  expenses_for_child_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.compute_if_dependent_receives_allowances_eligible_for_CE_dependance_and_care() =true and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.dependent_type=Dependent_Type::CHILD and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(expense.dependent.oclAsType(Physical_Person).age&lt;14) or&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.oclAsType(Physical_Person).disability_percentage>0).declared_amount->sum() in&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(expenses_for_child_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CHILD CARE, CHILDREN BEING PART OF THE HOUSHOLD**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(amount_house_care + sum_of_expenses)>Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(expenses_for_dependence_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CLOSE RELATIVE DEPENDENCE CARE**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount = Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer)+ CE_dependence->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).dependent_relative_flat_rate&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;CE_dependence->any(true).deductible_amount = Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(expenses_for_dependence_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CLOSE RELATIVE DEPENDENCE CARE**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount= amount_house_care + sum_of_expenses + CE_dependence->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).dependent_relative_flat_rate&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount= amount_house_care + sum_of_expenses&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif &#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if  CE_child_not_part_of_household->size()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; CE_child_not_part_of_household->size()= 1 and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CARE FOR CHILDREN NOT BEING PART OF THE HOUSEHOLD**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;let&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expenses_for_child_not_part_of_houselod_care: Set(Expense_Concepts::Expense) = self.expenses->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::CHILD_CARE),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;sum_expenses_for_children:Integer = expenses_for_child_not_part_of_houselod_care->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.compute_if_dependent_receives_allowances_eligible_for_CE_dependance_and_care() =false and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;((expense.dependent.age&lt;=21) or&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(expense.dependent.age>21 and expense.dependent.continued_studies=true and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.tax_Payer.incomes.income_amount->sum()&lt;0.6*Constants::MINIMUM_SALARY.oclAsType(Integer)))).declared_amount->sum() in&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(sum_expenses_for_children>Constants::MAXIMUM_CE_RATE_FOR_CHILD_NOT_BEING_PART_OF_HOUSEHOLD.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;CE_child_not_part_of_household->any(true).deductible_amount  = Constants::MAXIMUM_CE_RATE_FOR_CHILD_NOT_BEING_PART_OF_HOUSEHOLD.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_child_not_part_of_household->any(true).deductible_amount = sum_expenses_for_children&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;/*use it to fill the tax card, temporary until decision on how to model the tax card with respect to the tax payer&#xA;&#x9;&#x9;&#x9;CE_invalidity->any(true).deductible_amount +&#xA;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount + &#xA;&#x9;&#x9;&#x9;CE_child_not_part_of_household->any(true).deductible_amount */&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CE, NOT SUBJECT TO WITHOLDING**/&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#x9;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_gNCCZZOXEeS0vu9n5JWWng" name="TaxDeduction-AC-extra_professional-constraint" constrainedElement="_gNCCUpOXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCCZpOXEeS0vu9n5JWWng">
            <language>OCL</language>
            <body>let set_of_AC: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::AC) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year),&#xA;&#x9;ac: Income_Tax_Deduction_Concepts::AC = set_of_AC->any(true).oclAsType(Income_Tax_Deduction_Concepts::AC),&#xA;&#x9;spouse: Physical_Person = self.legal_union_A->select(couple|couple.end_date->isEmpty())->any(true).individual_B,&#xA;&#x9;taxpayer_income_eligible_type : Boolean = self.incomes->exists(inc|ac.is_eligible_income_for_AC(inc)),&#xA;&#x9;spouse_income_eligible_type : Boolean = spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->exists(inc|ac.is_eligible_income_for_AC(inc)),&#xA;&#x9;&#xA;&#x9;taxpayer_income_eligible_type_assisting_spouse : Boolean = self.incomes->exists(inc|ac.is_eligible_income_for_AC_assisting_spouse(inc)),&#xA;&#x9;spouse_income_eligible_type_assisting_spouse : Boolean = spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->exists(inc|ac.is_eligible_income_for_AC_assisting_spouse(inc)),&#xA;&#x9;&#xA;&#x9;taxpayer_personnaly_affiliated_to_social_security : Boolean = self.is_affiliated_personnaly_to_social_security,&#xA;&#x9;taxpayer_assisting_spouse: Boolean = self.is_assisting_spouse,&#xA;&#x9;&#xA;&#x9;spouse_personnaly_affiliated_to_social_security : Boolean = spouse.is_affiliated_personnaly_to_social_security,&#xA;&#x9;spouse_assisting_spouse: Boolean =  spouse.is_assisting_spouse&#xA;&#x9;in&#xA;&#x9; &#xA;&#x9; if taxpayer_income_eligible_type=true and spouse_income_eligible_type=true then&#xA;&#x9; &#x9;if taxpayer_personnaly_affiliated_to_social_security=true  and spouse_personnaly_affiliated_to_social_security = true then&#xA;&#x9; &#x9;&#x9;ac.deductible_amount= Constants::FLAT_RATE_FOR_EXTRA_PROFESSIONAL_DEDUCTION&#xA;&#x9; &#x9;else&#xA;&#x9; &#x9;&#x9;false&#xA;&#x9; &#x9;endif&#xA;&#x9; else&#xA;&#x9; &#x9;&#x9;if taxpayer_income_eligible_type=true xor spouse_income_eligible_type=true then&#x9; &#x9;&#x9;&#xA;&#x9; &#x9;&#x9;&#x9;if  self.incomes->exists(inc|inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) and inc.compute_duration_of_contract() &lt;=36) xor&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exists(inc|inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)  and inc.compute_duration_of_contract() &lt;=36) then&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;true&#x9; &#x9;&#x9;&#x9;&#x9;&#xA;&#x9; &#x9;&#x9;&#x9;else&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;ac.deductible_amount=0 &#xA;&#x9; &#x9;&#x9;&#x9;endif&#x9;&#xA;&#x9; &#x9;&#x9;&#x9;&#xA;&#x9; &#x9;&#x9;else&#xA;&#x9; &#x9;&#x9;&#x9; if taxpayer_income_eligible_type_assisting_spouse=true xor taxpayer_income_eligible_type_assisting_spouse=true then&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;if (taxpayer_personnaly_affiliated_to_social_security=true and spouse_personnaly_affiliated_to_social_security = false)  xor &#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;(taxpayer_personnaly_affiliated_to_social_security=false and spouse_personnaly_affiliated_to_social_security = true) then&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;else&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;ac.deductible_amount=0&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9; else&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;ac.deductible_amount =0 &#xA;&#x9;&#x9;&#x9; endif&#xA;&#x9; &#x9;endif&#xA;&#x9; endif&#xA;/**NAVIGATIONS&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;self.income_Tax_Deduction->&#xA;self.incomeTax.tax_year&#xA;self.legal_union_A->select&#xA;self.incomes->exists&#xA;spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->exists&#xA;self.incomes->exists(i&#xA;spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->&#xA;self.incomes->exists(&#xA;inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)&#xA;spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->&#xA;inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)**/</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_gNCCZ5OXEeS0vu9n5JWWng" name="TaxDeduction-DS-1-permanent_expense" constrainedElement="_gNCCUpOXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCCaJOXEeS0vu9n5JWWng">
            <language>OCL</language>
            <body>let &#xA;permanent_expense: Set(Expense_Concepts::Expense) = self.expenses->select(expense|expense.oclIsTypeOf(Expense_Concepts::Permanent_Expense) and expense.year_expense_was_incurred_in=self.incomeTax.tax_year),&#xA;alimony: Set(Expense_Concepts::Expense) = permanent_expense->select(alimony|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;alimony.oclAsType(Expense_Concepts::Permanent_Expense).category = Expense_Concepts::Category_of_Permanent_Expense::ALIMONY and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;alimony.oclAsType(Expense_Concepts::Permanent_Expense).is_eligible_for_deduction = true),&#xA;debt: Set(Expense_Concepts::Expense) = permanent_expense->select(debt|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;debt.oclAsType(Expense_Concepts::Permanent_Expense).category = Expense_Concepts::Category_of_Permanent_Expense::MISCELLANEOUS_DEBT),&#xA;ds_alimony: Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense).permanent_expense_category =  Expense_Concepts::Category_of_Permanent_Expense::ALIMONY and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense),&#xA;tax_liability : Integer = self.incomes.tax_liability->sum(),&#xA;ds_debt: Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense).permanent_expense_category =  Expense_Concepts::Category_of_Permanent_Expense::MISCELLANEOUS_DEBT and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense)&#xA;&#x9;   in&#x9;&#xA;&#xA;if permanent_expense->size()>0 then&#xA;&#x9;if debt->size()>0 then&#xA;&#x9;&#x9;ds_debt.deductible_amount = debt.declared_amount->sum()/2 * tax_liability&#xA;&#x9;else&#xA;&#x9;&#x9;false&#xA;&#x9;endif and&#xA;&#x9;if alimony->size()>0 then&#xA;&#x9;&#x9;alimony->forAll(al|self.is_separated_from(al.dependent)=true)&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;let sum_alimony: Integer = alimony.declared_amount->sum() * tax_liability in&#xA;&#x9;&#x9;if sum_alimony&lt;=Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ALIMONY_EXPENSE.oclAsType(Integer) then&#xA;&#x9;&#x9;&#x9;ds_alimony.deductible_amount = sum_alimony&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;ds_alimony.deductible_amount = Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ALIMONY_EXPENSE.oclAsType(Integer) &#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif&#xA;&#xA;/**NAVIGATION&#xA;self.expenses->select&#xA;self.incomeTax.tax_year&#xA;self.income_Tax_Deduction->select&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;al.dependent**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_gNCCaZOXEeS0vu9n5JWWng" name="TaxDeduction-DS-2-interest_expense" constrainedElement="_gNCCUpOXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCCapOXEeS0vu9n5JWWng">
            <language>OCL</language>
            <body>self.incomes->forAll(inc |&#xA;&#xA;if (inc.end_date_within_taxation_year = self.incomeTax.tax_year) then&#xA;&#xA;let &#xA;interest_expense: Set(Expense_Concepts::Expense) = inc.expenses->select(expense|expense.oclIsTypeOf(Expense_Concepts::Interest_Expense) and expense.year_expense_was_incurred_in=self.incomeTax.tax_year),&#xA;ds_interest_expense: Income_Tax_Deduction_Concepts::DS_for_Interest_Expense = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Interest_Expense) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.expenses->includesAll(interest_expense) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Interest_Expense),&#xA;dependent_children_with_allowances: Set(Dependent) = self.dependents->select(deps|deps.compute_if_dependent_receives_allowances_eligible_for_DS() =true),&#xA;tax_liability : Integer =inc.tax_liability in &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;if interest_expense->size()>0 then&#xA;&#x9;let sum_interest_expense: Integer = interest_expense.declared_amount->sum() in&#xA;&#x9;if sum_interest_expense&lt;=ds_interest_expense.maximum_deductible_amount then&#xA;&#x9;&#xA;&#x9;&#x9;ds_interest_expense.deductible_amount = sum_interest_expense * tax_liability&#xA;&#x9;else&#xA;&#x9;&#x9;ds_interest_expense.deductible_amount = ds_interest_expense.maximum_deductible_amount * tax_liability&#x9;&#x9;&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif&#xA;else&#xA;false&#xA;endif&#xA;)&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_gNCCa5OXEeS0vu9n5JWWng" name="TaxDeduction-DS-3-health_and_pension_insurance" constrainedElement="_gNCCUpOXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCCbJOXEeS0vu9n5JWWng">
            <language>OCL</language>
            <body>self.incomes->forAll( inc | &#xA;&#xA;let &#xA;mandatory_health_and_pension_insurance: Set(Expense_Concepts::Expense) = inc.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Health_and_Pension_Insurance).category =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::MANDATORY_HEALTH_AND_PENSION_INSURANCE&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Health_and_Pension_Insurance).is_related_to_additional_salary=true),&#xA;additional_pension_insurance: Set(Expense_Concepts::Expense) = inc.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Health_and_Pension_Insurance).category =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::ADDITIONAL_EMPLOYERS_PENSION_INSURANCE),&#xA;continued_health_and_pension_insurance: Set(Expense_Concepts::Expense) = inc.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Health_and_Pension_Insurance).category =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::CONTINUED_HEALTH_AND_PENSION_INSURANCE),&#xA;ds_mandatory_health_and_pension : Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance).insurance_category = &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::MANDATORY_HEALTH_AND_PENSION_INSURANCE and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year and type.expenses->includesAll(mandatory_health_and_pension_insurance)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance),&#xA;ds_additional_pension_insurance : Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance).insurance_category = &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::ADDITIONAL_EMPLOYERS_PENSION_INSURANCE and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and type.expenses->includesAll(additional_pension_insurance)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance),&#xA;ds_continued_health_and_pension_insurance : Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance).insurance_category = &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::CONTINUED_HEALTH_AND_PENSION_INSURANCE and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and type.expenses->includesAll(continued_health_and_pension_insurance)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance),&#xA;tax_liability : Integer = inc.tax_liability  in &#xA;&#xA;if mandatory_health_and_pension_insurance->size()>0 then&#xA;&#x9;if inc.oclIsTypeOf(Income_Concepts::Employment_Income) then&#xA;&#x9;let sum_mandatory_health_and_pension_insurance : Integer = mandatory_health_and_pension_insurance.declared_amount->sum() in&#xA;&#x9;&#x9;ds_mandatory_health_and_pension.deductible_amount = sum_mandatory_health_and_pension_insurance&#xA;&#x9;else&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif &#xA;and&#xA;if additional_pension_insurance->size()>0 then&#xA;&#x9;if inc.oclIsTypeOf(Income_Concepts::Employment_Income) then&#xA;&#x9;let sum_additional_pension_insurance : Integer = additional_pension_insurance.declared_amount->sum() in&#xA;&#x9;&#x9;if&#x9;sum_additional_pension_insurance &lt;= Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ADDITIONAL_PENSION_AND_INSURANCE.oclAsType(Integer) then&#xA;&#x9;&#x9;&#x9;ds_additional_pension_insurance.deductible_amount = sum_additional_pension_insurance&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;ds_additional_pension_insurance.deductible_amount = Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ADDITIONAL_PENSION_AND_INSURANCE.oclAsType(Integer)&#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif and&#xA;if continued_health_and_pension_insurance->size()>0 then&#xA;&#x9;let sum_continued_health_and_pension_insurance : Integer = continued_health_and_pension_insurance.declared_amount->sum() in&#xA;&#x9;&#x9;ds_continued_health_and_pension_insurance.deductible_amount = tax_liability * sum_continued_health_and_pension_insurance&#xA;else&#xA;&#x9;false&#xA;endif&#xA;)&#xA;&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_gNCCbZOXEeS0vu9n5JWWng" name="TaxDeduction-DS-4-private_insurance_and_plan" constrainedElement="_gNCCUpOXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCCbpOXEeS0vu9n5JWWng">
            <language>OCL</language>
            <body>let &#xA;insurance_and_plan: Set(Expense_Concepts::Expense) = self.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).category &lt;>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::OLD_AGE_PENSION_PLAN&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).category &lt;>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::PRIVATE_LIFE_INSURANCE&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).is_private_insurance_and_plan_eligible_for_deduction=true),&#xA;life_insurance: Set(Expense_Concepts::Expense) = self.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).category =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::PRIVATE_LIFE_INSURANCE&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).is_private_insurance_and_plan_eligible_for_deduction=true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).duration_of_contract >=10),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;old_age_pension_plan: Set(Expense_Concepts::Expense) = self.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).category =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::OLD_AGE_PENSION_PLAN&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).is_private_insurance_and_plan_eligible_for_deduction=true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).duration_of_contract >=10),&#xA;ds_private_insurance_and_plan: Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan).private_insurance_and_plan_category &lt;> &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::OLD_AGE_PENSION_PLAN and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan),&#xA;ds_old_age_pension_plan: Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan).private_insurance_and_plan_category = &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::OLD_AGE_PENSION_PLAN and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan),&#xA;tax_liability : Integer = self.incomes.tax_liability->sum() in&#xA;&#xA;if insurance_and_plan->size()>0 then&#xA;&#xA;let sum_insurance_and_plan : Integer = insurance_and_plan.declared_amount->sum() + life_insurance.declared_amount->sum() + &#xA;      &#x9;&#x9;&#x9;ds_private_insurance_and_plan.increase_for_life_insurance in&#xA;&#x9;&#x9;&#xA;if&#x9;sum_insurance_and_plan &lt;= ds_private_insurance_and_plan.maximum_deductible_amount_for_private_insurance then&#xA;&#x9;&#x9;&#x9;ds_private_insurance_and_plan.deductible_amount = sum_insurance_and_plan&#xA;&#x9;else&#xA;&#x9;&#x9;&#x9;ds_private_insurance_and_plan.deductible_amount = ds_private_insurance_and_plan.maximum_deductible_amount_for_private_insurance&#x9;&#x9;&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif&#xA;&#xA;and&#xA;&#xA;if old_age_pension_plan->size()>0 then&#xA;let sum_old_age_pension_plan : Integer = old_age_pension_plan.declared_amount->sum() in&#xA;&#x9;if&#x9;sum_old_age_pension_plan &lt;= ds_old_age_pension_plan.maximum_deductible_amount_for_old_age_pension_plan then&#xA;&#x9;&#x9;&#x9;ds_old_age_pension_plan.deductible_amount = sum_old_age_pension_plan&#xA;&#x9;else&#xA;&#x9;&#x9;&#x9;ds_old_age_pension_plan.deductible_amount = ds_old_age_pension_plan.maximum_deductible_amount_for_private_insurance&#x9;&#x9;&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif&#xA;&#xA;/**NAVIGATIONS&#xA;self.expenses->&#xA;self.incomeTax.tax_year&#xA;self.expenses->&#xA;self.incomeTax.tax_year->&#xA;self.expenses->&#xA;self.incomeTax.tax_year&#xA;self.income_Tax_Deduction->select&#xA;self.incomeTax.tax_year&#xA;**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_gNCCb5OXEeS0vu9n5JWWng" name="TaxDeduction-DS-5-donation" constrainedElement="_gNCCUpOXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCCcJOXEeS0vu9n5JWWng">
            <language>OCL</language>
            <body>let &#xA;donations: Set(Expense_Concepts::Expense) = self.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Donation)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;or expense.oclAsType(Expense_Concepts::Donation).is_donation_reported = true)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Donation).is_beneficiary_eligible=true),&#xA;ds_donation: Income_Tax_Deduction_Concepts::DS_for_Donation = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Donation) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Donation) in &#x9;&#x9;&#x9;&#x9;&#x9;&#xA;if donations->size()>0 then&#xA;&#x9;let sum_donation: Integer = donations.declared_amount->sum() in&#xA;&#x9;if sum_donation >= Constants::MINIMUM_DEDUCTIBLE_AMOUNT_FOR_DONATIONS.oclAsType(Integer) then&#xA;&#x9;&#x9;if sum_donation &lt;= ds_donation.maximum_deductible_amount then&#xA;&#x9;&#x9;ds_donation.deductible_amount = sum_donation&#xA;&#x9;else&#xA;&#x9;&#x9;ds_donation.deductible_amount = ds_donation.maximum_deductible_amount&#xA;&#x9;endif&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif&#xA;&#xA; </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_gNCCcZOXEeS0vu9n5JWWng" name="TaxDeduction-DS-6-loss_carryforward" constrainedElement="_gNCCUpOXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCCcpOXEeS0vu9n5JWWng">
            <language>OCL</language>
            <body>self.incomes->forAll( inc | &#xA;&#xA;                            if (&#xA;                            &#x9;&#x9;(inc.income_type.oclIsTypeOf(Income_Concepts::Agriculture_and_Forestry_Income) or&#xA;                            &#x9;&#x9;inc.income_type.oclIsTypeOf(Income_Concepts::Independent_Professional_Services_Income) or&#xA;                                inc.income_type.oclIsTypeOf(Income_Concepts::Trade_and_Business_Income))&#xA;                               and (inc.end_date_within_taxation_year = self.incomeTax.tax_year)) then /**PUT &lt;, when deciding how to model Date or how to use &quot;&lt;&quot; with the Marte Profile **/&#xA;                               let&#xA;                                 &#x9;losses: Set(Expense_Concepts::Expense) = inc.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Loss_Carryforward) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).regular_accountability = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).compensation_by_other_means=false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).tax_payer_has_been_partner_in_business = false),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;losses_successor: Set(Expense_Concepts::Expense) = inc.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Loss_Carryforward) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).regular_accountability = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).compensation_by_other_means=false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).tax_payer_has_been_partner_in_business = true &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).tax_payer_has_inherited_business_ownership = true),&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ds_loss: Income_Tax_Deduction_Concepts::DS_for_Loss_Carryforward = losses.deduction->select(type| &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Loss_Carryforward) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Loss_Carryforward) in &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(inc.end_date_within_taxation_year = 1990) then /**PUT &lt;, when deciding how to model Date or how to use &quot;&lt;&quot; with the Marte Profile **/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;if losses.declared_amount->sum()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ds_loss.deductible_amount =  losses.declared_amount->sum()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if losses_successor.declared_amount->sum() >0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ds_loss.deductible_amount = losses_successor.declared_amount->sum() &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ds_loss.deductible_amount = 0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; else &#xA;                                &#x9;&#x9; false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif)&#xA;&#xA;/**NAVIGATIONS:&#xA;self.incomes->&#xA;inc.expenses->&#xA;inc.expenses->&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;losses.deduction->&#xA;inc.income_type&#xA;inc.income_type&#xA;inc.income_type&#xA;**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_gNCCc5OXEeS0vu9n5JWWng" name="TaxCard-unique-constraint" constrainedElement="_gNCCUpOXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCCdJOXEeS0vu9n5JWWng">
            <language>OCL</language>
            <body>self.incomes->forAll(income|income.tax_card->select(tc|tc.validity=true)->size() &lt;= 1)&#xA;/**THE INCOME CAN HAVE AT MOST ONE VALID TAX CARD, IF THE CONTRACT HAS ENDED THAN IT IS ZERO VALID**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_gNCCdZOXEeS0vu9n5JWWng" name="TaxDeduction-FD-constraint" constrainedElement="_gNCCUpOXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCCdpOXEeS0vu9n5JWWng">
            <language>OCL</language>
            <body>self.incomes->forAll(income|&#xA;&#xA;&#x9;let &#xA;&#x9;&#x9;fd_expenses : Set(Expense_Concepts::Expense)= self.expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Travel_Expense_FD) and&#xA;&#x9;&#x9;&#x9;exp.year_expense_was_incurred_in=self.incomeTax.tax_year),&#xA;&#x9;&#x9;declared_amount : Integer = fd_expenses.declared_amount->sum(),&#xA;&#x9;&#x9;a_FD:Income_Tax_Deduction_Concepts::FD= self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::FD) and type.tax_year=self.incomeTax.tax_year and&#xA;&#x9;&#x9;&#x9;type.expenses->includesAll(fd_expenses))->any(true).oclAsType(Income_Tax_Deduction_Concepts::FD) in&#xA;&#xA;if ((income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) or&#xA;income.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or&#xA;income.income_type.oclIsTypeOf(Income_Concepts::Rentals_and_Leases_Income)) and&#xA;income.start_date_within_taxation_year = self.incomeTax.tax_year) then&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#xA;&#x9;&#x9;if  (a_FD.calculated_distance>a_FD.distance_declared_in_january) then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if  (a_FD.calculated_distance>Constants::MINIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;if (a_FD.calculated_distance>Constants::MAXIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/**MAXIMAL FLAT DISTANCE FOR TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;a_FD.deductible_amount = Constants::FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT.oclAsType(Integer) * Constants::MAXIMAL_FLAT_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/**REAL DISTANCE FOR TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;a_FD.deductible_amount = Constants::FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT.oclAsType(Integer) * a_FD.calculated_distance&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;/**NO TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;a_FD.deductible_amount = 0&#xA;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/*NO CHANGES FOR FD, TRAVEL EXPENSE IS ALREADY DEDUCED FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;endif&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;a_FD.yearly=  a_FD.deductible_amount and&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;a_FD.monthly = a_FD.deductible_amount/12 and&#xA;&#x9;&#x9;a_FD.daily = a_FD.monthly/24&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE FD FOR TRAVEL EXPENSE, THERE IS NO INCOME TYPE ELIGIBLE FOR FD**/&#xA;&#x9;&#x9;a_FD.deductible_amount = 0&#xA;&#x9;endif&#xA;)&#xA;&#xA;&#xA;/** NAVIGATIONS&#xA;self.incomes&#xA;self.expenses&#xA;self.incomeTax&#xA;self.income_Tax_Deduction&#xA;type.expenses&#xA;income.income_type&#xA;income.income_type&#xA;income.income_type&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_gNCmYJOXEeS0vu9n5JWWng" name="TaxDeduction-FO-constraint" constrainedElement="_gNCCUpOXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCmYZOXEeS0vu9n5JWWng">
            <language>OCL</language>
            <body>self.incomes->forAll(income| &#xA;let &#xA;&#x9; fo_expenses : Set(Expense_Concepts::Expense) = income.expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Miscellaneous_Expense_FO) and exp.year_expense_was_incurred_in = self.incomeTax.tax_year),&#xA;&#x9; declared_expense:Integer=fo_expenses.declared_amount->sum(),&#xA;&#x9; set_of_FO: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|type.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO) &#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and type.tax_year=self.incomeTax.tax_year&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and type.expenses->includesAll(fo_expenses)),&#xA;&#x9; size_set_of_FO:Integer = set_of_FO->size(),&#xA;&#x9; a_FO:Income_Tax_Deduction_Concepts::FO=set_of_FO->any(true).oclAsType(Income_Tax_Deduction_Concepts::FO),&#xA;&#x9; income_type_for_taxpayer_authorized_for_FO : Boolean = ((income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) or&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.income_type.oclIsTypeOf(Income_Concepts::Rentals_and_Leases_Income)) and&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.start_date_within_taxation_year = self.incomeTax.tax_year)&#x9; in&#xA;if size_set_of_FO>1 then&#xA;&#x9;/**TAX PAYER CANNOT RECEIVE MORE THAN ONE FO PER INCOME AND EXPENSES ATTACHED TO THE INCOME**/&#xA;&#x9;false&#xA;else&#xA;&#x9;if income_type_for_taxpayer_authorized_for_FO = true then&#xA;&#x9;&#x9;if(not self.taxed_jointly) then &#xA;&#x9;&#x9;&#x9;if(declared_expense> Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;a_FO.rate_type_for_FO = Type_of_Rate::REAL_COST&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;a_FO.rate_type_for_FO = Type_of_Rate::REGULAR&#xA;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/**FLAT RATE OR REAL COSTS DEFINED BY JOINT TAXATION**/&#xA;&#x9;&#x9;&#x9;/*do we want to care about this, or up to the agent to decide*/&#xA;&#x9;&#x9;&#x9;let spouse_FO: Income_Tax_Deduction_Concepts::FO =  self.legal_union_A.individual_B.oclAsType(Tax_Payer).income_Tax_Deduction->&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select(type|type.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO))->any(true).oclAsType(Income_Tax_Deduction_Concepts::FO),&#xA;&#x9;&#x9;&#x9;&#x9; spouse_declared_expense:Integer=self.legal_union_A.individual_B.oclAsType(Tax_Payer).expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Miscellaneous_Expense_FO))->any(true).declared_amount in&#xA;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;(a_FO.rate_type_for_FO = Type_of_Rate::REAL_COST and declared_expense> Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer) and spouse_FO.rate_type_for_FO = Type_of_Rate::REGULAR) xor&#xA;&#x9;&#x9;&#x9;(a_FO.rate_type_for_FO = Type_of_Rate::REGULAR and spouse_FO.rate_type_for_FO = Type_of_Rate::REAL_COST and  spouse_declared_expense>Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)) &#xA;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if (a_FO.rate_type_for_FO = Type_of_Rate::REGULAR) then&#xA;&#x9;&#x9;&#x9;/*FLAT RATE FOR FO EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;a_FO.oclAsType(Income_Tax_Deduction_Concepts::Income_Tax_Deduction).deductible_amount = Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)+Constants::DISABILITY_FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/**REAL COST FOR FO EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;a_FO.deductible_amount = declared_expense+Constants::DISABILITY_FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)&#xA;&#xA;&#x9;&#x9;endif&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;a_FO.yearly=  a_FO.deductible_amount and&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;a_FO.monthly = a_FO.deductible_amount/12 and&#xA;&#x9;&#x9;a_FO.daily = a_FO.monthly/24&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE FO, THERE IS NO INCOME TYPE ELIGIBLE FOR FO**/&#xA;&#x9;&#x9;a_FO.deductible_amount = 0&#xA;&#x9;endif&#xA;endif&#xA;)&#xA;&#xA;/**NAVIGATION &#xA;&#xA;self.income_Tax_Deduction->select(type|type.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO) and type.tax_year=self.incomeTax.tax_year),&#xA;self.incomeTax.tax_year&#xA;self.incomes->select(income&#xA;income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)&#xA;income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)&#xA;income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)&#xA;self.expenses->select(exp&#xA;self.legal_union_A.individual_B.oclAsType(Tax_Payer).income_Tax_Deduction->&#xA;self.legal_union_A.individual_B.oclAsType(Tax_Payer).expenses->selec&#xA;a_FO.oclAsType(Income_Tax_Deduction_Concepts::Income_Tax_Deduction).tax_year&#xA;&#xA;&#xA;**/</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_gNCmYpOXEeS0vu9n5JWWng" name="NEW_TaxDeduction-CE-INVALIDITY" constrainedElement="_gNCCUpOXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCmY5OXEeS0vu9n5JWWng">
            <language>OCL</language>
            <body>let set_of_CE: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::CE) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year),&#xA;&#x9; CE_invalidity:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::INALIDITY_AND_INFIRMITY),&#xA;&#x9;income_subject_to_witholding_tax : Set(Income_Concepts::Income) = self.incomes->select(income|income.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not income.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.start_date_within_taxation_year = self.incomeTax.tax_year),&#xA; &#x9; extraordinary_expenses : &#x9;Set(Expense_Concepts::Expense) = self.expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclIsTypeOf(Expense_Concepts::Extraordinary_Expense_CE)),&#x9;&#xA; &#x9; extraordinary_expense_invalidity_and_infirmity  : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::INALIDITY_AND_INFIRMITY),&#x9;&#xA;&#x9; declared_expense:Integer=extraordinary_expense_invalidity_and_infirmity.declared_amount->sum() in&#xA;&#x9;if (income_subject_to_witholding_tax->size()>0) then&#xA;&#x9;&#x9;if (extraordinary_expenses->any(true).oclAsType(Expense_Concepts::Extraordinary_Expense_CE).is_above_thresholded_deduction_percentage_for_CE()=true) then&#xA;&#x9;&#x9;&#x9;if extraordinary_expense_invalidity_and_infirmity->size()>0 then &#xA;&#x9;&#x9;&#x9;&#x9;if self.oclIsTypeOf(Resident_Tax_Payer) then&#xA;&#x9;&#x9;&#x9;&#x9;/**CE FOR INVALIDITY AND INFIRMITY ON THE TAX CARD**/&#xA;&#x9;&#x9;&#x9;&#x9;CE_invalidity->size() = 1&#x9;and&#xA;&#x9;&#x9;&#x9;&#x9;CE_invalidity->any(true).deductible_amount = CE_invalidity->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).disability_flat_rate&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;endif&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;false&#xA;&#x9;&#x9;endif&#x9;&#xA;else&#xA;false&#xA;endif&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_gNCmZJOXEeS0vu9n5JWWng" name="NEW_TaxDeduction-CE-DEPENDENCE-AND-CARE" constrainedElement="_gNCCUpOXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCmZZOXEeS0vu9n5JWWng">
            <language>OCL</language>
            <body>let set_of_CE: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::CE) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year),&#xA;&#x9; CE_dependence:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD),&#xA;&#x9; income_subject_to_witholding_tax : Set(Income_Concepts::Income) = self.incomes->select(income|income.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not income.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.start_date_within_taxation_year = self.incomeTax.tax_year),&#xA; &#x9; extraordinary_expenses : &#x9;Set(Expense_Concepts::Expense) = self.expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclIsTypeOf(Expense_Concepts::Extraordinary_Expense_CE)),&#x9;&#xA; &#x9; extraordinary_expense_dependence_and_care : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD), &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9; declared_expense:Integer=extraordinary_expense_dependence_and_care.declared_amount->sum() in&#xA;&#x9; &#xA;&#x9;if (income_subject_to_witholding_tax->size()>0) then&#xA;&#x9;&#x9;if (extraordinary_expenses->any(true).oclAsType(Expense_Concepts::Extraordinary_Expense_CE).is_above_thresholded_deduction_percentage_for_CE()=true) then&#xA;&#x9;&#x9;&#x9;&#x9;if  extraordinary_expense_dependence_and_care ->size()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->size()=1 and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;let &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expenses_for_dependence_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::DEPENDENCE_CARE) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; expenses_for_house_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|expense.expense_purpose=Expense_Purpose::HOUSE_CARE) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; expenses_for_child_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::CHILD_CARE),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;amount_house_care: Integer = expenses_for_house_care.declared_amount->sum(),&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sum_of_expenses:Integer =  expenses_for_child_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.compute_if_dependent_receives_allowances_eligible_for_CE_dependance_and_care() =true and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.dependent_type=Dependent_Type::CHILD and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(expense.dependent.oclAsType(Physical_Person).age&lt;14) or&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.oclAsType(Physical_Person).disability_percentage>0).declared_amount->sum() in&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(expenses_for_child_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CHILD CARE, CHILDREN BEING PART OF THE HOUSHOLD**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(amount_house_care + sum_of_expenses)>Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(expenses_for_dependence_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CLOSE RELATIVE DEPENDENCE CARE**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount = Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer)+ CE_dependence->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).dependent_relative_flat_rate&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;CE_dependence->any(true).deductible_amount = Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(expenses_for_dependence_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CLOSE RELATIVE DEPENDENCE CARE**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount= amount_house_care + sum_of_expenses + CE_dependence->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).dependent_relative_flat_rate&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount= amount_house_care + sum_of_expenses&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   endif &#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;endif&#x9;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CE, NOT SUBJECT TO WITHOLDING**/&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#x9;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_gNCmZpOXEeS0vu9n5JWWng" name="NEW_TaxDeduction-CE-DEPENDENCE-AND-CARE-CHILDREN-NOT-PART-OF-HOUSEHOLD" constrainedElement="_gNCCUpOXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCmZ5OXEeS0vu9n5JWWng">
            <language>OCL</language>
            <body>let set_of_CE: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::CE) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year),&#xA;&#x9; CE_child_not_part_of_household:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::CARE_FOR_CHILDREN_NOT_BEING_PART_OF_HOUSEHOLD),&#xA;&#x9; income_subject_to_witholding_tax : Set(Income_Concepts::Income) = self.incomes->select(income|income.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not income.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.start_date_within_taxation_year = self.incomeTax.tax_year),&#xA; &#x9; extraordinary_expenses : &#x9;Set(Expense_Concepts::Expense) = self.expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclIsTypeOf(Expense_Concepts::Extraordinary_Expense_CE)),&#x9;&#xA; &#x9; extraordinary_expense_care_for_children_not_part_of_the_household : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::CARE_FOR_CHILDREN_NOT_BEING_PART_OF_HOUSEHOLD),  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#xA;&#x9; declared_expense:Integer=extraordinary_expense_care_for_children_not_part_of_the_household.declared_amount->sum() in&#xA;&#x9; &#x9; &#xA;&#x9;if (income_subject_to_witholding_tax->size()>0) then&#xA;&#x9;&#x9;if (extraordinary_expenses->any(true).oclAsType(Expense_Concepts::Extraordinary_Expense_CE).is_above_thresholded_deduction_percentage_for_CE()=true) then&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;     if  CE_child_not_part_of_household->size()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; CE_child_not_part_of_household->size()= 1 and&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CARE FOR CHILDREN NOT BEING PART OF THE HOUSEHOLD**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;let&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expenses_for_child_not_part_of_houselod_care: Set(Expense_Concepts::Expense) = self.expenses->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::CHILD_CARE),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;sum_expenses_for_children:Integer = expenses_for_child_not_part_of_houselod_care->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.compute_if_dependent_receives_allowances_eligible_for_CE_dependance_and_care() =false and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;((expense.dependent.age&lt;=21) or&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(expense.dependent.age>21 and expense.dependent.continued_studies=true and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.tax_Payer.incomes.income_amount->sum()&lt;0.6*Constants::MINIMUM_SALARY.oclAsType(Integer)))).declared_amount->sum() in&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(sum_expenses_for_children>Constants::MAXIMUM_CE_RATE_FOR_CHILD_NOT_BEING_PART_OF_HOUSEHOLD.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;CE_child_not_part_of_household->any(true).deductible_amount  = Constants::MAXIMUM_CE_RATE_FOR_CHILD_NOT_BEING_PART_OF_HOUSEHOLD.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_child_not_part_of_household->any(true).deductible_amount = sum_expenses_for_children&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CE, NOT SUBJECT TO WITHOLDING**/&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#x9;</body>
          </specification>
        </ownedRule>
        <generalization xmi:id="_gNCmaJOXEeS0vu9n5JWWng" general="_gNCCK5OXEeS0vu9n5JWWng"/>
        <ownedAttribute xmi:id="_gNCmaZOXEeS0vu9n5JWWng" name="incomes" visibility="private" type="_gNCm0ZOXEeS0vu9n5JWWng" association="_gNCndZOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCmapOXEeS0vu9n5JWWng" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCma5OXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCmbJOXEeS0vu9n5JWWng" name="incomeTax" visibility="private" type="_gNCB15OXEeS0vu9n5JWWng" association="_gNCmnpOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCmbZOXEeS0vu9n5JWWng" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCmbpOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCmb5OXEeS0vu9n5JWWng" name="income_Tax_Credit" visibility="private" type="_gNCoM5OXEeS0vu9n5JWWng" association="_gNCnfZOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCmcJOXEeS0vu9n5JWWng" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCmcZOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCmcpOXEeS0vu9n5JWWng" name="tax_class" visibility="private" type="_gNCmn5OXEeS0vu9n5JWWng" association="_gNCB1pOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCmc5OXEeS0vu9n5JWWng" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCmdJOXEeS0vu9n5JWWng" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCmdZOXEeS0vu9n5JWWng" name="household" visibility="private" type="_gNCCEpOXEeS0vu9n5JWWng" association="_gNCmmZOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCmdpOXEeS0vu9n5JWWng" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCmd5OXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCmeJOXEeS0vu9n5JWWng" name="dependents" visibility="private" type="_gNCB5pOXEeS0vu9n5JWWng" association="_gNCmm5OXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCmeZOXEeS0vu9n5JWWng" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCmepOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCme5OXEeS0vu9n5JWWng" name="income_Tax_Deduction" visibility="private" type="_gNCoqZOXEeS0vu9n5JWWng" association="_gNCnoZOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCmfJOXEeS0vu9n5JWWng" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCmfZOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCmfpOXEeS0vu9n5JWWng" name="taxed_jointly" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCmf5OXEeS0vu9n5JWWng" name="expenses" visibility="private" type="_gNCnXZOXEeS0vu9n5JWWng" association="_gNCnopOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCmgJOXEeS0vu9n5JWWng" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCmgZOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCmgpOXEeS0vu9n5JWWng" name="dependent" visibility="private" type="_gNCB5pOXEeS0vu9n5JWWng" association="_gNCmmpOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCmg5OXEeS0vu9n5JWWng" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCmhJOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCmhZOXEeS0vu9n5JWWng" name="tax_Card" visibility="private" type="_gNCn35OXEeS0vu9n5JWWng" aggregation="shared" association="_gNCmlJOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCmhpOXEeS0vu9n5JWWng" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCmh5OXEeS0vu9n5JWWng" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCmiJOXEeS0vu9n5JWWng" name="taxation_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_gOL3oZOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_gNCmiZOXEeS0vu9n5JWWng" name="is_dependent_part_of_the_household" isQuery="true" bodyCondition="_gNCmi5OXEeS0vu9n5JWWng">
          <eAnnotations xmi:id="_gNCmipOXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_gNCmi5OXEeS0vu9n5JWWng" name="is_child_part_of_household" constrainedElement="_gNCmiZOXEeS0vu9n5JWWng">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCmjJOXEeS0vu9n5JWWng">
              <language>OCL</language>
              <body>let responsible_person: Tax_Payer = IN_dependent.responsible_person,&#xA;     household_tax_payer_same_as_respnsible: Boolean = IN_dependent.household.tax_Payer.oclAsType(Physical_Person).SSNo = responsible_person.oclAsType(Physical_Person).SSNo&#xA;in&#xA;if (responsible_person->notEmpty() and household_tax_payer_same_as_respnsible) then&#xA;&#x9;/**THE CHILD IS PART OF THE TAX PAYERS HOUSEHOLD**/&#xA;&#x9;result = true&#xA;else &#xA;&#x9;/**THE CHILD IS NOT PART OF THE TAX PAYERS HOUSEHOLD**/&#xA;&#x9;result = false&#xA;endif&#xA;&#xA;&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_gNCmjZOXEeS0vu9n5JWWng" name="IN_dependent" type="_gNCB5pOXEeS0vu9n5JWWng"/>
          <ownedParameter xmi:id="_gNCmjpOXEeS0vu9n5JWWng" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_gNCmj5OXEeS0vu9n5JWWng" name="number_of_months_of_allowance" isQuery="true" postcondition="_gNCmkZOXEeS0vu9n5JWWng">
          <eAnnotations xmi:id="_gNCmkJOXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_gNCmkZOXEeS0vu9n5JWWng" name="number_od_months_of_allowance" constrainedElement="_gNCmj5OXEeS0vu9n5JWWng">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCmkpOXEeS0vu9n5JWWng">
              <language>OCL</language>
              <body>result = 1&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_gNCmk5OXEeS0vu9n5JWWng" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_gNCmlJOXEeS0vu9n5JWWng" name="" memberEnd="_gNCmhZOXEeS0vu9n5JWWng _gNCoGpOXEeS0vu9n5JWWng"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_gNCmlZOXEeS0vu9n5JWWng" name="located at" memberEnd="_gNCCMpOXEeS0vu9n5JWWng _gNCB3pOXEeS0vu9n5JWWng"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_gNCmlpOXEeS0vu9n5JWWng" name="receives" memberEnd="_gNCCL5OXEeS0vu9n5JWWng _gNCCCZOXEeS0vu9n5JWWng"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_gNCml5OXEeS0vu9n5JWWng" name="person B" memberEnd="_gNCCIpOXEeS0vu9n5JWWng _gNCCOJOXEeS0vu9n5JWWng"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_gNCmmJOXEeS0vu9n5JWWng" name="person A" memberEnd="_gNCCH5OXEeS0vu9n5JWWng _gNCCNZOXEeS0vu9n5JWWng"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_gNCmmZOXEeS0vu9n5JWWng" name="maintains" memberEnd="_gNCmdZOXEeS0vu9n5JWWng _gNCCE5OXEeS0vu9n5JWWng"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_gNCmmpOXEeS0vu9n5JWWng" name="as tax payer" memberEnd="_gNCB9JOXEeS0vu9n5JWWng _gNCmgpOXEeS0vu9n5JWWng"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_gNCmm5OXEeS0vu9n5JWWng" name="supports" memberEnd="_gNCmeJOXEeS0vu9n5JWWng _gNCB7JOXEeS0vu9n5JWWng"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_gNCmnJOXEeS0vu9n5JWWng" name="is part of" memberEnd="_gNCB6ZOXEeS0vu9n5JWWng _gNCCFpOXEeS0vu9n5JWWng"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_gNCmnZOXEeS0vu9n5JWWng" name="incurred over" memberEnd="_gNCnZJOXEeS0vu9n5JWWng _gNCB8ZOXEeS0vu9n5JWWng"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_gNCmnpOXEeS0vu9n5JWWng" name="is subject to" memberEnd="_gNCmbJOXEeS0vu9n5JWWng _gNCB2JOXEeS0vu9n5JWWng"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCmn5OXEeS0vu9n5JWWng" name="Tax_Class">
        <ownedAttribute xmi:id="_gNCmoJOXEeS0vu9n5JWWng" name="tax_class" visibility="public" type="_gNCnkJOXEeS0vu9n5JWWng"/>
        <ownedAttribute xmi:id="_gNCmoZOXEeS0vu9n5JWWng" name="tax_Payer" visibility="private" type="_gNCCUpOXEeS0vu9n5JWWng" association="_gNCB1pOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCmopOXEeS0vu9n5JWWng" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCmo5OXEeS0vu9n5JWWng" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCmpJOXEeS0vu9n5JWWng" name="valid_from_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_gOL3oZOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCmpZOXEeS0vu9n5JWWng" name="valid_until_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_gOL3oZOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCmppOXEeS0vu9n5JWWng" name="tax_card" visibility="private" type="_gNCn35OXEeS0vu9n5JWWng" association="_gNCnoJOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCmp5OXEeS0vu9n5JWWng" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCmqJOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCmqZOXEeS0vu9n5JWWng" name="current_tax_class" visibility="private" type="_gNCmn5OXEeS0vu9n5JWWng" association="_gNCmr5OXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCmqpOXEeS0vu9n5JWWng" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCmq5OXEeS0vu9n5JWWng" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCmrJOXEeS0vu9n5JWWng" name="prev" visibility="private" type="_gNCmn5OXEeS0vu9n5JWWng" association="_gNCmr5OXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCmrZOXEeS0vu9n5JWWng" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCmrpOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_gNCmr5OXEeS0vu9n5JWWng" name="replaced by" memberEnd="_gNCmqZOXEeS0vu9n5JWWng _gNCmrJOXEeS0vu9n5JWWng"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_gNCmsJOXEeS0vu9n5JWWng" name="Income_Concepts">
      <ownedComment xmi:id="_gNCmsZOXEeS0vu9n5JWWng" annotatedElement="_gNCmy5OXEeS0vu9n5JWWng">
        <body>&lt;p> Art.91, alinea 1, numero 2&lt;/p></body>
      </ownedComment>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCmspOXEeS0vu9n5JWWng" name="Income_Type">
        <ownedAttribute xmi:id="_gNCms5OXEeS0vu9n5JWWng" name="subjectToWithholdingTax" visibility="private">
          <ownedComment xmi:id="_gNCmtJOXEeS0vu9n5JWWng" annotatedElement="_gNCms5OXEeS0vu9n5JWWng">
            <body>&lt;p>The&amp;nbsp;following&amp;nbsp;types&amp;nbsp;of&amp;nbsp;income&amp;nbsp;are&amp;nbsp;subject&amp;nbsp;to&amp;nbsp;withholding&amp;nbsp;tax:&lt;/p>&lt;p>Employment&lt;/p>&lt;p>Pensions&amp;nbsp;and&amp;nbsp;Annuities&lt;/p>&lt;p>Investments&amp;nbsp;(not&amp;nbsp;all&amp;nbsp;types&amp;nbsp;might&amp;nbsp;be&amp;nbsp;subject&amp;nbsp;to&amp;nbsp;withholding.&amp;nbsp;The&amp;nbsp;types&amp;nbsp;subject&amp;nbsp;to&amp;nbsp;withholding&amp;nbsp;have&amp;nbsp;been&amp;nbsp;elaborated&amp;nbsp;on&amp;nbsp;page&amp;nbsp;15&amp;nbsp;of&amp;nbsp;the&amp;nbsp;memento)&lt;/p>&lt;p>&lt;/p></body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/EcorePrimitiveTypes.library.uml#EBoolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCmtZOXEeS0vu9n5JWWng" name="income" visibility="private" type="_gNCm0ZOXEeS0vu9n5JWWng" association="_gNCmzJOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCmtpOXEeS0vu9n5JWWng" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCmt5OXEeS0vu9n5JWWng"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCmuJOXEeS0vu9n5JWWng" name="Trade_and_Business_Income">
        <generalization xmi:id="_gNCmuZOXEeS0vu9n5JWWng" general="_gNCmspOXEeS0vu9n5JWWng"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCmupOXEeS0vu9n5JWWng" name="Agriculture_and_Forestry_Income">
        <generalization xmi:id="_gNCmu5OXEeS0vu9n5JWWng" general="_gNCmspOXEeS0vu9n5JWWng"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCmvJOXEeS0vu9n5JWWng" name="Independent_Professional_Services_Income">
        <generalization xmi:id="_gNCmvZOXEeS0vu9n5JWWng" general="_gNCmspOXEeS0vu9n5JWWng"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCmvpOXEeS0vu9n5JWWng" name="Pensions_and_Annuities_Income">
        <generalization xmi:id="_gNCmv5OXEeS0vu9n5JWWng" general="_gNCmspOXEeS0vu9n5JWWng"/>
        <ownedAttribute xmi:id="_gNCmwJOXEeS0vu9n5JWWng" name="occasional_payement" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_gNCmwZOXEeS0vu9n5JWWng">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCmwpOXEeS0vu9n5JWWng" name="Capital_and_Investments_Income">
        <generalization xmi:id="_gNCmw5OXEeS0vu9n5JWWng" general="_gNCmspOXEeS0vu9n5JWWng"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCmxJOXEeS0vu9n5JWWng" name="Employment_Income">
        <generalization xmi:id="_gNCmxZOXEeS0vu9n5JWWng" general="_gNCmspOXEeS0vu9n5JWWng"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCmxpOXEeS0vu9n5JWWng" name="Rentals_and_Leases_Income">
        <generalization xmi:id="_gNCmx5OXEeS0vu9n5JWWng" general="_gNCmspOXEeS0vu9n5JWWng"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCmyJOXEeS0vu9n5JWWng" name="Sundry_Income">
        <generalization xmi:id="_gNCmyZOXEeS0vu9n5JWWng" general="_gNCmspOXEeS0vu9n5JWWng"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCmypOXEeS0vu9n5JWWng" name="Directors_Fee">
        <generalization xmi:id="_gNCmy5OXEeS0vu9n5JWWng" general="_gNCmvJOXEeS0vu9n5JWWng"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_gNCmzJOXEeS0vu9n5JWWng" name="has as type" memberEnd="_gNCm4JOXEeS0vu9n5JWWng _gNCmtZOXEeS0vu9n5JWWng"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCmzZOXEeS0vu9n5JWWng" name="Foreign_Income">
        <generalization xmi:id="_gNCmzpOXEeS0vu9n5JWWng" general="_gNCm0ZOXEeS0vu9n5JWWng"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCmz5OXEeS0vu9n5JWWng" name="Local_Income">
        <generalization xmi:id="_gNCm0JOXEeS0vu9n5JWWng" general="_gNCm0ZOXEeS0vu9n5JWWng"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCm0ZOXEeS0vu9n5JWWng" name="Income">
        <ownedRule xmi:id="_gNCm0pOXEeS0vu9n5JWWng" name="Tax_Deduction_FD-constraint" constrainedElement="_gNCm0ZOXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCm05OXEeS0vu9n5JWWng">
            <language>OCL</language>
            <body>(self .income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) or&#xA;self.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or&#xA;self.income_type.oclIsTypeOf(Income_Concepts::Rentals_and_Leases_Income)) = true&#xA;and&#xA;self.start_date_within_taxation_year = self.taxPayer.incomeTax.tax_year &#xA;and&#xA;let fd_expenses : Set(Expense_Concepts::Expense) = self.expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Travel_Expense_FD) and exp.year_expense_was_incurred_in = self.start_date_within_taxation_year) in&#xA;     fd_expenses->notEmpty()&#xA;     &#xA;implies&#xA;&#xA;&#x9; fd_expenses->forAll(a_FD|&#x9; &#xA;&#x9; if  (a_FD.deduction.oclAsType(Income_Tax_Deduction_Concepts::FD).calculated_distance>a_FD.deduction.oclAsType(Income_Tax_Deduction_Concepts::FD).distance_declared_in_january) then&#xA;&#x9;&#x9;if  (a_FD.deduction.oclAsType(Income_Tax_Deduction_Concepts::FD).calculated_distance>Constants::MINIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if (a_FD.deduction.oclAsType(Income_Tax_Deduction_Concepts::FD).calculated_distance>Constants::MAXIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/**MAXIMAL FLAT DISTANCE FOR TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;a_FD.deduction.deductible_amount = Constants::FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT.oclAsType(Integer) * Constants::MAXIMAL_FLAT_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/**REAL DISTANCE FOR TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;a_FD.deduction.deductible_amount = Constants::FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT.oclAsType(Integer) * a_FD.deduction.oclAsType(Income_Tax_Deduction_Concepts::FD).calculated_distance&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;/**MINIMAL FLAT DISTANCE FOR TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;a_FD.deduction.deductible_amount = Constants::FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT.oclAsType(Integer) * Constants::MINIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/*NO CHANGES FOR FD, TRAVEL EXPENSE IS ALREADY DEDUCED FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;endif&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;a_FD.deduction.yearly=  a_FD.deduction.deductible_amount and&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;a_FD.deduction.monthly = a_FD.deduction.deductible_amount/12 and&#xA;&#x9;&#x9;a_FD.deduction.daily = a_FD.deduction.monthly/25&#xA;)&#xA;&#x9; </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_gNCm1JOXEeS0vu9n5JWWng" name="Tax_Deduction_FO-constraint" constrainedElement="_gNCm0ZOXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCm1ZOXEeS0vu9n5JWWng">
            <language>OCL</language>
            <body>(self.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) or&#xA;self.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or&#xA;self.income_type.oclIsTypeOf(Income_Concepts::Rentals_and_Leases_Income)) = true&#xA;and&#xA;self.start_date_within_taxation_year = self.taxPayer.incomeTax.tax_year&#xA;and&#xA;let fo_expenses : Set(Expense_Concepts::Expense) = self.expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Miscellaneous_Expense_FO) and exp.year_expense_was_incurred_in = self.start_date_within_taxation_year),&#xA;&#x9;declared_expense : Integer = fo_expenses.declared_amount->sum() in&#xA;&#x9;&#xA;     fo_expenses->notEmpty()&#xA;&#xA;implies&#xA;&#xA;&#x9;fo_expenses->forAll(fo|&#xA;&#x9;&#x9;&#x9;/*do we want to care about this, or up to the agent to decide*/&#xA;&#x9;&#x9;&#x9;let spouse_FO: Income_Tax_Deduction_Concepts::FO =  self.taxPayer.legal_union_A.individual_B.oclAsType(Tax_Payer_Concepts::Tax_Payer).income_Tax_Deduction->&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select(type|type.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO))->any(true).oclAsType(Income_Tax_Deduction_Concepts::FO),&#xA;&#x9;&#x9;&#x9;&#x9; spouse_declared_expense:Integer=self.taxPayer.legal_union_A.individual_B.oclAsType(Tax_Payer_Concepts::Tax_Payer).expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Miscellaneous_Expense_FO))->any(true).declared_amount in&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if(fo.deduction.oclAsType(Income_Tax_Deduction_Concepts::FO) .rate_type_for_FO = Type_of_Rate::REAL_COST) then &#xA;&#x9;&#x9;&#x9;&#x9;if(self.taxPayer.taxed_jointly) then &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(spouse_FO.rate_type_for_FO= Type_of_Rate::REAL_COST) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;fo.deduction.oclAsType(Income_Tax_Deduction_Concepts::FO) .rate_type_for_FO = Type_of_Rate::REGULAR&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if(declared_expense>Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE= Type_of_Rate::REAL_COST&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;&#x9;endif&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if (Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE = Type_of_Rate::REGULAR) then&#xA;&#x9;&#x9;&#x9;/*FLAT RATE FOR FO EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;fo.deduction.deductible_amount =Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)+Constants::DISABILITY_FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/**REAL COST FOR FO EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;fo.deduction.deductible_amount = declared_expense+Constants::DISABILITY_FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)&#xA;&#x9;&#x9;endif&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;fo.deduction.oclAsType(Income_Tax_Deduction_Concepts::FO) .yearly=  fo.deduction.deductible_amount and&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;fo.deduction.oclAsType(Income_Tax_Deduction_Concepts::FO) .monthly = fo.deduction.deductible_amount/12 and&#xA;&#x9;&#x9;fo.deduction.oclAsType(Income_Tax_Deduction_Concepts::FO) .daily = fo.deduction.monthly/25 &#x9;&#xA;&#x9;) &#xA;&#x9;</body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:id="_gNCm1pOXEeS0vu9n5JWWng" name="taxPayer" visibility="private" type="_gNCCUpOXEeS0vu9n5JWWng" association="_gNCndZOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCm15OXEeS0vu9n5JWWng" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCm2JOXEeS0vu9n5JWWng" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCm2ZOXEeS0vu9n5JWWng" name="income_amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCm2pOXEeS0vu9n5JWWng" name="start_date_within_taxation_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_gOL3oZOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCm25OXEeS0vu9n5JWWng" name="start_date_of_contract" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_gOL3oZOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCm3JOXEeS0vu9n5JWWng" name="end_date_within_taxation_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_gOL3oZOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCm3ZOXEeS0vu9n5JWWng" name="tax_card" visibility="private" type="_gNCn35OXEeS0vu9n5JWWng" association="_gNCnmpOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCm3pOXEeS0vu9n5JWWng" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCm35OXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCm4JOXEeS0vu9n5JWWng" name="income_type" visibility="private" type="_gNCmspOXEeS0vu9n5JWWng" association="_gNCmzJOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCm4ZOXEeS0vu9n5JWWng" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCm4pOXEeS0vu9n5JWWng" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCm45OXEeS0vu9n5JWWng" name="expenses" visibility="private" type="_gNCnXZOXEeS0vu9n5JWWng" association="_gNCnXJOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCm5JOXEeS0vu9n5JWWng" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCm5ZOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCm5pOXEeS0vu9n5JWWng" name="tax_liability" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_gNCm55OXEeS0vu9n5JWWng" name="compute_duration_of_contract" isQuery="true" postcondition="_gNCm6ZOXEeS0vu9n5JWWng">
          <eAnnotations xmi:id="_gNCm6JOXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_gNCm6ZOXEeS0vu9n5JWWng" name="get_duration" constrainedElement="_gNCm55OXEeS0vu9n5JWWng">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCm6pOXEeS0vu9n5JWWng">
              <language>OCL</language>
              <body>result=1&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_gNCm65OXEeS0vu9n5JWWng" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_gNCm7JOXEeS0vu9n5JWWng" name="compute_duration_of_contract_within_taxation_year" isQuery="true">
          <eAnnotations xmi:id="_gNCm7ZOXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_gNCm7pOXEeS0vu9n5JWWng" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_gNCm75OXEeS0vu9n5JWWng" name="IN_date">
            <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_gOL3oZOXEeS0vu9n5JWWng"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_gNCm8JOXEeS0vu9n5JWWng" name="Expense_Concepts">
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCm8ZOXEeS0vu9n5JWWng" name="Permanent_Expense">
        <generalization xmi:id="_gNCm8pOXEeS0vu9n5JWWng" general="_gNCm_pOXEeS0vu9n5JWWng"/>
        <ownedAttribute xmi:id="_gNCm85OXEeS0vu9n5JWWng" name="category" visibility="public" type="_gNCnT5OXEeS0vu9n5JWWng"/>
        <ownedAttribute xmi:id="_gNCm9JOXEeS0vu9n5JWWng" name="is_eligible_for_deduction" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_gNCm9ZOXEeS0vu9n5JWWng">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedOperation xmi:id="_gNCm9pOXEeS0vu9n5JWWng" name="is_expense_eligible_for_deduction" isQuery="true" postcondition="_gNCm-JOXEeS0vu9n5JWWng">
          <eAnnotations xmi:id="_gNCm95OXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_gNCm-JOXEeS0vu9n5JWWng" name="is_eligible" constrainedElement="_gNCm9pOXEeS0vu9n5JWWng">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCm-ZOXEeS0vu9n5JWWng">
              <language>OCL</language>
              <body>self.is_eligible_for_deduction = IN_agent_response and&#xA;result = IN_agent_response&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_gNCm-pOXEeS0vu9n5JWWng" name="IN_agent_response">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_gNCm-5OXEeS0vu9n5JWWng" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCm_JOXEeS0vu9n5JWWng" name="Interest_Expense">
        <generalization xmi:id="_gNCm_ZOXEeS0vu9n5JWWng" general="_gNCm_pOXEeS0vu9n5JWWng"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCm_pOXEeS0vu9n5JWWng" name="Special_Expense_DS">
        <generalization xmi:id="_gNCm_5OXEeS0vu9n5JWWng" general="_gNCnXZOXEeS0vu9n5JWWng"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCnAJOXEeS0vu9n5JWWng" name="Private_Insurance_and_Plan">
        <generalization xmi:id="_gNCnAZOXEeS0vu9n5JWWng" general="_gNCm_pOXEeS0vu9n5JWWng"/>
        <ownedAttribute xmi:id="_gNCnApOXEeS0vu9n5JWWng" name="category" visibility="public" type="_gNCnUpOXEeS0vu9n5JWWng"/>
        <ownedAttribute xmi:id="_gNCnA5OXEeS0vu9n5JWWng" name="duration_of_contract" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCnBJOXEeS0vu9n5JWWng" name="is_private_insurance_and_plan_eligible_for_deduction" visibility="public" isDerived="true">
          <eAnnotations xmi:id="_gNCnBZOXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_gNCnBpOXEeS0vu9n5JWWng">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedOperation xmi:id="_gNCnB5OXEeS0vu9n5JWWng" name="is_private_insurance_and_plan_eligible_for_deduction" isQuery="true" postcondition="_gNCnCZOXEeS0vu9n5JWWng">
          <eAnnotations xmi:id="_gNCnCJOXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_gNCnCZOXEeS0vu9n5JWWng" name="is_private_insurance_and_plan_eligible_for_deduction" constrainedElement="_gNCnB5OXEeS0vu9n5JWWng">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCnCpOXEeS0vu9n5JWWng">
              <language>OCL</language>
              <body>self.is_private_insurance_and_plan_eligible_for_deduction = IN_eligible_plan&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_gNCnC5OXEeS0vu9n5JWWng" name="IN_eligible_plan">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCnDJOXEeS0vu9n5JWWng" name="Health_and_Pension_Insurance">
        <generalization xmi:id="_gNCnDZOXEeS0vu9n5JWWng" general="_gNCm_pOXEeS0vu9n5JWWng"/>
        <ownedAttribute xmi:id="_gNCnDpOXEeS0vu9n5JWWng" name="category" visibility="public" type="_gNCnWJOXEeS0vu9n5JWWng"/>
        <ownedAttribute xmi:id="_gNCnD5OXEeS0vu9n5JWWng" name="is_related_to_additional_salary" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_gNCnEJOXEeS0vu9n5JWWng">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCnEZOXEeS0vu9n5JWWng" name="Donation">
        <generalization xmi:id="_gNCnEpOXEeS0vu9n5JWWng" general="_gNCm_pOXEeS0vu9n5JWWng"/>
        <ownedAttribute xmi:id="_gNCnE5OXEeS0vu9n5JWWng" name="beneficiary" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCnFJOXEeS0vu9n5JWWng" name="is_beneficiary_eligible" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_gNCnFZOXEeS0vu9n5JWWng">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCnFpOXEeS0vu9n5JWWng" name="is_donation_reported" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_gNCnF5OXEeS0vu9n5JWWng" name="get_beneficiary_eligibility_for_deduction" isQuery="true" postcondition="_gNCnGZOXEeS0vu9n5JWWng">
          <eAnnotations xmi:id="_gNCnGJOXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_gNCnGZOXEeS0vu9n5JWWng" name="is_leagaly_approved_beneficiary" constrainedElement="_gNCnF5OXEeS0vu9n5JWWng">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCnGpOXEeS0vu9n5JWWng">
              <language>OCL</language>
              <body>is_beneficiary_eligible = IN_eligibility&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_gNCnG5OXEeS0vu9n5JWWng" name="IN_eligibility">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCnHJOXEeS0vu9n5JWWng" name="Loss_Carryforward">
        <ownedRule xmi:id="_gNCnHZOXEeS0vu9n5JWWng" name="ExpensePossibleOnlyIfCertainIncomeType-constraint" constrainedElement="_gNCnHJOXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCnHpOXEeS0vu9n5JWWng">
            <language>OCL</language>
            <body>self.oclIsTypeOf(Loss_Carryforward) implies&#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Agriculture_and_Forestry_Income) or &#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Independent_Professional_Services_Income) or&#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Trade_and_Business_Income)&#xA;&#xA;</body>
          </specification>
        </ownedRule>
        <generalization xmi:id="_gNCnH5OXEeS0vu9n5JWWng" general="_gNCm_pOXEeS0vu9n5JWWng"/>
        <ownedAttribute xmi:id="_gNCnIJOXEeS0vu9n5JWWng" name="regular_accountability" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCnIZOXEeS0vu9n5JWWng" name="compensation_by_other_means" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCnIpOXEeS0vu9n5JWWng" name="tax_payer_has_inherited_business_ownership" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_gNCnI5OXEeS0vu9n5JWWng">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCnJJOXEeS0vu9n5JWWng" name="tax_payer_has_been_partner_in_business" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_gNCnJZOXEeS0vu9n5JWWng" value="true">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedOperation xmi:id="_gNCnJpOXEeS0vu9n5JWWng" name="is_accountability_regular" isQuery="true" postcondition="_gNCnKJOXEeS0vu9n5JWWng">
          <eAnnotations xmi:id="_gNCnJ5OXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_gNCnKJOXEeS0vu9n5JWWng" name="is_accounatbility_regular" constrainedElement="_gNCnJpOXEeS0vu9n5JWWng">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCnKZOXEeS0vu9n5JWWng">
              <language>OCL</language>
              <body>self.regular_accountability = IN_regularity</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_gNCnKpOXEeS0vu9n5JWWng" name="IN_regularity">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_gNCnK5OXEeS0vu9n5JWWng" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_gNCnLJOXEeS0vu9n5JWWng" name="is_compensated_by_other_means" isQuery="true" postcondition="_gNCnLpOXEeS0vu9n5JWWng">
          <eAnnotations xmi:id="_gNCnLZOXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_gNCnLpOXEeS0vu9n5JWWng" name="is_compensated_by_other_means" constrainedElement="_gNCnLJOXEeS0vu9n5JWWng">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCnL5OXEeS0vu9n5JWWng">
              <language>OCL</language>
              <body>self.compensation_by_other_means = IN_compensated</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_gNCnMJOXEeS0vu9n5JWWng" name="IN_compensated">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_gNCnMZOXEeS0vu9n5JWWng" name="has_been_tax_payer_partner_in_business" isQuery="true" postcondition="_gNCnM5OXEeS0vu9n5JWWng">
          <eAnnotations xmi:id="_gNCnMpOXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_gNCnM5OXEeS0vu9n5JWWng" name="partner_in_business" constrainedElement="_gNCnMZOXEeS0vu9n5JWWng">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCnNJOXEeS0vu9n5JWWng">
              <language>OCL</language>
              <body>self.tax_payer_has_been_partner_in_business = IN_has_been_partner_in_business&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_gNCnNZOXEeS0vu9n5JWWng" name="IN_has_been_partner_in_business">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_gNCnNpOXEeS0vu9n5JWWng" name="has_tax_payer_inherited_business_ownership" isQuery="true" postcondition="_gNCnOJOXEeS0vu9n5JWWng">
          <eAnnotations xmi:id="_gNCnN5OXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_gNCnOJOXEeS0vu9n5JWWng" name="inherited_business_ownership" constrainedElement="_gNCnNpOXEeS0vu9n5JWWng">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCnOZOXEeS0vu9n5JWWng">
              <language>OCL</language>
              <body>self.tax_payer_has_inherited_business_ownership = IN_inherited_business_ownership</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_gNCnOpOXEeS0vu9n5JWWng" name="IN_inherited_business_ownership">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCnO5OXEeS0vu9n5JWWng" name="Spousal_Expense_AC">
        <generalization xmi:id="_gNCnPJOXEeS0vu9n5JWWng" general="_gNCnXZOXEeS0vu9n5JWWng"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCnPZOXEeS0vu9n5JWWng" name="Extraordinary_Expense_CE">
        <generalization xmi:id="_gNCnPpOXEeS0vu9n5JWWng" general="_gNCnXZOXEeS0vu9n5JWWng"/>
        <ownedAttribute xmi:id="_gNCnP5OXEeS0vu9n5JWWng" name="thresholded_deduction_percentage" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCnQJOXEeS0vu9n5JWWng" name="ce_type" visibility="public" type="_gNCnppOXEeS0vu9n5JWWng"/>
        <ownedOperation xmi:id="_gNCnQZOXEeS0vu9n5JWWng" name="is_above_thresholded_deduction_percentage_for_CE" isQuery="true">
          <eAnnotations xmi:id="_gNCnQpOXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_gNCnQ5OXEeS0vu9n5JWWng" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_gNCnRJOXEeS0vu9n5JWWng" name="compute_thresholded_deduction_percentage_for_CE" isQuery="true" postcondition="_gNCnRpOXEeS0vu9n5JWWng">
          <eAnnotations xmi:id="_gNCnRZOXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_gNCnRpOXEeS0vu9n5JWWng" name="thresholded_deduction_percentage" constrainedElement="_gNCnRJOXEeS0vu9n5JWWng">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCnR5OXEeS0vu9n5JWWng">
              <language>OCL</language>
              <body>self.thresholded_deduction_percentage = IN_thresholded_deduction_percentage&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_gNCnSJOXEeS0vu9n5JWWng" name="IN_thresholded_deduction_percentage">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCnSZOXEeS0vu9n5JWWng" name="Travel_Expense_FD">
        <generalization xmi:id="_gNCnSpOXEeS0vu9n5JWWng" general="_gNCnTZOXEeS0vu9n5JWWng"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCnS5OXEeS0vu9n5JWWng" name="Miscellaneous_Expense_FO">
        <generalization xmi:id="_gNCnTJOXEeS0vu9n5JWWng" general="_gNCnTZOXEeS0vu9n5JWWng"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCnTZOXEeS0vu9n5JWWng" name="Professional_Expense">
        <generalization xmi:id="_gNCnTpOXEeS0vu9n5JWWng" general="_gNCnXZOXEeS0vu9n5JWWng"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="_gNCnT5OXEeS0vu9n5JWWng" name="Category_of_Permanent_Expense">
        <ownedLiteral xmi:id="_gNCnUJOXEeS0vu9n5JWWng" name="MISCELLANEOUS_DEBT" classifier="_gNCnT5OXEeS0vu9n5JWWng"/>
        <ownedLiteral xmi:id="_gNCnUZOXEeS0vu9n5JWWng" name="ALIMONY" classifier="_gNCnT5OXEeS0vu9n5JWWng"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="_gNCnUpOXEeS0vu9n5JWWng" name="Category_of_Private_Insurance_and_Plan">
        <ownedLiteral xmi:id="_gNCnU5OXEeS0vu9n5JWWng" name="PRIVATE_INSURANCE" classifier="_gNCnUpOXEeS0vu9n5JWWng"/>
        <ownedLiteral xmi:id="_gNCnVJOXEeS0vu9n5JWWng" name="PRIVATE_LIFE_INSURANCE" classifier="_gNCnWJOXEeS0vu9n5JWWng"/>
        <ownedLiteral xmi:id="_gNCnVZOXEeS0vu9n5JWWng" name="COMPANY_MEMBERS_PRIVATE_INSURANCE" classifier="_gNCnUpOXEeS0vu9n5JWWng"/>
        <ownedLiteral xmi:id="_gNCnVpOXEeS0vu9n5JWWng" name="HOUSING_SAVING_PLAN" classifier="_gNCnWJOXEeS0vu9n5JWWng"/>
        <ownedLiteral xmi:id="_gNCnV5OXEeS0vu9n5JWWng" name="OLD_AGE_PENSION_PLAN" classifier="_gNCnWJOXEeS0vu9n5JWWng"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="_gNCnWJOXEeS0vu9n5JWWng" name="Category_of_Health_and_Pension_Insurances">
        <ownedLiteral xmi:id="_gNCnWZOXEeS0vu9n5JWWng" name="MANDATORY_HEALTH_AND_PENSION_INSURANCE" classifier="_gNCnWJOXEeS0vu9n5JWWng"/>
        <ownedLiteral xmi:id="_gNCnWpOXEeS0vu9n5JWWng" name="ADDITIONAL_EMPLOYERS_PENSION_INSURANCE" classifier="_gNCnWJOXEeS0vu9n5JWWng"/>
        <ownedLiteral xmi:id="_gNCnW5OXEeS0vu9n5JWWng" name="CONTINUED_HEALTH_AND_PENSION_INSURANCE" classifier="_gNCnWJOXEeS0vu9n5JWWng"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_gNCnXJOXEeS0vu9n5JWWng" name="influences" memberEnd="_gNCnaJOXEeS0vu9n5JWWng _gNCm45OXEeS0vu9n5JWWng"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCnXZOXEeS0vu9n5JWWng" name="Expense">
        <ownedAttribute xmi:id="_gNCnXpOXEeS0vu9n5JWWng" name="tax_Payer" visibility="private" type="_gNCCUpOXEeS0vu9n5JWWng" association="_gNCnopOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCnX5OXEeS0vu9n5JWWng" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCnYJOXEeS0vu9n5JWWng" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCnYZOXEeS0vu9n5JWWng" name="declared_amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCnYpOXEeS0vu9n5JWWng" name="expense_purpose" visibility="public" type="_gNCnqpOXEeS0vu9n5JWWng">
          <defaultValue xmi:type="uml:InstanceValue" xmi:id="_gNCnY5OXEeS0vu9n5JWWng" name="OTHER" type="_gNCnqpOXEeS0vu9n5JWWng" instance="_gNCnrpOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCnZJOXEeS0vu9n5JWWng" name="dependent" visibility="private" type="_gNCB5pOXEeS0vu9n5JWWng" association="_gNCmnZOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCnZZOXEeS0vu9n5JWWng" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCnZpOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCnZ5OXEeS0vu9n5JWWng" name="year_expense_was_incurred_in" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCnaJOXEeS0vu9n5JWWng" name="income" visibility="private" type="_gNCm0ZOXEeS0vu9n5JWWng" association="_gNCnXJOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCnaZOXEeS0vu9n5JWWng" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCnapOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCna5OXEeS0vu9n5JWWng" name="deduction" visibility="private" type="_gNCoqZOXEeS0vu9n5JWWng" association="_gNCouJOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCnbJOXEeS0vu9n5JWWng" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCnbZOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_gNCnbpOXEeS0vu9n5JWWng" name="Grantor">
      <ownedLiteral xmi:id="_gNCnb5OXEeS0vu9n5JWWng" name="ACD" classifier="_gNCnbpOXEeS0vu9n5JWWng"/>
      <ownedLiteral xmi:id="_gNCncJOXEeS0vu9n5JWWng" name="Employer" classifier="_gNCnbpOXEeS0vu9n5JWWng"/>
      <ownedLiteral xmi:id="_gNCncZOXEeS0vu9n5JWWng" name="CNPF" classifier="_gNCnbpOXEeS0vu9n5JWWng"/>
      <ownedLiteral xmi:id="_gNCncpOXEeS0vu9n5JWWng" name="CEDIES" classifier="_gNCnbpOXEeS0vu9n5JWWng"/>
      <ownedLiteral xmi:id="_gNCnc5OXEeS0vu9n5JWWng" name="SNJ" classifier="_gNCnbpOXEeS0vu9n5JWWng"/>
      <ownedLiteral xmi:id="_gNCndJOXEeS0vu9n5JWWng" name="CNAP" classifier="_gNCnbpOXEeS0vu9n5JWWng"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_gNCndZOXEeS0vu9n5JWWng" name="earns" memberEnd="_gNCmaZOXEeS0vu9n5JWWng _gNCm1pOXEeS0vu9n5JWWng"/>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_gNCndpOXEeS0vu9n5JWWng" name="Country">
      <ownedLiteral xmi:id="_gNCnd5OXEeS0vu9n5JWWng" name="LU" classifier="_gNCndpOXEeS0vu9n5JWWng"/>
      <ownedLiteral xmi:id="_gNCneJOXEeS0vu9n5JWWng" name="FR" classifier="_gNCndpOXEeS0vu9n5JWWng"/>
      <ownedLiteral xmi:id="_gNCneZOXEeS0vu9n5JWWng" name="BE" classifier="_gNCndpOXEeS0vu9n5JWWng"/>
      <ownedLiteral xmi:id="_gNCnepOXEeS0vu9n5JWWng" name="DE" classifier="_gNCndpOXEeS0vu9n5JWWng"/>
      <ownedLiteral xmi:id="_gNCne5OXEeS0vu9n5JWWng" name="NL" classifier="_gNCndpOXEeS0vu9n5JWWng"/>
      <ownedLiteral xmi:id="_gNCnfJOXEeS0vu9n5JWWng" name="OTHER" classifier="_gNCndpOXEeS0vu9n5JWWng"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_gNCnfZOXEeS0vu9n5JWWng" name="credited for" memberEnd="_gNCmb5OXEeS0vu9n5JWWng _gNCoNZOXEeS0vu9n5JWWng"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_gNCnfpOXEeS0vu9n5JWWng" name="Date">
      <ownedAttribute xmi:id="_gNCnf5OXEeS0vu9n5JWWng" name="day" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCngJOXEeS0vu9n5JWWng" value="*"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCngZOXEeS0vu9n5JWWng" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_gNCngpOXEeS0vu9n5JWWng" name="month" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_gNCng5OXEeS0vu9n5JWWng" name="year" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_gNCnhJOXEeS0vu9n5JWWng" name="Job_Activity">
      <ownedLiteral xmi:id="_gNCnhZOXEeS0vu9n5JWWng" name="Salary" classifier="_gNCnhJOXEeS0vu9n5JWWng"/>
      <ownedLiteral xmi:id="_gNCnhpOXEeS0vu9n5JWWng" name="Pension" classifier="_gNCnhJOXEeS0vu9n5JWWng"/>
      <ownedLiteral xmi:id="_gNCnh5OXEeS0vu9n5JWWng" name="Annuity" classifier="_gNCnhJOXEeS0vu9n5JWWng"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_gNCniJOXEeS0vu9n5JWWng" name="Tax_Card_Type">
      <ownedLiteral xmi:id="_gNCniZOXEeS0vu9n5JWWng" name="Principal" classifier="_gNCniJOXEeS0vu9n5JWWng"/>
      <ownedLiteral xmi:id="_gNCnipOXEeS0vu9n5JWWng" name="Additional" classifier="_gNCniJOXEeS0vu9n5JWWng"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_gNCni5OXEeS0vu9n5JWWng" name="Tax_Office">
      <ownedLiteral xmi:id="_gNCnjJOXEeS0vu9n5JWWng" name="RTS_2" classifier="_gNCni5OXEeS0vu9n5JWWng"/>
      <ownedLiteral xmi:id="_gNCnjZOXEeS0vu9n5JWWng" name="RTS_3" classifier="_gNCni5OXEeS0vu9n5JWWng"/>
      <ownedLiteral xmi:id="_gNCnjpOXEeS0vu9n5JWWng" name="RTS_Esch" classifier="_gNCni5OXEeS0vu9n5JWWng"/>
      <ownedLiteral xmi:id="_gNCnj5OXEeS0vu9n5JWWng" name="RTS_Ettelbruck" classifier="_gNCni5OXEeS0vu9n5JWWng"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_gNCnkJOXEeS0vu9n5JWWng" name="Tax_Class_Category">
      <ownedLiteral xmi:id="_gNCnkZOXEeS0vu9n5JWWng" name="One" classifier="_gNCnkJOXEeS0vu9n5JWWng"/>
      <ownedLiteral xmi:id="_gNCnkpOXEeS0vu9n5JWWng" name="One_A" classifier="_gNCnkJOXEeS0vu9n5JWWng"/>
      <ownedLiteral xmi:id="_gNCnk5OXEeS0vu9n5JWWng" name="Two" classifier="_gNCnkJOXEeS0vu9n5JWWng"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_gNCnlJOXEeS0vu9n5JWWng" name="Town">
      <ownedLiteral xmi:id="_gNCnlZOXEeS0vu9n5JWWng" name="Luxembourg_city" classifier="_gNCnlJOXEeS0vu9n5JWWng"/>
      <ownedLiteral xmi:id="_gNCnlpOXEeS0vu9n5JWWng" name="Bertrange" classifier="_gNCnlJOXEeS0vu9n5JWWng"/>
      <ownedLiteral xmi:id="_gNCnl5OXEeS0vu9n5JWWng" name="Strassen" classifier="_gNCnlJOXEeS0vu9n5JWWng"/>
      <ownedLiteral xmi:id="_gNCnmJOXEeS0vu9n5JWWng" name="Bettembourg" classifier="_gNCnlJOXEeS0vu9n5JWWng"/>
      <ownedLiteral xmi:id="_gNCnmZOXEeS0vu9n5JWWng" name="Beaufort" classifier="_gNCnlJOXEeS0vu9n5JWWng"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_gNCnmpOXEeS0vu9n5JWWng" name="linked to" memberEnd="_gNCm3ZOXEeS0vu9n5JWWng _gNCn9JOXEeS0vu9n5JWWng"/>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_gNCnm5OXEeS0vu9n5JWWng" name="Dependent_Type">
      <ownedLiteral xmi:id="_gNCnnJOXEeS0vu9n5JWWng" name="CHILD" classifier="_gNCnm5OXEeS0vu9n5JWWng"/>
      <ownedLiteral xmi:id="_gNCnnZOXEeS0vu9n5JWWng" name="SPOUSE" classifier="_gNCnm5OXEeS0vu9n5JWWng"/>
      <ownedLiteral xmi:id="_gNCnnpOXEeS0vu9n5JWWng" name="RELATIVE" classifier="_gNCnm5OXEeS0vu9n5JWWng"/>
      <ownedLiteral xmi:id="_gNCnn5OXEeS0vu9n5JWWng" name="OTHER_FAMILY_MEMBER" classifier="_gNCnm5OXEeS0vu9n5JWWng"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_gNCnoJOXEeS0vu9n5JWWng" name="provides" memberEnd="_gNCn95OXEeS0vu9n5JWWng _gNCmppOXEeS0vu9n5JWWng"/>
    <packagedElement xmi:type="uml:Association" xmi:id="_gNCnoZOXEeS0vu9n5JWWng" name="receives" memberEnd="_gNCme5OXEeS0vu9n5JWWng _gNCorpOXEeS0vu9n5JWWng"/>
    <packagedElement xmi:type="uml:Association" xmi:id="_gNCnopOXEeS0vu9n5JWWng" name="declares" memberEnd="_gNCmf5OXEeS0vu9n5JWWng _gNCnXpOXEeS0vu9n5JWWng"/>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_gNCno5OXEeS0vu9n5JWWng" name="Type_of_Rate">
      <ownedLiteral xmi:id="_gNCnpJOXEeS0vu9n5JWWng" name="REGULAR" classifier="_gNCno5OXEeS0vu9n5JWWng"/>
      <ownedLiteral xmi:id="_gNCnpZOXEeS0vu9n5JWWng" name="REAL_COST" classifier="_gNCno5OXEeS0vu9n5JWWng"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_gNCnppOXEeS0vu9n5JWWng" name="CE_Type">
      <ownedLiteral xmi:id="_gNCnp5OXEeS0vu9n5JWWng" name="INALIDITY_AND_INFIRMITY" classifier="_gNCnppOXEeS0vu9n5JWWng"/>
      <ownedLiteral xmi:id="_gNCnqJOXEeS0vu9n5JWWng" name="DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD" classifier="_gNCnppOXEeS0vu9n5JWWng"/>
      <ownedLiteral xmi:id="_gNCnqZOXEeS0vu9n5JWWng" name="CARE_FOR_CHILDREN_NOT_BEING_PART_OF_HOUSEHOLD" classifier="_gNCnppOXEeS0vu9n5JWWng"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_gNCnqpOXEeS0vu9n5JWWng" name="Expense_Purpose">
      <ownedLiteral xmi:id="_gNCnq5OXEeS0vu9n5JWWng" name="HOUSE_CARE" classifier="_gNCnqpOXEeS0vu9n5JWWng"/>
      <ownedLiteral xmi:id="_gNCnrJOXEeS0vu9n5JWWng" name="CHILD_CARE" classifier="_gNCnqpOXEeS0vu9n5JWWng"/>
      <ownedLiteral xmi:id="_gNCnrZOXEeS0vu9n5JWWng" name="DEPENDENCE_CARE" classifier="_gNCnqpOXEeS0vu9n5JWWng"/>
      <ownedLiteral xmi:id="_gNCnrpOXEeS0vu9n5JWWng" name="OTHER" classifier="_gNCnqpOXEeS0vu9n5JWWng"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_gNCnr5OXEeS0vu9n5JWWng" name="Constants">
      <ownedLiteral xmi:id="_gNCnsJOXEeS0vu9n5JWWng" name="MAXIMUM_CE_RATE_FOR_CHILD_NOT_BEING_PART_OF_HOUSEHOLD" classifier="_gNCnr5OXEeS0vu9n5JWWng">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_gNCnsZOXEeS0vu9n5JWWng" value="3480"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_gNCnspOXEeS0vu9n5JWWng" name="MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE" classifier="_gNCnr5OXEeS0vu9n5JWWng">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_gNCns5OXEeS0vu9n5JWWng" value="3600"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_gNCntJOXEeS0vu9n5JWWng" name="MINIMUM_SALARY" classifier="_gNCnr5OXEeS0vu9n5JWWng">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_gNCntZOXEeS0vu9n5JWWng" value="1500"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_gNCntpOXEeS0vu9n5JWWng" name="FLAT_RATE_FOR_EXTRA_PROFESSIONAL_DEDUCTION" classifier="_gNCnr5OXEeS0vu9n5JWWng">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_gNCnt5OXEeS0vu9n5JWWng" value="4500"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_gNCnuJOXEeS0vu9n5JWWng" name="MAXIMUM_DEDUCTIBLE_PERCENTAGE_FOR_DONATIONS" classifier="_gNCnr5OXEeS0vu9n5JWWng">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_gNCnuZOXEeS0vu9n5JWWng" value="20"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_gNCnupOXEeS0vu9n5JWWng" name="MINIMUM_DEDUCTIBLE_AMOUNT_FOR_DONATIONS" classifier="_gNCnr5OXEeS0vu9n5JWWng">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_gNCnu5OXEeS0vu9n5JWWng" value="120"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_gNCnvJOXEeS0vu9n5JWWng" name="MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ADDITIONAL_PENSION_AND_INSURANCE" classifier="_gNCnr5OXEeS0vu9n5JWWng">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_gNCnvZOXEeS0vu9n5JWWng"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_gNCnvpOXEeS0vu9n5JWWng" name="MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ALIMONY_EXPENSE" classifier="_gNCnr5OXEeS0vu9n5JWWng">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_gNCnv5OXEeS0vu9n5JWWng" value="24000"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_gNCnwJOXEeS0vu9n5JWWng" name="FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT" classifier="_gNCnr5OXEeS0vu9n5JWWng">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_gNCnwZOXEeS0vu9n5JWWng" value="99"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_gNCnwpOXEeS0vu9n5JWWng" name="MAXIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION" classifier="_gNCnr5OXEeS0vu9n5JWWng">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_gNCnw5OXEeS0vu9n5JWWng" value="26"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_gNCnxJOXEeS0vu9n5JWWng" name="MAXIMAL_FLAT_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION" classifier="_gNCnr5OXEeS0vu9n5JWWng">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_gNCnxZOXEeS0vu9n5JWWng" value="30"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_gNCnxpOXEeS0vu9n5JWWng" name="MINIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION" classifier="_gNCnr5OXEeS0vu9n5JWWng">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_gNCnx5OXEeS0vu9n5JWWng" value="4"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_gNCnyJOXEeS0vu9n5JWWng" name="FLAT_RATE_CIM_DAILY" classifier="_gNCnr5OXEeS0vu9n5JWWng">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_gNCnyZOXEeS0vu9n5JWWng" value="2"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_gNCnypOXEeS0vu9n5JWWng" name="FLAT_RATE_CIM_MONTHLY" classifier="_gNCnr5OXEeS0vu9n5JWWng">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_gNCny5OXEeS0vu9n5JWWng" value="62"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_gNCnzJOXEeS0vu9n5JWWng" name="FLAT_RATE_CIM_YEARLY" classifier="_gNCnr5OXEeS0vu9n5JWWng">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_gNCnzZOXEeS0vu9n5JWWng" value="750"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_gNCnzpOXEeS0vu9n5JWWng" name="FLAT_RATE_CIP_DAILY" classifier="_gNCnr5OXEeS0vu9n5JWWng">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_gNCnz5OXEeS0vu9n5JWWng" value="1"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_gNCn0JOXEeS0vu9n5JWWng" name="FLAT_RATE_CIP_MONTHLY" classifier="_gNCnr5OXEeS0vu9n5JWWng">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_gNCn0ZOXEeS0vu9n5JWWng" value="25"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_gNCn0pOXEeS0vu9n5JWWng" name="FLAT_RATE_CIP_YEARLY" classifier="_gNCnr5OXEeS0vu9n5JWWng">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_gNCn05OXEeS0vu9n5JWWng" value="300"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_gNCn1JOXEeS0vu9n5JWWng" name="FLAT_RATE_CIS_DAILY" classifier="_gNCnr5OXEeS0vu9n5JWWng">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_gNCn1ZOXEeS0vu9n5JWWng" value="1"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_gNCn1pOXEeS0vu9n5JWWng" name="FLAT_RATE_CIS_MONTHLY" classifier="_gNCnr5OXEeS0vu9n5JWWng">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_gNCn15OXEeS0vu9n5JWWng" value="25"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_gNCn2JOXEeS0vu9n5JWWng" name="FLAT_RATE_CIS_YEARLY" classifier="_gNCnr5OXEeS0vu9n5JWWng">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_gNCn2ZOXEeS0vu9n5JWWng" value="300"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_gNCn2pOXEeS0vu9n5JWWng" name="MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_DS" classifier="_gNCnr5OXEeS0vu9n5JWWng">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_gNCn25OXEeS0vu9n5JWWng" value="480"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_gNCn3JOXEeS0vu9n5JWWng" name="FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE" classifier="_gNCnr5OXEeS0vu9n5JWWng"/>
      <ownedLiteral xmi:id="_gNCn3ZOXEeS0vu9n5JWWng" name="DISABILITY_FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE" classifier="_gNCnr5OXEeS0vu9n5JWWng"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_gNCn3pOXEeS0vu9n5JWWng" name="Tax_Card_Concepts">
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCn35OXEeS0vu9n5JWWng" name="Tax_Card">
        <ownedRule xmi:id="_gNCn4JOXEeS0vu9n5JWWng" name="SubjectToWithholdingTax-constraint" constrainedElement="_gNCn35OXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCn4ZOXEeS0vu9n5JWWng">
            <language>OCL</language>
            <body>not self.oclIsUndefined() &#xA;implies&#xA;(self.income.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or &#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) or&#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Capital_and_Investments_Income) or&#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Directors_Fee)&#xA;)&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_gNCn4pOXEeS0vu9n5JWWng" name="Tax_Credits-constraint" constrainedElement="_gNCn35OXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCn45OXEeS0vu9n5JWWng">
            <language>OCL</language>
            <body>self.tax_card_type = Tax_Card_Type::Principal &#xA;&#xA;implies&#xA;&#xA;let cim : Income_Tax_Credit_Concepts::CIM = self.income_Tax_Credit->select(c|c.oclIsTypeOf(Income_Tax_Credit_Concepts::CIM) and c.tax_year = self.valid_from_date)->any(true).oclAsType(Income_Tax_Credit_Concepts::CIM),&#xA;&#x9;cis : Income_Tax_Credit_Concepts::CIS = self.income_Tax_Credit->select(cis|cis.oclIsTypeOf(Income_Tax_Credit_Concepts::CIS) and cis.tax_year = self.valid_from_date)->any(true).oclAsType(Income_Tax_Credit_Concepts::CIS),&#xA;&#x9;cip : Income_Tax_Credit_Concepts::CIP = self.income_Tax_Credit->select(cip|cip.oclIsTypeOf(Income_Tax_Credit_Concepts::CIP) and cip.tax_year = self.valid_from_date)->any(true).oclAsType(Income_Tax_Credit_Concepts::CIP) in&#xA;&#x9;&#xA;(not cis.oclIsUndefined()) xor (not cip.oclIsUndefined()) = true&#xA;and&#xA;if not cim.oclIsUndefined() then &#xA;&#x9;self.credit_CIM_daily = cim.daily and&#xA;&#x9;self.credit_CIM_monthly = cim.monthly &#xA;else&#xA;&#x9;true&#xA;endif&#xA;and&#xA;if not cis.oclIsUndefined()then&#xA;&#x9;self.credit_CIS_daily = cis.daily and&#xA;&#x9;self.credit_CIS_monthly = cis.monthly &#xA;else&#xA;&#x9;true&#xA;endif&#xA;and&#xA;if not cip.oclIsUndefined()then&#xA;&#x9;self.credit_CIP_monthly = cip.monthly &#xA;else&#xA;&#x9;true&#xA;endif</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_gNCn5JOXEeS0vu9n5JWWng" name="Tax_Card_AC-constraint" constrainedElement="_gNCn35OXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCn5ZOXEeS0vu9n5JWWng">
            <language>OCL</language>
            <body>let set_ac : Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(deduction|deduction.oclIsTypeOf(Income_Tax_Deduction_Concepts::AC) and deduction.tax_year = self.valid_from_date),&#xA;&#x9;ac : Income_Tax_Deduction_Concepts::AC = set_ac->any(true).oclAsType(Income_Tax_Deduction_Concepts::AC),&#xA;&#x9;set_fo : Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(deduction|deduction.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO) and deduction.tax_year = self.valid_from_date),&#xA;&#x9;set_ds : Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(deduction|deduction.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS) and deduction.tax_year = self.valid_from_date) in&#xA;&#x9;&#xA;set_ac->size() = 1 &#xA;implies&#xA;&#xA;self.tax_card_type=Tax_Card_Type::Additional and&#xA;self.tax_Payer.taxed_jointly and&#xA;self.deduction_AC_yearly = ac.deductible_amount and&#xA;self.deduction_AC_monthly = ac.deductible_amount/12 and&#xA;self.deduction_AC_daily = self.deduction_AC_monthly/25 /**25 working days per month**/ and&#xA;&#xA;if(set_ds->size()>0) then&#xA;&#x9;set_ds->size() =1 and&#xA;&#x9;self.deduction_DS_yearly->notEmpty() and&#xA;&#x9;self.deduction_DS_yearly = set_ds.deductible_amount ->sum()&#xA;else&#xA;&#x9;true&#xA;endif&#xA;&#xA;and&#xA;&#xA;if(set_fo->size()>0) then&#xA;&#x9;set_fo->size() = 1 and&#xA;&#x9;self.deduction_FO_yearly->notEmpty() and&#xA;&#x9;self.deduction_FO_yearly = set_fo.deductible_amount ->sum()&#xA;else&#xA;&#x9;true&#xA;endif&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_gNCn5pOXEeS0vu9n5JWWng" name="Tax_Card_FD-constraint" constrainedElement="_gNCn35OXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCn55OXEeS0vu9n5JWWng">
            <language>OCL</language>
            <body>not self.oclIsUndefined()&#xA;implies&#xA;self.income.taxPayer.income_Tax_Deduction->select(d|d.oclIsTypeOf(Income_Tax_Deduction_Concepts::FD) and d.tax_year = self.valid_from_date)->size() = 1&#xA;&#xA;and &#xA;let fd : Income_Tax_Deduction_Concepts::FD = self.income_Tax_Deduction->select(d|d.oclIsTypeOf(Income_Tax_Deduction_Concepts::FD) and d.tax_year = self.valid_from_date)->any(true).oclAsType(Income_Tax_Deduction_Concepts::FD) in&#xA;self.deduction_FD_daily = fd.daily and&#xA;self.deduction_FD_monthly = fd.monthly and&#xA;self.deduction_FD_yearly = fd.yearly&#xA;&#xA;&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_gNCn6JOXEeS0vu9n5JWWng" name="Tax_Card_DS-constraint" constrainedElement="_gNCn35OXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCn6ZOXEeS0vu9n5JWWng">
            <language>OCL</language>
            <body>let set_ds : Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(d|d.oclIsTypeOf( Income_Tax_Deduction_Concepts::DS) and d.tax_year = self.valid_from_date),&#xA;&#x9;total_ds : Integer = set_ds.deductible_amount->sum()  in&#xA;set_ds->size()>0 and&#xA;self.tax_card_type = Tax_Card_Type::Principal&#xA;&#xA;implies&#xA;&#xA;if total_ds > Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_DS.oclAsType(Integer) then&#xA; &#x9;/**THE DIFFERENCE BETWEEN THE MINIMUM AND THE TOTAL DS AMOUNT IS WRITTEN ON THE TAX CARD**/&#xA; &#x9;self.deduction_DS_monthly = (total_ds - Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_DS.oclAsType(Integer))/self.income^^compute_duration_of_contract_within_taxation_year(self.valid_from_date)->first().result&#xA; else&#xA; &#x9;/**NO NEED TO PUT DETAILS ON THE TAX CARD**/&#xA; &#x9;false&#xA; endif</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_gNCn6pOXEeS0vu9n5JWWng" name="Tax_Card_CE-constraint" constrainedElement="_gNCn35OXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCn65OXEeS0vu9n5JWWng">
            <language>OCL</language>
            <body>let set_ce : Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(deduction|deduction.oclIsTypeOf(Income_Tax_Deduction_Concepts::CE) and deduction.tax_year = self.valid_from_date),&#xA;&#x9;ce : Income_Tax_Deduction_Concepts::CE = set_ce->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE) in&#xA;&#x9;&#xA;&#x9;set_ce->size() = 1 &#xA;implies&#xA;&#xA;self.tax_card_type=Tax_Card_Type::Principal and&#xA;self.deduction_CE_yearly = ce.deductible_amount and&#xA;self.deduction_CE_monthly = ce.deductible_amount/12 and&#xA;self.deduction_CE_daily = self.deduction_CE_monthly/25 /**25 working days per month**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_gNCn7JOXEeS0vu9n5JWWng" name="Tax_Card_FO-constraint" constrainedElement="_gNCn35OXEeS0vu9n5JWWng">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCn7ZOXEeS0vu9n5JWWng">
            <language>OCL</language>
            <body>not self.oclIsUndefined()&#xA;implies&#xA;self.income.taxPayer.income_Tax_Deduction->select(d|d.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO) and d.tax_year = self.valid_from_date)->size() = 1&#xA;&#xA;and &#xA;&#xA;let fo : Income_Tax_Deduction_Concepts::FO = self.income_Tax_Deduction->select(d|d.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO) and d.tax_year = self.valid_from_date)->any(true).oclAsType(Income_Tax_Deduction_Concepts::FO) in&#xA;self.deduction_FO_daily = fo.daily and&#xA;self.deduction_FO_monthly = fo.monthly and&#xA;self.deduction_FO_yearly = fo.yearly&#xA;</body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:id="_gNCn7pOXEeS0vu9n5JWWng" name="card_identifier" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCn75OXEeS0vu9n5JWWng" name="tax_card_type" visibility="public" type="_gNCniJOXEeS0vu9n5JWWng"/>
        <ownedAttribute xmi:id="_gNCn8JOXEeS0vu9n5JWWng" name="tax_office" visibility="public" type="_gNCni5OXEeS0vu9n5JWWng"/>
        <ownedAttribute xmi:id="_gNCn8ZOXEeS0vu9n5JWWng" name="valid_from_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_gOL3oZOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCn8pOXEeS0vu9n5JWWng" name="valid_until_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_gOL3oZOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCn85OXEeS0vu9n5JWWng" name="percentage_of_witholding" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCn9JOXEeS0vu9n5JWWng" name="income" visibility="private" type="_gNCm0ZOXEeS0vu9n5JWWng" association="_gNCnmpOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCn9ZOXEeS0vu9n5JWWng" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCn9pOXEeS0vu9n5JWWng" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCn95OXEeS0vu9n5JWWng" name="tax_Class" visibility="private" type="_gNCmn5OXEeS0vu9n5JWWng" association="_gNCnoJOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCn-JOXEeS0vu9n5JWWng" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCn-ZOXEeS0vu9n5JWWng" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCn-pOXEeS0vu9n5JWWng" name="tax_payers_SSno" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCn-5OXEeS0vu9n5JWWng" name="tax_payers_name_surname" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCn_JOXEeS0vu9n5JWWng" value="2"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCn_ZOXEeS0vu9n5JWWng" value="2"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCn_pOXEeS0vu9n5JWWng" name="tax_payers_partner_name_surname" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCn_5OXEeS0vu9n5JWWng" value="2"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCoAJOXEeS0vu9n5JWWng" value="2"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoAZOXEeS0vu9n5JWWng" name="tax_payers_address" visibility="public" type="_gNCB3ZOXEeS0vu9n5JWWng" isDerived="true"/>
        <ownedAttribute xmi:id="_gNCoApOXEeS0vu9n5JWWng" name="jobs_Employer_SSNo" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoA5OXEeS0vu9n5JWWng" name="jobs_employers_name" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoBJOXEeS0vu9n5JWWng" name="jobs_activity_type" visibility="public" type="_gNCnhJOXEeS0vu9n5JWWng" isDerived="true"/>
        <ownedAttribute xmi:id="_gNCoBZOXEeS0vu9n5JWWng" name="jobs_place_of_work" visibility="public" type="_gNCnlJOXEeS0vu9n5JWWng" isDerived="true"/>
        <ownedAttribute xmi:id="_gNCoBpOXEeS0vu9n5JWWng" name="deduction_FD_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoB5OXEeS0vu9n5JWWng" name="deduction_FD_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoCJOXEeS0vu9n5JWWng" name="deduction_FD_yearly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoCZOXEeS0vu9n5JWWng" name="deduction_AC_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoCpOXEeS0vu9n5JWWng" name="deduction_AC_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoC5OXEeS0vu9n5JWWng" name="deduction_AC_yearly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoDJOXEeS0vu9n5JWWng" name="deduction_CE_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoDZOXEeS0vu9n5JWWng" name="deduction_CE_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoDpOXEeS0vu9n5JWWng" name="deduction_CE_yearly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoD5OXEeS0vu9n5JWWng" name="deduction_DS_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoEJOXEeS0vu9n5JWWng" name="deduction_DS_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoEZOXEeS0vu9n5JWWng" name="deduction_DS_yearly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoEpOXEeS0vu9n5JWWng" name="deduction_FO_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoE5OXEeS0vu9n5JWWng" name="deduction_FO_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoFJOXEeS0vu9n5JWWng" name="deduction_FO_yearly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoFZOXEeS0vu9n5JWWng" name="credit_CIS_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoFpOXEeS0vu9n5JWWng" name="credit_CIS_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoF5OXEeS0vu9n5JWWng" name="credit_CIP_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoGJOXEeS0vu9n5JWWng" name="credit_CIM_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoGZOXEeS0vu9n5JWWng" name="credit_CIM_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoGpOXEeS0vu9n5JWWng" name="tax_Payer" visibility="private" type="_gNCCUpOXEeS0vu9n5JWWng" association="_gNCmlJOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCoG5OXEeS0vu9n5JWWng" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCoHJOXEeS0vu9n5JWWng" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoHZOXEeS0vu9n5JWWng" name="income_Tax_Credit" visibility="private" type="_gNCoM5OXEeS0vu9n5JWWng" aggregation="shared" association="_gNCoKpOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCoHpOXEeS0vu9n5JWWng" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCoH5OXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoIJOXEeS0vu9n5JWWng" name="income_Tax_Deduction" visibility="private" type="_gNCoqZOXEeS0vu9n5JWWng" aggregation="shared" association="_gNCoqJOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCoIZOXEeS0vu9n5JWWng" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCoIpOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoI5OXEeS0vu9n5JWWng" name="validity" visibility="protected">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoJJOXEeS0vu9n5JWWng" name="previous" visibility="private" type="_gNCn35OXEeS0vu9n5JWWng" association="_gNCoK5OXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCoJZOXEeS0vu9n5JWWng" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCoJpOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoJ5OXEeS0vu9n5JWWng" name="current_tax_card" visibility="private" type="_gNCn35OXEeS0vu9n5JWWng" association="_gNCoK5OXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCoKJOXEeS0vu9n5JWWng" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCoKZOXEeS0vu9n5JWWng" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_gNCoKpOXEeS0vu9n5JWWng" name="include" memberEnd="_gNCoP5OXEeS0vu9n5JWWng _gNCoHZOXEeS0vu9n5JWWng"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_gNCoK5OXEeS0vu9n5JWWng" name="invalidated by" memberEnd="_gNCoJJOXEeS0vu9n5JWWng _gNCoJ5OXEeS0vu9n5JWWng"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_gNCoLJOXEeS0vu9n5JWWng" name="Income_Tax_Credit_Concepts">
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCoLZOXEeS0vu9n5JWWng" name="CIM">
        <generalization xmi:id="_gNCoLpOXEeS0vu9n5JWWng" general="_gNCoM5OXEeS0vu9n5JWWng"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCoL5OXEeS0vu9n5JWWng" name="CIP">
        <generalization xmi:id="_gNCoMJOXEeS0vu9n5JWWng" general="_gNCoM5OXEeS0vu9n5JWWng"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCoMZOXEeS0vu9n5JWWng" name="CIS">
        <generalization xmi:id="_gNCoMpOXEeS0vu9n5JWWng" general="_gNCoM5OXEeS0vu9n5JWWng"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCoM5OXEeS0vu9n5JWWng" name="Income_Tax_Credit">
        <ownedAttribute xmi:id="_gNCoNJOXEeS0vu9n5JWWng" name="grantedBy" visibility="public" type="_gNCnbpOXEeS0vu9n5JWWng"/>
        <ownedAttribute xmi:id="_gNCoNZOXEeS0vu9n5JWWng" name="taxPayer" visibility="private" type="_gNCCUpOXEeS0vu9n5JWWng" association="_gNCnfZOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCoNpOXEeS0vu9n5JWWng" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCoN5OXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoOJOXEeS0vu9n5JWWng" name="tax_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoOZOXEeS0vu9n5JWWng" name="yearly" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_gNCoOpOXEeS0vu9n5JWWng" value="300">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoO5OXEeS0vu9n5JWWng" name="monthly" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_gNCoPJOXEeS0vu9n5JWWng" value="25">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoPZOXEeS0vu9n5JWWng" name="daily" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_gNCoPpOXEeS0vu9n5JWWng" value="1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoP5OXEeS0vu9n5JWWng" name="taxation_Frame" visibility="private" type="_gNCn35OXEeS0vu9n5JWWng" association="_gNCoKpOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCoQJOXEeS0vu9n5JWWng" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCoQZOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_gNCoQpOXEeS0vu9n5JWWng" name="Income_Tax_Deduction_Concepts">
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCoQ5OXEeS0vu9n5JWWng" name="FD">
        <generalization xmi:id="_gNCoRJOXEeS0vu9n5JWWng" general="_gNCoo5OXEeS0vu9n5JWWng"/>
        <ownedAttribute xmi:id="_gNCoRZOXEeS0vu9n5JWWng" name="distance_declared_in_january" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoRpOXEeS0vu9n5JWWng" name="calculated_distance" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_gNCoR5OXEeS0vu9n5JWWng" name="compute_distance_unit_between_home_and_workpalce" isQuery="true">
          <eAnnotations xmi:id="_gNCoSJOXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_gNCoSZOXEeS0vu9n5JWWng" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCoSpOXEeS0vu9n5JWWng" name="FO">
        <generalization xmi:id="_gNCoS5OXEeS0vu9n5JWWng" general="_gNCoo5OXEeS0vu9n5JWWng"/>
        <ownedAttribute xmi:id="_gNCoTJOXEeS0vu9n5JWWng" name="rate_type_for_FO" visibility="public" type="_gNCno5OXEeS0vu9n5JWWng" isDerived="true"/>
        <ownedOperation xmi:id="_gNCoTZOXEeS0vu9n5JWWng" name="compute_disability_flat_rate" isQuery="true">
          <eAnnotations xmi:id="_gNCoTpOXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_gNCoT5OXEeS0vu9n5JWWng" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_gNCoUJOXEeS0vu9n5JWWng" name="compute_regular_flat_rate" isQuery="true">
          <eAnnotations xmi:id="_gNCoUZOXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_gNCoUpOXEeS0vu9n5JWWng" key="lookup"/>
          </eAnnotations>
          <ownedParameter xmi:id="_gNCoU5OXEeS0vu9n5JWWng" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCoVJOXEeS0vu9n5JWWng" name="CE">
        <eAnnotations xmi:id="_gNCoVZOXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
        <generalization xmi:id="_gNCoVpOXEeS0vu9n5JWWng" general="_gNCoqZOXEeS0vu9n5JWWng"/>
        <ownedAttribute xmi:id="_gNCoV5OXEeS0vu9n5JWWng" name="ce_deduction_type" visibility="public" type="_gNCnppOXEeS0vu9n5JWWng"/>
        <ownedAttribute xmi:id="_gNCoWJOXEeS0vu9n5JWWng" name="dependent_relative_flat_rate" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoWZOXEeS0vu9n5JWWng" name="disability_flat_rate" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_gNCoWpOXEeS0vu9n5JWWng" name="compute_disability_flat_rate_for_CE" isQuery="true" postcondition="_gNCoXJOXEeS0vu9n5JWWng">
          <eAnnotations xmi:id="_gNCoW5OXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_gNCoXJOXEeS0vu9n5JWWng" name="compute_disability_flat_rate" constrainedElement="_gNCoWpOXEeS0vu9n5JWWng">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCoXZOXEeS0vu9n5JWWng">
              <language>OCL</language>
              <body>if self.ce_deduction_type = CE_Type::INALIDITY_AND_INFIRMITY then&#xA;&#x9;self.disability_flat_rate = IN_disability_flat_rate&#xA;else&#xA;&#x9;false&#xA;endif&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_gNCoXpOXEeS0vu9n5JWWng" name="IN_disability_flat_rate">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_gNCoX5OXEeS0vu9n5JWWng" name="compute_dependent_relative_flat_rate_for_CE" isQuery="true" postcondition="_gNCoYZOXEeS0vu9n5JWWng">
          <eAnnotations xmi:id="_gNCoYJOXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_gNCoYZOXEeS0vu9n5JWWng" name="dependent_relative_flat_rate" constrainedElement="_gNCoX5OXEeS0vu9n5JWWng">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCoYpOXEeS0vu9n5JWWng">
              <language>OCL</language>
              <body>if self.ce_deduction_type = CE_Type::DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD then&#xA;&#x9;self.dependent_relative_flat_rate = IN_dependent_relative_flat_rate&#xA;else&#x9;&#xA;&#x9;false&#xA;endif&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_gNCoY5OXEeS0vu9n5JWWng" name="IN_dependent_relative_flat_rate">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCoZJOXEeS0vu9n5JWWng" name="AC">
        <generalization xmi:id="_gNCoZZOXEeS0vu9n5JWWng" general="_gNCoqZOXEeS0vu9n5JWWng"/>
        <ownedOperation xmi:id="_gNCoZpOXEeS0vu9n5JWWng" name="is_eligible_income_for_AC" isQuery="true" postcondition="_gNCoaJOXEeS0vu9n5JWWng">
          <eAnnotations xmi:id="_gNCoZ5OXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_gNCoaJOXEeS0vu9n5JWWng" name="is_eligible_income_for_AC" constrainedElement="_gNCoZpOXEeS0vu9n5JWWng">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCoaZOXEeS0vu9n5JWWng">
              <language>OCL</language>
              <body>if IN_income.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or&#xA;&#x9;IN_income.income_type.oclIsTypeOf(Income_Concepts::Independent_Professional_Services_Income) or&#xA;&#x9;IN_income.income_type.oclIsTypeOf(Income_Concepts::Agriculture_and_Forestry_Income) or&#xA;&#x9;IN_income.income_type.oclIsTypeOf(Income_Concepts::Trade_and_Business_Income) then&#xA;&#x9;result = true&#xA;else&#xA;&#x9;result=false&#xA;endif&#xA; </body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_gNCoapOXEeS0vu9n5JWWng" name="IN_income" type="_gNCm0ZOXEeS0vu9n5JWWng"/>
          <ownedParameter xmi:id="_gNCoa5OXEeS0vu9n5JWWng" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_gNCobJOXEeS0vu9n5JWWng" name="is_eligible_income_for_AC_assisting_spouse" isQuery="true" postcondition="_gNCobpOXEeS0vu9n5JWWng">
          <eAnnotations xmi:id="_gNCobZOXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_gNCobpOXEeS0vu9n5JWWng" name="is_eligible_income_for_AC_assisting_spouse" constrainedElement="_gNCobJOXEeS0vu9n5JWWng">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCob5OXEeS0vu9n5JWWng">
              <language>OCL</language>
              <body>if  IN_income.income_type.oclIsTypeOf(Income_Concepts::Independent_Professional_Services_Income) or&#xA;&#x9;IN_income.income_type.oclIsTypeOf(Income_Concepts::Trade_and_Business_Income) then&#xA;&#x9;result = true&#xA;else&#xA;&#x9;result=false&#xA;endif&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_gNCocJOXEeS0vu9n5JWWng" name="IN_income" type="_gNCm0ZOXEeS0vu9n5JWWng"/>
          <ownedParameter xmi:id="_gNCocZOXEeS0vu9n5JWWng" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCocpOXEeS0vu9n5JWWng" name="DS_for_Permanent_Expense">
        <generalization xmi:id="_gNCoc5OXEeS0vu9n5JWWng" general="_gNCopZOXEeS0vu9n5JWWng"/>
        <ownedAttribute xmi:id="_gNCodJOXEeS0vu9n5JWWng" name="permanent_expense_category" visibility="public" type="_gNCnT5OXEeS0vu9n5JWWng"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCodZOXEeS0vu9n5JWWng" name="DS_for_Interest_Expense">
        <generalization xmi:id="_gNCodpOXEeS0vu9n5JWWng" general="_gNCopZOXEeS0vu9n5JWWng"/>
        <ownedOperation xmi:id="_gNCod5OXEeS0vu9n5JWWng" name="compute_maximum_deductible_amount" isQuery="true" postcondition="_gNCoeZOXEeS0vu9n5JWWng">
          <eAnnotations xmi:id="_gNCoeJOXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_gNCoeZOXEeS0vu9n5JWWng" name="maximum_deductible_amount" constrainedElement="_gNCod5OXEeS0vu9n5JWWng">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCoepOXEeS0vu9n5JWWng">
              <language>OCL</language>
              <body>result = 1 and&#xA;self.maximum_deductible_amount = 1&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_gNCoe5OXEeS0vu9n5JWWng" name="result" isOrdered="true" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_gNCofJOXEeS0vu9n5JWWng" name="IN_children_with_allowances" type="_gNCB5pOXEeS0vu9n5JWWng">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCofZOXEeS0vu9n5JWWng" value="*"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCofpOXEeS0vu9n5JWWng"/>
          </ownedParameter>
          <ownedParameter xmi:id="_gNCof5OXEeS0vu9n5JWWng" name="IN_legal_union" type="_gNCCGZOXEeS0vu9n5JWWng">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCogJOXEeS0vu9n5JWWng" value="*"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCogZOXEeS0vu9n5JWWng"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCogpOXEeS0vu9n5JWWng" name="DS_for_Health_and_Pension_Insurance">
        <generalization xmi:id="_gNCog5OXEeS0vu9n5JWWng" general="_gNCopZOXEeS0vu9n5JWWng"/>
        <ownedAttribute xmi:id="_gNCohJOXEeS0vu9n5JWWng" name="insurance_category" visibility="public" type="_gNCnWJOXEeS0vu9n5JWWng"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCohZOXEeS0vu9n5JWWng" name="DS_for_Private_Insurance_and_Plan">
        <generalization xmi:id="_gNCohpOXEeS0vu9n5JWWng" general="_gNCopZOXEeS0vu9n5JWWng"/>
        <ownedAttribute xmi:id="_gNCoh5OXEeS0vu9n5JWWng" name="private_insurance_and_plan_category" visibility="public" type="_gNCnUpOXEeS0vu9n5JWWng"/>
        <ownedAttribute xmi:id="_gNCoiJOXEeS0vu9n5JWWng" name="increase_for_life_insurance" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoiZOXEeS0vu9n5JWWng" name="maximum_deductible_amount_for_private_insurance" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoipOXEeS0vu9n5JWWng" name="maximum_deductible_amount_for_old_age_pension_plan" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_gNCoi5OXEeS0vu9n5JWWng" name="compute_increase_for_life_insurance" isQuery="true" postcondition="_gNCojZOXEeS0vu9n5JWWng">
          <eAnnotations xmi:id="_gNCojJOXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_gNCojZOXEeS0vu9n5JWWng" name="get_increase_for_life_insurance" constrainedElement="_gNCoi5OXEeS0vu9n5JWWng">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCojpOXEeS0vu9n5JWWng">
              <language>OCL</language>
              <body>result = 1&#xA;and self.increase_for_life_insurance = 1&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_gNCoj5OXEeS0vu9n5JWWng" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_gNCokJOXEeS0vu9n5JWWng" name="compute_maximum_deductible_amount_for_private_insruance" isQuery="true" postcondition="_gNCokpOXEeS0vu9n5JWWng">
          <eAnnotations xmi:id="_gNCokZOXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_gNCokpOXEeS0vu9n5JWWng" name="get_maximum_deductible_amount_for_private_insurance" constrainedElement="_gNCokJOXEeS0vu9n5JWWng">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCok5OXEeS0vu9n5JWWng">
              <language>OCL</language>
              <body>self.maximum_deductible_amount_for_private_insurance = 1&#xA;</body>
            </specification>
          </ownedRule>
        </ownedOperation>
        <ownedOperation xmi:id="_gNColJOXEeS0vu9n5JWWng" name="compute_maximum_deductible_amount_for_old_age_pension_plan" isQuery="true" postcondition="_gNColpOXEeS0vu9n5JWWng">
          <eAnnotations xmi:id="_gNColZOXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_gNColpOXEeS0vu9n5JWWng" name="maximum_deductible_amount_for_old_age_pension_plan" constrainedElement="_gNColJOXEeS0vu9n5JWWng">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCol5OXEeS0vu9n5JWWng">
              <language>OCL</language>
              <body>maximum_deductible_amount_for_old_age_pension_plan = 1&#xA;</body>
            </specification>
          </ownedRule>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNComJOXEeS0vu9n5JWWng" name="DS_for_Loss_Carryforward">
        <generalization xmi:id="_gNComZOXEeS0vu9n5JWWng" general="_gNCopZOXEeS0vu9n5JWWng"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCompOXEeS0vu9n5JWWng" name="DS_for_Donation">
        <generalization xmi:id="_gNCom5OXEeS0vu9n5JWWng" general="_gNCopZOXEeS0vu9n5JWWng"/>
        <ownedOperation xmi:id="_gNConJOXEeS0vu9n5JWWng" name="compute_maximum_deductible_amount_for_donation" isQuery="true" postcondition="_gNConpOXEeS0vu9n5JWWng">
          <eAnnotations xmi:id="_gNConZOXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_gNConpOXEeS0vu9n5JWWng" name="maximum_deductible_amount" constrainedElement="_gNConJOXEeS0vu9n5JWWng">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_gNCon5OXEeS0vu9n5JWWng">
              <language>OCL</language>
              <body>if IN_maximum_percentage = Constants::MAXIMUM_DEDUCTIBLE_PERCENTAGE_FOR_DONATIONS then&#xA;&#x9;self.maximum_deductible_amount = IN_maximum_percentage.oclAsType(Integer)/100 * IN_total_tax_payer_income&#xA;else&#xA;&#x9;false&#xA;endif&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_gNCooJOXEeS0vu9n5JWWng" name="IN_maximum_percentage" type="_gNCnr5OXEeS0vu9n5JWWng"/>
          <ownedParameter xmi:id="_gNCooZOXEeS0vu9n5JWWng" name="IN_total_tax_payer_income">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_gNCoopOXEeS0vu9n5JWWng" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCoo5OXEeS0vu9n5JWWng" name="Professional_Expenses_Deduction">
        <generalization xmi:id="_gNCopJOXEeS0vu9n5JWWng" general="_gNCoqZOXEeS0vu9n5JWWng"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCopZOXEeS0vu9n5JWWng" name="DS">
        <generalization xmi:id="_gNCoppOXEeS0vu9n5JWWng" general="_gNCoqZOXEeS0vu9n5JWWng"/>
        <ownedAttribute xmi:id="_gNCop5OXEeS0vu9n5JWWng" name="maximum_deductible_amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_gNCoqJOXEeS0vu9n5JWWng" name="considers" memberEnd="_gNCospOXEeS0vu9n5JWWng _gNCoIJOXEeS0vu9n5JWWng"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_gNCoqZOXEeS0vu9n5JWWng" name="Income_Tax_Deduction">
        <ownedAttribute xmi:id="_gNCoqpOXEeS0vu9n5JWWng" name="tax_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCoq5OXEeS0vu9n5JWWng" name="daily" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCorJOXEeS0vu9n5JWWng" name="monthly" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCorZOXEeS0vu9n5JWWng" name="yearly" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCorpOXEeS0vu9n5JWWng" name="tax_Payer" visibility="private" type="_gNCCUpOXEeS0vu9n5JWWng" association="_gNCnoZOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCor5OXEeS0vu9n5JWWng" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCosJOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCosZOXEeS0vu9n5JWWng" name="deductible_amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCospOXEeS0vu9n5JWWng" name="tax_card" visibility="private" type="_gNCn35OXEeS0vu9n5JWWng" association="_gNCoqJOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCos5OXEeS0vu9n5JWWng" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCotJOXEeS0vu9n5JWWng"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_gNCotZOXEeS0vu9n5JWWng" name="expenses" visibility="private" type="_gNCnXZOXEeS0vu9n5JWWng" association="_gNCouJOXEeS0vu9n5JWWng">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gNCotpOXEeS0vu9n5JWWng" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gNCot5OXEeS0vu9n5JWWng" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_gNCouJOXEeS0vu9n5JWWng" name="is computed based on" memberEnd="_gNCotZOXEeS0vu9n5JWWng _gNCna5OXEeS0vu9n5JWWng"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="_gNCouZOXEeS0vu9n5JWWng" name="Interface1"/>
    <packagedElement xmi:type="uml:DataType" xmi:id="_gNCoupOXEeS0vu9n5JWWng" name="DataType1"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_gNCou5OXEeS0vu9n5JWWng" name="Class1"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_gNCovJOXEeS0vu9n5JWWng" name="Class2"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_gNCovZOXEeS0vu9n5JWWng" name="Class3"/>
    <profileApplication xmi:id="_gNCovpOXEeS0vu9n5JWWng">
      <eAnnotations xmi:id="_gNCov5OXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://UML_PROFILES/Standard.profile.uml#_yzU58YinEdqtvbnfB2L_5w"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_PROFILES/Standard.profile.uml#_0"/>
    </profileApplication>
    <profileApplication xmi:id="_gNCowJOXEeS0vu9n5JWWng">
      <eAnnotations xmi:id="_gNCowZOXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="Default.profile.uml#_gOGWr5OXEeS0vu9n5JWWng"/>
      </eAnnotations>
      <appliedProfile href="Default.profile.uml#_gOGWrZOXEeS0vu9n5JWWng"/>
    </profileApplication>
    <profileApplication xmi:id="_gNCowpOXEeS0vu9n5JWWng">
      <eAnnotations xmi:id="_gNCow5OXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="Deployment.profile.uml#_gOFvs5OXEeS0vu9n5JWWng"/>
      </eAnnotations>
      <appliedProfile href="Deployment.profile.uml#_gOFvsZOXEeS0vu9n5JWWng"/>
    </profileApplication>
    <profileApplication xmi:id="_gNCoxJOXEeS0vu9n5JWWng">
      <eAnnotations xmi:id="_gNCoxZOXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="MARTE_VSL.profile.uml#_gOKp1ZOXEeS0vu9n5JWWng"/>
      </eAnnotations>
      <appliedProfile href="MARTE_VSL.profile.uml#_gOKp05OXEeS0vu9n5JWWng"/>
    </profileApplication>
    <profileApplication xmi:id="_gNCoxpOXEeS0vu9n5JWWng">
      <eAnnotations xmi:id="_gNCox5OXEeS0vu9n5JWWng" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="MARTE_Time.profile.uml#_gNDPQJOXEeS0vu9n5JWWng"/>
      </eAnnotations>
      <appliedProfile href="MARTE_Time.profile.uml#_gNDPPpOXEeS0vu9n5JWWng"/>
    </profileApplication>
  </uml:Package>
  <Default:Documentation xmi:id="_gNCoyJOXEeS0vu9n5JWWng" base_Comment="_gNCmtJOXEeS0vu9n5JWWng"/>
  <Default:Documentation xmi:id="_gNCoyZOXEeS0vu9n5JWWng" base_Comment="_gNCCGpOXEeS0vu9n5JWWng"/>
</xmi:XMI>
