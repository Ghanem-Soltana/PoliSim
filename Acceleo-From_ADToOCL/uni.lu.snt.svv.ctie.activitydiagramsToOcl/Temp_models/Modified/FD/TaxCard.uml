<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.1" xmlns:xmi="http://schema.omg.org/spec/XMI/2.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:Default="http:///schemas/Default/_fNm3AAqoEd6-N_NOT9vsCA/2" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/3.0.0/UML" xsi:schemaLocation="http:///schemas/Default/_fNm3AAqoEd6-N_NOT9vsCA/2 Default.profile.uml#_c4MVzRXxEeW_BuhzgfQfeA">
  <uml:Package xmi:id="_c4IDWhXxEeW_BuhzgfQfeA" name="TaxCard">
    <packageImport xmi:id="_c4IDWxXxEeW_BuhzgfQfeA">
      <importedPackage xmi:type="uml:Model" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#_0"/>
    </packageImport>
    <packageImport xmi:id="_c4IDXBXxEeW_BuhzgfQfeA">
      <importedPackage xmi:type="uml:Model" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#_0"/>
    </packageImport>
    <packageImport xmi:id="_c4IDXRXxEeW_BuhzgfQfeA">
      <importedPackage xmi:type="uml:Model" href="MARTELibrary.uml#_c4FnYxXxEeW_BuhzgfQfeA"/>
    </packageImport>
    <packagedElement xmi:type="uml:Package" xmi:id="_c4IDXhXxEeW_BuhzgfQfeA" name="Tax_Card_Domain">
      <packageImport xmi:id="_c4IDXxXxEeW_BuhzgfQfeA" importedPackage="_c4IqSBXxEeW_BuhzgfQfeA"/>
      <packageImport xmi:id="_c4IDYBXxEeW_BuhzgfQfeA" importedPackage="_c4IDZRXxEeW_BuhzgfQfeA"/>
      <packageImport xmi:id="_c4IDYRXxEeW_BuhzgfQfeA" importedPackage="_c4IqMhXxEeW_BuhzgfQfeA"/>
      <packageImport xmi:id="_c4IDYhXxEeW_BuhzgfQfeA" importedPackage="_c4IEVxXxEeW_BuhzgfQfeA"/>
      <packageImport xmi:id="_c4IDYxXxEeW_BuhzgfQfeA" importedPackage="_c4IElxXxEeW_BuhzgfQfeA"/>
      <packageImport xmi:id="_c4IDZBXxEeW_BuhzgfQfeA" importedPackage="_c4Ip5BXxEeW_BuhzgfQfeA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_c4IDZRXxEeW_BuhzgfQfeA" name="Tax_Payer_Concepts">
      <packagedElement xmi:type="uml:Association" xmi:id="_c4IDZhXxEeW_BuhzgfQfeA" name="taxed under" memberEnd="_c4IEGRXxEeW_BuhzgfQfeA _c4IESBXxEeW_BuhzgfQfeA"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IDZxXxEeW_BuhzgfQfeA" name="Income_Tax">
        <ownedAttribute xmi:id="_c4IDaBXxEeW_BuhzgfQfeA" name="taxPayer" visibility="private" type="_c4ID4hXxEeW_BuhzgfQfeA" association="_c4IERRXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IDaRXxEeW_BuhzgfQfeA" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IDahXxEeW_BuhzgfQfeA" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IDaxXxEeW_BuhzgfQfeA" name="tax_amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IDbBXxEeW_BuhzgfQfeA" name="tax_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_c4Fn5BXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IDbRXxEeW_BuhzgfQfeA" name="Address">
        <ownedAttribute xmi:id="_c4IDbhXxEeW_BuhzgfQfeA" name="taxPayer" visibility="private" type="_c4IDuxXxEeW_BuhzgfQfeA" association="_c4IEPBXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IDbxXxEeW_BuhzgfQfeA" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IDcBXxEeW_BuhzgfQfeA" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IDcRXxEeW_BuhzgfQfeA" name="country" visibility="public" type="_c4IFHRXxEeW_BuhzgfQfeA">
          <defaultValue xmi:type="uml:InstanceValue" xmi:id="_c4IDchXxEeW_BuhzgfQfeA" name="LU" type="_c4IFHRXxEeW_BuhzgfQfeA" instance="_c4IFHhXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IDcxXxEeW_BuhzgfQfeA" name="street" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IDdBXxEeW_BuhzgfQfeA" name="zipCode" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IDdRXxEeW_BuhzgfQfeA" name="city" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IDdhXxEeW_BuhzgfQfeA" name="Dependent">
        <generalization xmi:id="_c4IDdxXxEeW_BuhzgfQfeA" general="_c4IDuxXxEeW_BuhzgfQfeA"/>
        <ownedAttribute xmi:id="_c4IDeBXxEeW_BuhzgfQfeA" name="dependent_type" visibility="public" type="_c4IFQhXxEeW_BuhzgfQfeA"/>
        <ownedAttribute xmi:id="_c4IDeRXxEeW_BuhzgfQfeA" name="household" visibility="private" type="_c4IDohXxEeW_BuhzgfQfeA" association="_c4IEQxXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IDehXxEeW_BuhzgfQfeA" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IDexXxEeW_BuhzgfQfeA" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IDfBXxEeW_BuhzgfQfeA" name="responsible_person" visibility="private" type="_c4ID4hXxEeW_BuhzgfQfeA" association="_c4IEQhXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IDfRXxEeW_BuhzgfQfeA" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IDfhXxEeW_BuhzgfQfeA" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IDfxXxEeW_BuhzgfQfeA" name="continued_studies" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_c4IDgBXxEeW_BuhzgfQfeA">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IDgRXxEeW_BuhzgfQfeA" name="expense" visibility="private" type="_c4IFBBXxEeW_BuhzgfQfeA" association="_c4IERBXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IDghXxEeW_BuhzgfQfeA" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IDgxXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IDhBXxEeW_BuhzgfQfeA" name="tax_Payer" visibility="private" type="_c4ID4hXxEeW_BuhzgfQfeA" association="_c4IEQRXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IDhRXxEeW_BuhzgfQfeA" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IDhhXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_c4IDhxXxEeW_BuhzgfQfeA" name="compute_if_dependent_receives_allowances_eligible_for_CIM" isQuery="true">
          <eAnnotations xmi:id="_c4IDiBXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_c4IDiRXxEeW_BuhzgfQfeA" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_c4IDihXxEeW_BuhzgfQfeA" name="compute_if_dependent_receives_allowances_eligible_for_DS" isQuery="true">
          <eAnnotations xmi:id="_c4IDixXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_c4IDjBXxEeW_BuhzgfQfeA" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_c4IDjRXxEeW_BuhzgfQfeA" name="compute_if_dependent_receives_allowances_eligible_for_CE_dependance_and_care" isQuery="true">
          <eAnnotations xmi:id="_c4IDjhXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_c4IDjxXxEeW_BuhzgfQfeA" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_c4IDkBXxEeW_BuhzgfQfeA" name="is_dependent_following_continued_studies" isQuery="true" postcondition="_c4IDkhXxEeW_BuhzgfQfeA">
          <eAnnotations xmi:id="_c4IDkRXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_c4IDkhXxEeW_BuhzgfQfeA" name="is_dependent_following_continued_studies" constrainedElement="_c4IDkBXxEeW_BuhzgfQfeA">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IDkxXxEeW_BuhzgfQfeA">
              <language>OCL</language>
              <body>self.continued_studies = IN_continued_studies&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_c4IDlBXxEeW_BuhzgfQfeA" name="IN_continued_studies">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_c4IDlRXxEeW_BuhzgfQfeA" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IDlhXxEeW_BuhzgfQfeA" name="External_Allowance">
        <ownedAttribute xmi:id="_c4IDlxXxEeW_BuhzgfQfeA" name="amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IDmBXxEeW_BuhzgfQfeA" name="grantor" visibility="public" type="_c4IFFRXxEeW_BuhzgfQfeA"/>
        <ownedAttribute xmi:id="_c4IDmRXxEeW_BuhzgfQfeA" name="person" visibility="private" type="_c4IDuxXxEeW_BuhzgfQfeA" association="_c4IEPRXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IDmhXxEeW_BuhzgfQfeA" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IDmxXxEeW_BuhzgfQfeA" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IDnBXxEeW_BuhzgfQfeA" name="valid_from_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_c4Fn5BXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IDnRXxEeW_BuhzgfQfeA" name="valid_until_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_c4Fn5BXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IDnhXxEeW_BuhzgfQfeA" name="Fiscal_Address">
        <generalization xmi:id="_c4IDnxXxEeW_BuhzgfQfeA" general="_c4IDbRXxEeW_BuhzgfQfeA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IDoBXxEeW_BuhzgfQfeA" name="Habitual_Address">
        <generalization xmi:id="_c4IDoRXxEeW_BuhzgfQfeA" general="_c4IDbRXxEeW_BuhzgfQfeA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IDohXxEeW_BuhzgfQfeA" name="Household">
        <ownedAttribute xmi:id="_c4IDoxXxEeW_BuhzgfQfeA" name="tax_Payer" visibility="private" type="_c4ID4hXxEeW_BuhzgfQfeA" association="_c4IEQBXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IDpBXxEeW_BuhzgfQfeA" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IDpRXxEeW_BuhzgfQfeA" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IDphXxEeW_BuhzgfQfeA" name="dependent" visibility="private" type="_c4IDdhXxEeW_BuhzgfQfeA" association="_c4IEQxXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IDpxXxEeW_BuhzgfQfeA" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IDqBXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IDqRXxEeW_BuhzgfQfeA" name="Legal_Union_Record">
        <ownedComment xmi:id="_c4IDqhXxEeW_BuhzgfQfeA" annotatedElement="_c4IDqRXxEeW_BuhzgfQfeA">
          <body>&lt;p>&lt;span style=&quot;font-size:16pt;&quot;>When&amp;nbsp;a&amp;nbsp;decision&amp;nbsp;for&amp;nbsp;Dates&amp;nbsp;would&amp;nbsp;be&amp;nbsp;taken,&amp;nbsp;&lt;/span>&lt;/p>&lt;p>&lt;span style=&quot;font-size:16pt;&quot;>we&amp;nbsp;must&amp;nbsp;take&amp;nbsp;into&amp;nbsp;account&amp;nbsp;that&amp;nbsp;all&amp;nbsp;marriages&amp;nbsp;and&amp;nbsp;partnerships&amp;nbsp;are&amp;nbsp;mutually&amp;nbsp;exclusive.&lt;/span>&lt;/p></body>
        </ownedComment>
        <ownedRule xmi:id="_c4IDqxXxEeW_BuhzgfQfeA" name="Legal_Union-different_people-constraint" constrainedElement="_c4IDqRXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IDrBXxEeW_BuhzgfQfeA">
            <language>OCL</language>
            <body>if self.end_date.oclIsUndefined() then&#xA;/**LEGAL UNION IS VALID**/&#xA;self.individual_A.SSNo &lt;> self.individual_B.SSNo&#xA;and&#xA;self.individual_A->size()=1 and&#xA;self.individual_B->size()=1&#xA;else&#xA;/**LEGAL UNION IS AUTHORIZED WITH ONLY ONE PERSON**/&#xA;false&#xA;endif&#xA;</body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:id="_c4IDrRXxEeW_BuhzgfQfeA" name="start_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_c4Fn5BXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IDrhXxEeW_BuhzgfQfeA" name="end_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_c4Fn5BXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IDrxXxEeW_BuhzgfQfeA" name="individual_A" visibility="private" type="_c4IDuxXxEeW_BuhzgfQfeA" association="_c4IEPxXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IDsBXxEeW_BuhzgfQfeA" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IDsRXxEeW_BuhzgfQfeA" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IDshXxEeW_BuhzgfQfeA" name="individual_B" visibility="private" type="_c4IDuxXxEeW_BuhzgfQfeA" association="_c4IEPhXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IDsxXxEeW_BuhzgfQfeA" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IDtBXxEeW_BuhzgfQfeA" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IDtRXxEeW_BuhzgfQfeA" name="Marriage_Record">
        <generalization xmi:id="_c4IDthXxEeW_BuhzgfQfeA" general="_c4IDqRXxEeW_BuhzgfQfeA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IDtxXxEeW_BuhzgfQfeA" name="Non_Resident_Tax_Payer">
        <generalization xmi:id="_c4IDuBXxEeW_BuhzgfQfeA" general="_c4ID4hXxEeW_BuhzgfQfeA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IDuRXxEeW_BuhzgfQfeA" name="Partnership_Record">
        <generalization xmi:id="_c4IDuhXxEeW_BuhzgfQfeA" general="_c4IDqRXxEeW_BuhzgfQfeA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IDuxXxEeW_BuhzgfQfeA" name="Physical_Person">
        <ownedAttribute xmi:id="_c4IDvBXxEeW_BuhzgfQfeA" name="name" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IDvRXxEeW_BuhzgfQfeA" name="is_assisting_spouse" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IDvhXxEeW_BuhzgfQfeA" name="SSNo" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IDvxXxEeW_BuhzgfQfeA" name="allowances" visibility="private" type="_c4IDlhXxEeW_BuhzgfQfeA" association="_c4IEPRXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IDwBXxEeW_BuhzgfQfeA" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IDwRXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IDwhXxEeW_BuhzgfQfeA" name="addresses" visibility="private" type="_c4IDbRXxEeW_BuhzgfQfeA" association="_c4IEPBXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IDwxXxEeW_BuhzgfQfeA" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IDxBXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IDxRXxEeW_BuhzgfQfeA" name="legal_union_A" visibility="private" type="_c4IDqRXxEeW_BuhzgfQfeA" association="_c4IEPxXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IDxhXxEeW_BuhzgfQfeA" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IDxxXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IDyBXxEeW_BuhzgfQfeA" name="legal_union_B" visibility="private" type="_c4IDqRXxEeW_BuhzgfQfeA" association="_c4IEPhXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IDyRXxEeW_BuhzgfQfeA" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IDyhXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IDyxXxEeW_BuhzgfQfeA" name="age" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IDzBXxEeW_BuhzgfQfeA" name="disability_percentage" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_c4IDzRXxEeW_BuhzgfQfeA">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IDzhXxEeW_BuhzgfQfeA" name="is_affiliated_personnaly_to_social_security" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_c4IDzxXxEeW_BuhzgfQfeA" name="is_separated_from" isQuery="true">
          <eAnnotations xmi:id="_c4ID0BXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_c4ID0RXxEeW_BuhzgfQfeA" key="computaion"/>
          </eAnnotations>
          <ownedParameter xmi:id="_c4ID0hXxEeW_BuhzgfQfeA" name="IN_person" type="_c4IDuxXxEeW_BuhzgfQfeA"/>
          <ownedParameter xmi:id="_c4ID0xXxEeW_BuhzgfQfeA" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_c4ID1BXxEeW_BuhzgfQfeA" name="is_person_assisting_spouse" isQuery="true" postcondition="_c4ID1hXxEeW_BuhzgfQfeA">
          <eAnnotations xmi:id="_c4ID1RXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_c4ID1hXxEeW_BuhzgfQfeA" name="is_assisting_spouse" constrainedElement="_c4ID1BXxEeW_BuhzgfQfeA">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4ID1xXxEeW_BuhzgfQfeA">
              <language>OCL</language>
              <body>self.is_assisting_spouse = IN_assisting_spouse&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_c4ID2BXxEeW_BuhzgfQfeA" name="IN_assisting_spouse">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_c4ID2RXxEeW_BuhzgfQfeA" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_c4ID2hXxEeW_BuhzgfQfeA" name="is_person_affiliated_personnaly_to_social_security" isQuery="true" postcondition="_c4ID3BXxEeW_BuhzgfQfeA">
          <eAnnotations xmi:id="_c4ID2xXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_c4ID3BXxEeW_BuhzgfQfeA" name="is_person_affiliated_personnaly_affiliated_to_social_security" constrainedElement="_c4ID2hXxEeW_BuhzgfQfeA">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4ID3RXxEeW_BuhzgfQfeA">
              <language>OCL</language>
              <body>self.is_affiliated_personnaly_to_social_security = IN_personnaly_affiliated&#xA;&#xA;&#xA;&#xA;&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_c4ID3hXxEeW_BuhzgfQfeA" name="IN_personnaly_affiliated">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_c4ID3xXxEeW_BuhzgfQfeA" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4ID4BXxEeW_BuhzgfQfeA" name="Resident_Tax_Payer">
        <generalization xmi:id="_c4ID4RXxEeW_BuhzgfQfeA" general="_c4ID4hXxEeW_BuhzgfQfeA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4ID4hXxEeW_BuhzgfQfeA" name="Tax_Payer">
        <ownedRule xmi:id="_c4ID4xXxEeW_BuhzgfQfeA" name="NonResidentTaxPayer-constraint" constrainedElement="_c4IDtxXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4ID5BXxEeW_BuhzgfQfeA">
            <language>OCL</language>
            <body>&#x9;self.addresses->exists( fiscal_add:Address | &#xA;&#x9;&#x9;fiscal_add.oclIsTypeOf(Fiscal_Address) and fiscal_add.country&lt;>Country::LU) and&#xA;&#x9;self.addresses->exists( hab_add:Address | &#xA;&#x9;&#x9;hab_add.oclIsTypeOf(Habitual_Address) and hab_add.country&lt;>Country::LU) and&#xA;&#x9;self.incomes->exists(inc:Income_Concepts::Income | inc.oclIsTypeOf(Income_Concepts::Local_Income))&#xA;implies&#xA;&#x9;self.oclIsTypeOf(Non_Resident_Tax_Payer)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_c4ID5RXxEeW_BuhzgfQfeA" name="ResidentTaxPayer-constraint" constrainedElement="_c4ID4BXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4ID5hXxEeW_BuhzgfQfeA">
            <language>OCL</language>
            <body>&#x9;self.addresses->exists( fiscal_add:Address | &#xA;&#x9;&#x9;fiscal_add.oclIsTypeOf(Fiscal_Address) and fiscal_add.country=Country::LU) or&#xA;&#x9;self.addresses->exists( hab_add:Address | &#xA;&#x9;&#x9;hab_add.oclIsTypeOf(Habitual_Address) and hab_add.country=Country::LU) &#xA;implies&#xA;&#x9;self.oclIsTypeOf(Resident_Tax_Payer)</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_c4ID5xXxEeW_BuhzgfQfeA" name="SubjectToIncomeTax-constraint" constrainedElement="_c4ID4hXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4ID6BXxEeW_BuhzgfQfeA" name="subjectToIncomeTax ">
            <language>OCL</language>
            <body>&#x9;self.incomes->exists(inc:Income_Concepts::Income |&#xA;&#x9;&#x9; inc.oclIsTypeOf(Income_Concepts::Local_Income) or inc.oclIsTypeOf(Income_Concepts::Foreign_Income))&#xA;implies&#xA;&#x9;not self.incomeTax->isEmpty()&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_c4ID6RXxEeW_BuhzgfQfeA" name="TaxCredit-CIS-constraint" constrainedElement="_c4ID4hXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4ID6hXxEeW_BuhzgfQfeA">
            <language>OCL</language>
            <body>let   employement_income: Set(Income_Concepts::Income) = &#xA;      &#x9;self.incomes->select(inc|&#xA;      &#x9;&#x9;inc.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;not inc.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;   &#x9;   &#x9;&#x9;inc.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) and&#xA;       &#x9;&#x9;inc.start_date_within_taxation_year=self.incomeTax.tax_year),&#xA;       &#x9;total_income: Integer = employement_income.income_amount->sum(),&#xA;&#x9;&#x9;tax_liability :Integer = employement_income.tax_liability->sum() in&#xA;&#x9;&#x9;&#x9; &#x9;&#x9; &#xA;&#x9;&#x9;&#xA;&#x9;if(employement_income->size()>0) then&#xA;&#x9;&#x9; if (total_income>936*tax_liability) then&#xA;&#x9;&#x9; let set_of_CIS: Set(Income_Tax_Credit_Concepts::Income_Tax_Credit) = self.income_Tax_Credit->select(type|type.oclIsTypeOf(Income_Tax_Credit_Concepts::CIS) and type.tax_year=self.incomeTax.tax_year),&#xA;&#x9;&#x9;&#x9;size_set_of_CIS :Integer = set_of_CIS->size(),&#xA;&#x9;&#x9;&#x9; a_CIS: Income_Tax_Credit_Concepts::Income_Tax_Credit = set_of_CIS->any(true) in&#xA;&#x9; &#x9;    &#xA;&#x9; &#x9;    size_set_of_CIS = 1 and&#xA;&#x9;&#x9;&#x9;/**CIS IS CREDITED TO THE TAX PAYER**/&#xA;&#x9;&#x9;&#x9;a_CIS.yearly = Constants::FLAT_RATE_CIS_YEARLY.oclAsType(Integer)*tax_liability&#xA;      &#x9;else&#xA;      &#x9;&#x9;/**ERROR CIS CANNOT BE CREDITED**/&#xA;      &#x9;&#x9;false&#xA;      &#x9;endif&#x9;&#xA;     else&#xA;     &#x9;false&#xA;     endif&#xA;  &#xA;    </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_c4ID6xXxEeW_BuhzgfQfeA" name="TaxCredit-CIP-constraint" constrainedElement="_c4ID4hXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4ID7BXxEeW_BuhzgfQfeA">
            <language>OCL</language>
            <body>let   employement_income: Set(Income_Concepts::Income) = &#xA;      &#x9;self.incomes->select(inc|&#xA;      &#x9;&#x9;inc.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;not inc.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;   &#x9;   &#x9;&#x9;inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) and&#xA;       &#x9;&#x9;inc.start_date_within_taxation_year=self.incomeTax.tax_year),&#xA;       &#x9;total_income: Integer = employement_income.income_amount->sum(),&#xA;&#x9;&#x9;tax_liability :Integer = employement_income.tax_liability->sum() in&#xA;&#x9;&#x9;&#x9; &#x9;&#x9; &#xA;&#x9;if(employement_income->size()>0) then&#xA;&#x9;&#x9; if (total_income>936*tax_liability) then&#xA;&#x9;&#x9; let set_of_CIP: Set(Income_Tax_Credit_Concepts::Income_Tax_Credit) = self.income_Tax_Credit->select(type|type.oclIsTypeOf(Income_Tax_Credit_Concepts::CIP) and type.tax_year=self.incomeTax.tax_year),&#xA;&#x9;&#x9;&#x9;size_set_of_CIP :Integer = set_of_CIP->size(),&#xA;&#x9;&#x9;&#x9; a_CIP: Income_Tax_Credit_Concepts::Income_Tax_Credit = set_of_CIP->any(true) in&#xA;&#x9; &#x9;    &#xA;&#x9; &#x9;    size_set_of_CIP = 1 and&#xA;&#x9;&#x9;&#x9;/**CIP IS CREDITED TO THE TAX PAYER**/&#xA;&#x9;&#x9;&#x9;a_CIP.yearly = Constants::FLAT_RATE_CIP_YEARLY.oclAsType(Integer) *tax_liability&#xA;      &#x9;else&#xA;      &#x9;&#x9;/**ERROR CIP CANNOT BE CREDITED**/&#xA;      &#x9;&#x9;false&#xA;      &#x9;endif&#x9;&#xA;     else&#xA;     &#x9;false&#xA;     endif&#xA;      &#x9;&#xA;      &#x9;&#xA;    </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_c4ID7RXxEeW_BuhzgfQfeA" name="TaxCredit-CIM-constraint" constrainedElement="_c4ID4hXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4ID7hXxEeW_BuhzgfQfeA">
            <language>OCL</language>
            <body>let&#xA; a_CIM : Income_Tax_Credit_Concepts::CIM = self.income_Tax_Credit->select(c | c.oclIsTypeOf(Income_Tax_Credit_Concepts::CIM) and c.tax_year = self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Credit_Concepts::CIM),&#xA; current_employement_income: Set(Income_Concepts::Income) = self.incomes->select(inc|&#xA;      &#x9;&#x9;inc.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;(inc.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)) and&#xA;      &#x9;&#x9;inc.start_date_within_taxation_year=self.incomeTax.tax_year) ,&#xA;      &#x9;&#x9;&#xA;income_TaxClass1A: Set(Income_Concepts::Income) = &#xA;      &#x9;&#x9;current_employement_income->select(inc|&#xA;      &#x9;&#x9;      &#x9;&#x9;inc.oclAsType(Income_Concepts::Local_Income).tax_card->exists(tc|tc.tax_Class = Tax_Class_Category::One_A)),&#xA;tax_liability : Integer = income_TaxClass1A.tax_liability->sum()&#xA;      &#x9;&#x9;in&#xA;&#xA;       if (current_employement_income->size()>0) then&#xA;&#x9;&#x9;&#x9;if &#x9;(income_TaxClass1A->size()>0) then&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;let child_with_allowances : Set(Dependent) = self.dependents->select(dep:Dependent|dep.dependent_type=Dependent_Type::CHILD and dep.compute_if_dependent_receives_allowances_eligible_for_CIM()=true and&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;dep.allowances->exists(al|al.valid_from_date=self.incomeTax.tax_year and al.valid_until_date = self.incomeTax.tax_year)=true) in&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9; if  child_with_allowances ->size()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CIM ALLOWED**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;a_CIM.yearly= Constants::FLAT_RATE_CIM_YEARLY.oclAsType(Integer) * tax_liability&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9; else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CIM, MISSING CHILD ALLOWANCE**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9; endif&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CIM, NOT TAX CLASS 1A**/&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CIM, NOT ELIGIBLE INCOME*/&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#xA;&#xA;&#x9;&#xA;/**NAVIGATION&#xA;self.tax_class&#xA;self.income_Tax_Credit->&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;self.tax_class&#xA;self.incomeTax.tax_year&#xA;self.incomes&#xA;inc.oclAsType(Income_Concepts::Local_Income).tax_card&#xA;self.incomeTax.tax_year&#xA;self.dependents&#xA;dep.allowances&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;**/</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_c4ID7xXxEeW_BuhzgfQfeA" name="Legal_Union-monogamus-constraint" constrainedElement="_c4ID4hXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4ID8BXxEeW_BuhzgfQfeA">
            <language>OCL</language>
            <body>let legal_union: Set(Legal_Union_Record) = self.legal_union_A->select(couple|couple.end_date->isEmpty()) in&#xA;if (legal_union->size()=1) then&#x9;&#xA;&#x9;/**YOU ARE IN LIGEL UNION WITH ONLY ONE PERSON**/&#xA;&#x9;true&#xA;else&#xA;&#x9;/**ERROR YOU CANNOT BE IN LEGAL UNION WITH MORE THAN ONE PERSON**/&#xA;&#x9;false&#xA;endif&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_c4ID8RXxEeW_BuhzgfQfeA" name="TaxClass-unique-constraint" constrainedElement="_c4ID4hXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4ID8hXxEeW_BuhzgfQfeA">
            <language>OCL</language>
            <body>let tax_classes: Set(Tax_Class) = self.tax_class->select(tax_classe|tax_class.valid_until_date->isEmpty()) in&#xA;if tax_classes->size()=1 then&#x9;&#xA;&#x9;/**ONLY ONE TAX CLASS AT TIME**/&#xA;&#x9;true&#xA;else&#xA;&#x9;/**ERROR YOU CANNOT HAVE SEVERAL TAX CLASSES AT TIME**/&#xA;&#x9;false&#xA;endif</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_c4ID8xXxEeW_BuhzgfQfeA" name="TaxDeduction-CE-constraint" constrainedElement="_c4ID4hXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4ID9BXxEeW_BuhzgfQfeA">
            <language>OCL</language>
            <body>let set_of_CE: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::CE) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year),&#xA;&#x9; CE_invalidity:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::INALIDITY_AND_INFIRMITY),&#xA;&#x9; CE_dependence:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD),&#xA;&#x9; CE_child_not_part_of_household:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::CARE_FOR_CHILDREN_NOT_BEING_PART_OF_HOUSEHOLD),&#xA;&#x9; income_subject_to_witholding_tax : Set(Income_Concepts::Income) = self.incomes->select(income|income.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not income.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.start_date_within_taxation_year = self.incomeTax.tax_year),&#xA; &#x9; extraordinary_expenses : &#x9;Set(Expense_Concepts::Expense) = self.expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclIsTypeOf(Expense_Concepts::Extraordinary_Expense_CE)),&#x9;&#xA; &#x9; extraordinary_expense_invalidity_and_infirmity  : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::INALIDITY_AND_INFIRMITY),&#xA; &#x9; extraordinary_expense_dependence_and_care : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD), &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA; &#x9; extraordinary_expense_care_for_children_not_part_of_the_household : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::CARE_FOR_CHILDREN_NOT_BEING_PART_OF_HOUSEHOLD),  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#xA;&#x9; declared_expense:Integer=extraordinary_expenses.declared_amount->sum() in&#xA;&#x9; &#xA;&#x9;if (income_subject_to_witholding_tax->size()>0) then&#xA;&#x9;&#x9;if (extraordinary_expenses->any(true).oclAsType(Expense_Concepts::Extraordinary_Expense_CE).is_above_thresholded_deduction_percentage_for_CE()=true) then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if extraordinary_expense_invalidity_and_infirmity->size()>0 then &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if self.oclIsTypeOf(Resident_Tax_Payer) then&#xA;&#x9;&#x9;&#x9;&#x9;/**CE FOR INVALIDITY AND INFIRMITY ON THE TAX CARD**/&#xA;&#x9;&#x9;&#x9;&#x9;CE_invalidity->size() = 1&#x9;and&#xA;&#x9;&#x9;&#x9;&#x9;CE_invalidity->any(true).deductible_amount = CE_invalidity->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).disability_flat_rate&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if  extraordinary_expense_dependence_and_care ->size()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->size()=1 and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;let &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expenses_for_dependence_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::DEPENDENCE_CARE) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; expenses_for_house_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|expense.expense_purpose=Expense_Purpose::HOUSE_CARE) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; expenses_for_child_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::CHILD_CARE),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;amount_house_care: Integer = expenses_for_house_care.declared_amount->sum(),&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sum_of_expenses:Integer =  expenses_for_child_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.compute_if_dependent_receives_allowances_eligible_for_CE_dependance_and_care() =true and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.dependent_type=Dependent_Type::CHILD and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(expense.dependent.oclAsType(Physical_Person).age&lt;14) or&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.oclAsType(Physical_Person).disability_percentage>0).declared_amount->sum() in&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(expenses_for_child_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CHILD CARE, CHILDREN BEING PART OF THE HOUSHOLD**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(amount_house_care + sum_of_expenses)>Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(expenses_for_dependence_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CLOSE RELATIVE DEPENDENCE CARE**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount = Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer)+ CE_dependence->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).dependent_relative_flat_rate&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;CE_dependence->any(true).deductible_amount = Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(expenses_for_dependence_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CLOSE RELATIVE DEPENDENCE CARE**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount= amount_house_care + sum_of_expenses + CE_dependence->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).dependent_relative_flat_rate&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount= amount_house_care + sum_of_expenses&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif &#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if  CE_child_not_part_of_household->size()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; CE_child_not_part_of_household->size()= 1 and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CARE FOR CHILDREN NOT BEING PART OF THE HOUSEHOLD**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;let&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expenses_for_child_not_part_of_houselod_care: Set(Expense_Concepts::Expense) = self.expenses->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::CHILD_CARE),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;sum_expenses_for_children:Integer = expenses_for_child_not_part_of_houselod_care->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.compute_if_dependent_receives_allowances_eligible_for_CE_dependance_and_care() =false and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;((expense.dependent.age&lt;=21) or&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(expense.dependent.age>21 and expense.dependent.continued_studies=true and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.tax_Payer.incomes.income_amount->sum()&lt;0.6*Constants::MINIMUM_SALARY.oclAsType(Integer)))).declared_amount->sum() in&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(sum_expenses_for_children>Constants::MAXIMUM_CE_RATE_FOR_CHILD_NOT_BEING_PART_OF_HOUSEHOLD.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;CE_child_not_part_of_household->any(true).deductible_amount  = Constants::MAXIMUM_CE_RATE_FOR_CHILD_NOT_BEING_PART_OF_HOUSEHOLD.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_child_not_part_of_household->any(true).deductible_amount = sum_expenses_for_children&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;/*use it to fill the tax card, temporary until decision on how to model the tax card with respect to the tax payer&#xA;&#x9;&#x9;&#x9;CE_invalidity->any(true).deductible_amount +&#xA;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount + &#xA;&#x9;&#x9;&#x9;CE_child_not_part_of_household->any(true).deductible_amount */&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CE, NOT SUBJECT TO WITHOLDING**/&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#x9;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_c4ID9RXxEeW_BuhzgfQfeA" name="TaxDeduction-AC-extra_professional-constraint" constrainedElement="_c4ID4hXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4ID9hXxEeW_BuhzgfQfeA">
            <language>OCL</language>
            <body>let set_of_AC: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::AC) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year),&#xA;&#x9;ac: Income_Tax_Deduction_Concepts::AC = set_of_AC->any(true).oclAsType(Income_Tax_Deduction_Concepts::AC),&#xA;&#x9;spouse: Physical_Person = self.legal_union_A->select(couple|couple.end_date->isEmpty())->any(true).individual_B,&#xA;&#x9;taxpayer_income_eligible_type : Boolean = self.incomes->exists(inc|ac.is_eligible_income_for_AC(inc)),&#xA;&#x9;spouse_income_eligible_type : Boolean = spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->exists(inc|ac.is_eligible_income_for_AC(inc)),&#xA;&#x9;&#xA;&#x9;taxpayer_income_eligible_type_assisting_spouse : Boolean = self.incomes->exists(inc|ac.is_eligible_income_for_AC_assisting_spouse(inc)),&#xA;&#x9;spouse_income_eligible_type_assisting_spouse : Boolean = spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->exists(inc|ac.is_eligible_income_for_AC_assisting_spouse(inc)),&#xA;&#x9;&#xA;&#x9;taxpayer_personnaly_affiliated_to_social_security : Boolean = self.is_affiliated_personnaly_to_social_security,&#xA;&#x9;taxpayer_assisting_spouse: Boolean = self.is_assisting_spouse,&#xA;&#x9;&#xA;&#x9;spouse_personnaly_affiliated_to_social_security : Boolean = spouse.is_affiliated_personnaly_to_social_security,&#xA;&#x9;spouse_assisting_spouse: Boolean =  spouse.is_assisting_spouse&#xA;&#x9;in&#xA;&#x9; &#xA;&#x9; if taxpayer_income_eligible_type=true and spouse_income_eligible_type=true then&#xA;&#x9; &#x9;if taxpayer_personnaly_affiliated_to_social_security=true  and spouse_personnaly_affiliated_to_social_security = true then&#xA;&#x9; &#x9;&#x9;ac.deductible_amount= Constants::FLAT_RATE_FOR_EXTRA_PROFESSIONAL_DEDUCTION&#xA;&#x9; &#x9;else&#xA;&#x9; &#x9;&#x9;false&#xA;&#x9; &#x9;endif&#xA;&#x9; else&#xA;&#x9; &#x9;&#x9;if taxpayer_income_eligible_type=true xor spouse_income_eligible_type=true then&#x9; &#x9;&#x9;&#xA;&#x9; &#x9;&#x9;&#x9;if  self.incomes->exists(inc|inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) and inc.compute_duration_of_contract() &lt;=36) xor&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exists(inc|inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)  and inc.compute_duration_of_contract() &lt;=36) then&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;true&#x9; &#x9;&#x9;&#x9;&#x9;&#xA;&#x9; &#x9;&#x9;&#x9;else&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;ac.deductible_amount=0 &#xA;&#x9; &#x9;&#x9;&#x9;endif&#x9;&#xA;&#x9; &#x9;&#x9;&#x9;&#xA;&#x9; &#x9;&#x9;else&#xA;&#x9; &#x9;&#x9;&#x9; if taxpayer_income_eligible_type_assisting_spouse=true xor taxpayer_income_eligible_type_assisting_spouse=true then&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;if (taxpayer_personnaly_affiliated_to_social_security=true and spouse_personnaly_affiliated_to_social_security = false)  xor &#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;(taxpayer_personnaly_affiliated_to_social_security=false and spouse_personnaly_affiliated_to_social_security = true) then&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;else&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;ac.deductible_amount=0&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9; else&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;ac.deductible_amount =0 &#xA;&#x9;&#x9;&#x9; endif&#xA;&#x9; &#x9;endif&#xA;&#x9; endif&#xA;/**NAVIGATIONS&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;self.income_Tax_Deduction->&#xA;self.incomeTax.tax_year&#xA;self.legal_union_A->select&#xA;self.incomes->exists&#xA;spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->exists&#xA;self.incomes->exists(i&#xA;spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->&#xA;self.incomes->exists(&#xA;inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)&#xA;spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->&#xA;inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)**/</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_c4ID9xXxEeW_BuhzgfQfeA" name="TaxDeduction-DS-1-permanent_expense" constrainedElement="_c4ID4hXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4ID-BXxEeW_BuhzgfQfeA">
            <language>OCL</language>
            <body>let &#xA;permanent_expense: Set(Expense_Concepts::Expense) = self.expenses->select(expense|expense.oclIsTypeOf(Expense_Concepts::Permanent_Expense) and expense.year_expense_was_incurred_in=self.incomeTax.tax_year),&#xA;alimony: Set(Expense_Concepts::Expense) = permanent_expense->select(alimony|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;alimony.oclAsType(Expense_Concepts::Permanent_Expense).category = Expense_Concepts::Category_of_Permanent_Expense::ALIMONY and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;alimony.oclAsType(Expense_Concepts::Permanent_Expense).is_eligible_for_deduction = true),&#xA;debt: Set(Expense_Concepts::Expense) = permanent_expense->select(debt|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;debt.oclAsType(Expense_Concepts::Permanent_Expense).category = Expense_Concepts::Category_of_Permanent_Expense::MISCELLANEOUS_DEBT),&#xA;ds_alimony: Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense).permanent_expense_category =  Expense_Concepts::Category_of_Permanent_Expense::ALIMONY and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense),&#xA;tax_liability : Integer = self.incomes.tax_liability->sum(),&#xA;ds_debt: Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense).permanent_expense_category =  Expense_Concepts::Category_of_Permanent_Expense::MISCELLANEOUS_DEBT and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense)&#xA;&#x9;   in&#x9;&#xA;&#xA;if permanent_expense->size()>0 then&#xA;&#x9;if debt->size()>0 then&#xA;&#x9;&#x9;ds_debt.deductible_amount = debt.declared_amount->sum()/2 * tax_liability&#xA;&#x9;else&#xA;&#x9;&#x9;false&#xA;&#x9;endif and&#xA;&#x9;if alimony->size()>0 then&#xA;&#x9;&#x9;alimony->forAll(al|self.is_separated_from(al.dependent)=true)&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;let sum_alimony: Integer = alimony.declared_amount->sum() * tax_liability in&#xA;&#x9;&#x9;if sum_alimony&lt;=Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ALIMONY_EXPENSE.oclAsType(Integer) then&#xA;&#x9;&#x9;&#x9;ds_alimony.deductible_amount = sum_alimony&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;ds_alimony.deductible_amount = Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ALIMONY_EXPENSE.oclAsType(Integer) &#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif&#xA;&#xA;/**NAVIGATION&#xA;self.expenses->select&#xA;self.incomeTax.tax_year&#xA;self.income_Tax_Deduction->select&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;al.dependent**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_c4ID-RXxEeW_BuhzgfQfeA" name="TaxDeduction-DS-2-interest_expense" constrainedElement="_c4ID4hXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4ID-hXxEeW_BuhzgfQfeA">
            <language>OCL</language>
            <body>self.incomes->forAll(inc |&#xA;&#xA;if (inc.end_date_within_taxation_year = self.incomeTax.tax_year) then&#xA;&#xA;let &#xA;interest_expense: Set(Expense_Concepts::Expense) = inc.expenses->select(expense|expense.oclIsTypeOf(Expense_Concepts::Interest_Expense) and expense.year_expense_was_incurred_in=self.incomeTax.tax_year),&#xA;ds_interest_expense: Income_Tax_Deduction_Concepts::DS_for_Interest_Expense = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Interest_Expense) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.expenses->includesAll(interest_expense) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Interest_Expense),&#xA;dependent_children_with_allowances: Set(Dependent) = self.dependents->select(deps|deps.compute_if_dependent_receives_allowances_eligible_for_DS() =true),&#xA;tax_liability : Integer =inc.tax_liability in &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;if interest_expense->size()>0 then&#xA;&#x9;let sum_interest_expense: Integer = interest_expense.declared_amount->sum() in&#xA;&#x9;if sum_interest_expense&lt;=ds_interest_expense.maximum_deductible_amount then&#xA;&#x9;&#xA;&#x9;&#x9;ds_interest_expense.deductible_amount = sum_interest_expense * tax_liability&#xA;&#x9;else&#xA;&#x9;&#x9;ds_interest_expense.deductible_amount = ds_interest_expense.maximum_deductible_amount * tax_liability&#x9;&#x9;&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif&#xA;else&#xA;false&#xA;endif&#xA;)&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_c4ID-xXxEeW_BuhzgfQfeA" name="TaxDeduction-DS-3-health_and_pension_insurance" constrainedElement="_c4ID4hXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4ID_BXxEeW_BuhzgfQfeA">
            <language>OCL</language>
            <body>self.incomes->forAll( inc | &#xA;&#xA;let &#xA;mandatory_health_and_pension_insurance: Set(Expense_Concepts::Expense) = inc.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Health_and_Pension_Insurance).category =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::MANDATORY_HEALTH_AND_PENSION_INSURANCE&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Health_and_Pension_Insurance).is_related_to_additional_salary=true),&#xA;additional_pension_insurance: Set(Expense_Concepts::Expense) = inc.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Health_and_Pension_Insurance).category =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::ADDITIONAL_EMPLOYERS_PENSION_INSURANCE),&#xA;continued_health_and_pension_insurance: Set(Expense_Concepts::Expense) = inc.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Health_and_Pension_Insurance).category =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::CONTINUED_HEALTH_AND_PENSION_INSURANCE),&#xA;ds_mandatory_health_and_pension : Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance).insurance_category = &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::MANDATORY_HEALTH_AND_PENSION_INSURANCE and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year and type.expenses->includesAll(mandatory_health_and_pension_insurance)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance),&#xA;ds_additional_pension_insurance : Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance).insurance_category = &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::ADDITIONAL_EMPLOYERS_PENSION_INSURANCE and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and type.expenses->includesAll(additional_pension_insurance)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance),&#xA;ds_continued_health_and_pension_insurance : Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance).insurance_category = &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::CONTINUED_HEALTH_AND_PENSION_INSURANCE and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and type.expenses->includesAll(continued_health_and_pension_insurance)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance),&#xA;tax_liability : Integer = inc.tax_liability  in &#xA;&#xA;if mandatory_health_and_pension_insurance->size()>0 then&#xA;&#x9;if inc.oclIsTypeOf(Income_Concepts::Employment_Income) then&#xA;&#x9;let sum_mandatory_health_and_pension_insurance : Integer = mandatory_health_and_pension_insurance.declared_amount->sum() in&#xA;&#x9;&#x9;ds_mandatory_health_and_pension.deductible_amount = sum_mandatory_health_and_pension_insurance&#xA;&#x9;else&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif &#xA;and&#xA;if additional_pension_insurance->size()>0 then&#xA;&#x9;if inc.oclIsTypeOf(Income_Concepts::Employment_Income) then&#xA;&#x9;let sum_additional_pension_insurance : Integer = additional_pension_insurance.declared_amount->sum() in&#xA;&#x9;&#x9;if&#x9;sum_additional_pension_insurance &lt;= Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ADDITIONAL_PENSION_AND_INSURANCE.oclAsType(Integer) then&#xA;&#x9;&#x9;&#x9;ds_additional_pension_insurance.deductible_amount = sum_additional_pension_insurance&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;ds_additional_pension_insurance.deductible_amount = Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ADDITIONAL_PENSION_AND_INSURANCE.oclAsType(Integer)&#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif and&#xA;if continued_health_and_pension_insurance->size()>0 then&#xA;&#x9;let sum_continued_health_and_pension_insurance : Integer = continued_health_and_pension_insurance.declared_amount->sum() in&#xA;&#x9;&#x9;ds_continued_health_and_pension_insurance.deductible_amount = tax_liability * sum_continued_health_and_pension_insurance&#xA;else&#xA;&#x9;false&#xA;endif&#xA;)&#xA;&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_c4ID_RXxEeW_BuhzgfQfeA" name="TaxDeduction-DS-4-private_insurance_and_plan" constrainedElement="_c4ID4hXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4ID_hXxEeW_BuhzgfQfeA">
            <language>OCL</language>
            <body>let &#xA;insurance_and_plan: Set(Expense_Concepts::Expense) = self.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).category &lt;>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::OLD_AGE_PENSION_PLAN&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).category &lt;>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::PRIVATE_LIFE_INSURANCE&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).is_private_insurance_and_plan_eligible_for_deduction=true),&#xA;life_insurance: Set(Expense_Concepts::Expense) = self.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).category =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::PRIVATE_LIFE_INSURANCE&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).is_private_insurance_and_plan_eligible_for_deduction=true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).duration_of_contract >=10),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;old_age_pension_plan: Set(Expense_Concepts::Expense) = self.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).category =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::OLD_AGE_PENSION_PLAN&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).is_private_insurance_and_plan_eligible_for_deduction=true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).duration_of_contract >=10),&#xA;ds_private_insurance_and_plan: Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan).private_insurance_and_plan_category &lt;> &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::OLD_AGE_PENSION_PLAN and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan),&#xA;ds_old_age_pension_plan: Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan).private_insurance_and_plan_category = &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::OLD_AGE_PENSION_PLAN and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan),&#xA;tax_liability : Integer = self.incomes.tax_liability->sum() in&#xA;&#xA;if insurance_and_plan->size()>0 then&#xA;&#xA;let sum_insurance_and_plan : Integer = insurance_and_plan.declared_amount->sum() + life_insurance.declared_amount->sum() + &#xA;      &#x9;&#x9;&#x9;ds_private_insurance_and_plan.increase_for_life_insurance in&#xA;&#x9;&#x9;&#xA;if&#x9;sum_insurance_and_plan &lt;= ds_private_insurance_and_plan.maximum_deductible_amount_for_private_insurance then&#xA;&#x9;&#x9;&#x9;ds_private_insurance_and_plan.deductible_amount = sum_insurance_and_plan&#xA;&#x9;else&#xA;&#x9;&#x9;&#x9;ds_private_insurance_and_plan.deductible_amount = ds_private_insurance_and_plan.maximum_deductible_amount_for_private_insurance&#x9;&#x9;&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif&#xA;&#xA;and&#xA;&#xA;if old_age_pension_plan->size()>0 then&#xA;let sum_old_age_pension_plan : Integer = old_age_pension_plan.declared_amount->sum() in&#xA;&#x9;if&#x9;sum_old_age_pension_plan &lt;= ds_old_age_pension_plan.maximum_deductible_amount_for_old_age_pension_plan then&#xA;&#x9;&#x9;&#x9;ds_old_age_pension_plan.deductible_amount = sum_old_age_pension_plan&#xA;&#x9;else&#xA;&#x9;&#x9;&#x9;ds_old_age_pension_plan.deductible_amount = ds_old_age_pension_plan.maximum_deductible_amount_for_private_insurance&#x9;&#x9;&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif&#xA;&#xA;/**NAVIGATIONS&#xA;self.expenses->&#xA;self.incomeTax.tax_year&#xA;self.expenses->&#xA;self.incomeTax.tax_year->&#xA;self.expenses->&#xA;self.incomeTax.tax_year&#xA;self.income_Tax_Deduction->select&#xA;self.incomeTax.tax_year&#xA;**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_c4ID_xXxEeW_BuhzgfQfeA" name="TaxDeduction-DS-5-donation" constrainedElement="_c4ID4hXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IEABXxEeW_BuhzgfQfeA">
            <language>OCL</language>
            <body>let &#xA;donations: Set(Expense_Concepts::Expense) = self.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Donation)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;or expense.oclAsType(Expense_Concepts::Donation).is_donation_reported = true)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Donation).is_beneficiary_eligible=true),&#xA;ds_donation: Income_Tax_Deduction_Concepts::DS_for_Donation = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Donation) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Donation) in &#x9;&#x9;&#x9;&#x9;&#x9;&#xA;if donations->size()>0 then&#xA;&#x9;let sum_donation: Integer = donations.declared_amount->sum() in&#xA;&#x9;if sum_donation >= Constants::MINIMUM_DEDUCTIBLE_AMOUNT_FOR_DONATIONS.oclAsType(Integer) then&#xA;&#x9;&#x9;if sum_donation &lt;= ds_donation.maximum_deductible_amount then&#xA;&#x9;&#x9;ds_donation.deductible_amount = sum_donation&#xA;&#x9;else&#xA;&#x9;&#x9;ds_donation.deductible_amount = ds_donation.maximum_deductible_amount&#xA;&#x9;endif&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif&#xA;&#xA; </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_c4IEARXxEeW_BuhzgfQfeA" name="TaxDeduction-DS-6-loss_carryforward" constrainedElement="_c4ID4hXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IEAhXxEeW_BuhzgfQfeA">
            <language>OCL</language>
            <body>self.incomes->forAll( inc | &#xA;&#xA;                            if (&#xA;                            &#x9;&#x9;(inc.income_type.oclIsTypeOf(Income_Concepts::Agriculture_and_Forestry_Income) or&#xA;                            &#x9;&#x9;inc.income_type.oclIsTypeOf(Income_Concepts::Independent_Professional_Services_Income) or&#xA;                                inc.income_type.oclIsTypeOf(Income_Concepts::Trade_and_Business_Income))&#xA;                               and (inc.end_date_within_taxation_year = self.incomeTax.tax_year)) then /**PUT &lt;, when deciding how to model Date or how to use &quot;&lt;&quot; with the Marte Profile **/&#xA;                               let&#xA;                                 &#x9;losses: Set(Expense_Concepts::Expense) = inc.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Loss_Carryforward) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).regular_accountability = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).compensation_by_other_means=false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).tax_payer_has_been_partner_in_business = false),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;losses_successor: Set(Expense_Concepts::Expense) = inc.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Loss_Carryforward) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).regular_accountability = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).compensation_by_other_means=false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).tax_payer_has_been_partner_in_business = true &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).tax_payer_has_inherited_business_ownership = true),&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ds_loss: Income_Tax_Deduction_Concepts::DS_for_Loss_Carryforward = losses.deduction->select(type| &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Loss_Carryforward) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Loss_Carryforward) in &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(inc.end_date_within_taxation_year = 1990) then /**PUT &lt;, when deciding how to model Date or how to use &quot;&lt;&quot; with the Marte Profile **/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;if losses.declared_amount->sum()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ds_loss.deductible_amount =  losses.declared_amount->sum()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if losses_successor.declared_amount->sum() >0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ds_loss.deductible_amount = losses_successor.declared_amount->sum() &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ds_loss.deductible_amount = 0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; else &#xA;                                &#x9;&#x9; false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif)&#xA;&#xA;/**NAVIGATIONS:&#xA;self.incomes->&#xA;inc.expenses->&#xA;inc.expenses->&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;losses.deduction->&#xA;inc.income_type&#xA;inc.income_type&#xA;inc.income_type&#xA;**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_c4IEAxXxEeW_BuhzgfQfeA" name="TaxCard-unique-constraint" constrainedElement="_c4ID4hXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IEBBXxEeW_BuhzgfQfeA">
            <language>OCL</language>
            <body>self.incomes->forAll(income|income.tax_card->select(tc|tc.validity=true)->size() &lt;= 1)&#xA;/**THE INCOME CAN HAVE AT MOST ONE VALID TAX CARD, IF THE CONTRACT HAS ENDED THAN IT IS ZERO VALID**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_c4IEBRXxEeW_BuhzgfQfeA" name="TaxDeduction-FD-constraint" constrainedElement="_c4ID4hXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IEBhXxEeW_BuhzgfQfeA">
            <language>OCL</language>
            <body>self.incomes->forAll(income|&#xA;&#xA;&#x9;let &#xA;&#x9;&#x9;fd_expenses : Set(Expense_Concepts::Expense)= self.expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Travel_Expense_FD) and&#xA;&#x9;&#x9;&#x9;exp.year_expense_was_incurred_in=self.incomeTax.tax_year),&#xA;&#x9;&#x9;declared_amount : Integer = fd_expenses.declared_amount->sum(),&#xA;&#x9;&#x9;a_FD:Income_Tax_Deduction_Concepts::FD= self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::FD) and type.tax_year=self.incomeTax.tax_year and&#xA;&#x9;&#x9;&#x9;type.expenses->includesAll(fd_expenses))->any(true).oclAsType(Income_Tax_Deduction_Concepts::FD) in&#xA;&#xA;if ((income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) or&#xA;income.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or&#xA;income.income_type.oclIsTypeOf(Income_Concepts::Rentals_and_Leases_Income)) and&#xA;income.start_date_within_taxation_year = self.incomeTax.tax_year) then&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#xA;&#x9;&#x9;if  (a_FD.calculated_distance>a_FD.distance_declared_in_january) then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if  (a_FD.calculated_distance>Constants::MINIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;if (a_FD.calculated_distance>Constants::MAXIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/**MAXIMAL FLAT DISTANCE FOR TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;a_FD.deductible_amount = Constants::FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT.oclAsType(Integer) * Constants::MAXIMAL_FLAT_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/**REAL DISTANCE FOR TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;a_FD.deductible_amount = Constants::FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT.oclAsType(Integer) * a_FD.calculated_distance&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;/**NO TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;a_FD.deductible_amount = 0&#xA;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/*NO CHANGES FOR FD, TRAVEL EXPENSE IS ALREADY DEDUCED FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;endif&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;a_FD.yearly=  a_FD.deductible_amount and&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;a_FD.monthly = a_FD.deductible_amount/12 and&#xA;&#x9;&#x9;a_FD.daily = a_FD.monthly/24&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE FD FOR TRAVEL EXPENSE, THERE IS NO INCOME TYPE ELIGIBLE FOR FD**/&#xA;&#x9;&#x9;a_FD.deductible_amount = 0&#xA;&#x9;endif&#xA;)&#xA;&#xA;&#xA;/** NAVIGATIONS&#xA;self.incomes&#xA;self.expenses&#xA;self.incomeTax&#xA;self.income_Tax_Deduction&#xA;type.expenses&#xA;income.income_type&#xA;income.income_type&#xA;income.income_type&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_c4IEBxXxEeW_BuhzgfQfeA" name="TaxDeduction-FO-constraint" constrainedElement="_c4ID4hXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IECBXxEeW_BuhzgfQfeA">
            <language>OCL</language>
            <body>self.incomes->forAll(income| &#xA;let &#xA;&#x9; fo_expenses : Set(Expense_Concepts::Expense) = income.expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Miscellaneous_Expense_FO) and exp.year_expense_was_incurred_in = self.incomeTax.tax_year),&#xA;&#x9; declared_expense:Integer=fo_expenses.declared_amount->sum(),&#xA;&#x9; set_of_FO: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|type.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO) &#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and type.tax_year=self.incomeTax.tax_year&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and type.expenses->includesAll(fo_expenses)),&#xA;&#x9; size_set_of_FO:Integer = set_of_FO->size(),&#xA;&#x9; a_FO:Income_Tax_Deduction_Concepts::FO=set_of_FO->any(true).oclAsType(Income_Tax_Deduction_Concepts::FO),&#xA;&#x9; income_type_for_taxpayer_authorized_for_FO : Boolean = ((income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) or&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.income_type.oclIsTypeOf(Income_Concepts::Rentals_and_Leases_Income)) and&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.start_date_within_taxation_year = self.incomeTax.tax_year)&#x9; in&#xA;if size_set_of_FO>1 then&#xA;&#x9;/**TAX PAYER CANNOT RECEIVE MORE THAN ONE FO PER INCOME AND EXPENSES ATTACHED TO THE INCOME**/&#xA;&#x9;false&#xA;else&#xA;&#x9;if income_type_for_taxpayer_authorized_for_FO = true then&#xA;&#x9;&#x9;if(not self.taxed_jointly) then &#xA;&#x9;&#x9;&#x9;if(declared_expense> Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;a_FO.rate_type_for_FO = Type_of_Rate::REAL_COST&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;a_FO.rate_type_for_FO = Type_of_Rate::REGULAR&#xA;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/**FLAT RATE OR REAL COSTS DEFINED BY JOINT TAXATION**/&#xA;&#x9;&#x9;&#x9;/*do we want to care about this, or up to the agent to decide*/&#xA;&#x9;&#x9;&#x9;let spouse_FO: Income_Tax_Deduction_Concepts::FO =  self.legal_union_A.individual_B.oclAsType(Tax_Payer).income_Tax_Deduction->&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select(type|type.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO))->any(true).oclAsType(Income_Tax_Deduction_Concepts::FO),&#xA;&#x9;&#x9;&#x9;&#x9; spouse_declared_expense:Integer=self.legal_union_A.individual_B.oclAsType(Tax_Payer).expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Miscellaneous_Expense_FO))->any(true).declared_amount in&#xA;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;(a_FO.rate_type_for_FO = Type_of_Rate::REAL_COST and declared_expense> Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer) and spouse_FO.rate_type_for_FO = Type_of_Rate::REGULAR) xor&#xA;&#x9;&#x9;&#x9;(a_FO.rate_type_for_FO = Type_of_Rate::REGULAR and spouse_FO.rate_type_for_FO = Type_of_Rate::REAL_COST and  spouse_declared_expense>Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)) &#xA;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if (a_FO.rate_type_for_FO = Type_of_Rate::REGULAR) then&#xA;&#x9;&#x9;&#x9;/*FLAT RATE FOR FO EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;a_FO.oclAsType(Income_Tax_Deduction_Concepts::Income_Tax_Deduction).deductible_amount = Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)+Constants::DISABILITY_FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/**REAL COST FOR FO EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;a_FO.deductible_amount = declared_expense+Constants::DISABILITY_FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)&#xA;&#xA;&#x9;&#x9;endif&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;a_FO.yearly=  a_FO.deductible_amount and&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;a_FO.monthly = a_FO.deductible_amount/12 and&#xA;&#x9;&#x9;a_FO.daily = a_FO.monthly/24&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE FO, THERE IS NO INCOME TYPE ELIGIBLE FOR FO**/&#xA;&#x9;&#x9;a_FO.deductible_amount = 0&#xA;&#x9;endif&#xA;endif&#xA;)&#xA;&#xA;/**NAVIGATION &#xA;&#xA;self.income_Tax_Deduction->select(type|type.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO) and type.tax_year=self.incomeTax.tax_year),&#xA;self.incomeTax.tax_year&#xA;self.incomes->select(income&#xA;income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)&#xA;income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)&#xA;income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)&#xA;self.expenses->select(exp&#xA;self.legal_union_A.individual_B.oclAsType(Tax_Payer).income_Tax_Deduction->&#xA;self.legal_union_A.individual_B.oclAsType(Tax_Payer).expenses->selec&#xA;a_FO.oclAsType(Income_Tax_Deduction_Concepts::Income_Tax_Deduction).tax_year&#xA;&#xA;&#xA;**/</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_c4IECRXxEeW_BuhzgfQfeA" name="NEW_TaxDeduction-CE-INVALIDITY" constrainedElement="_c4ID4hXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IEChXxEeW_BuhzgfQfeA">
            <language>OCL</language>
            <body>let set_of_CE: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::CE) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year),&#xA;&#x9; CE_invalidity:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::INALIDITY_AND_INFIRMITY),&#xA;&#x9;income_subject_to_witholding_tax : Set(Income_Concepts::Income) = self.incomes->select(income|income.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not income.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.start_date_within_taxation_year = self.incomeTax.tax_year),&#xA; &#x9; extraordinary_expenses : &#x9;Set(Expense_Concepts::Expense) = self.expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclIsTypeOf(Expense_Concepts::Extraordinary_Expense_CE)),&#x9;&#xA; &#x9; extraordinary_expense_invalidity_and_infirmity  : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::INALIDITY_AND_INFIRMITY),&#x9;&#xA;&#x9; declared_expense:Integer=extraordinary_expense_invalidity_and_infirmity.declared_amount->sum() in&#xA;&#x9;if (income_subject_to_witholding_tax->size()>0) then&#xA;&#x9;&#x9;if (extraordinary_expenses->any(true).oclAsType(Expense_Concepts::Extraordinary_Expense_CE).is_above_thresholded_deduction_percentage_for_CE()=true) then&#xA;&#x9;&#x9;&#x9;if extraordinary_expense_invalidity_and_infirmity->size()>0 then &#xA;&#x9;&#x9;&#x9;&#x9;if self.oclIsTypeOf(Resident_Tax_Payer) then&#xA;&#x9;&#x9;&#x9;&#x9;/**CE FOR INVALIDITY AND INFIRMITY ON THE TAX CARD**/&#xA;&#x9;&#x9;&#x9;&#x9;CE_invalidity->size() = 1&#x9;and&#xA;&#x9;&#x9;&#x9;&#x9;CE_invalidity->any(true).deductible_amount = CE_invalidity->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).disability_flat_rate&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;endif&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;false&#xA;&#x9;&#x9;endif&#x9;&#xA;else&#xA;false&#xA;endif&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_c4IECxXxEeW_BuhzgfQfeA" name="NEW_TaxDeduction-CE-DEPENDENCE-AND-CARE" constrainedElement="_c4ID4hXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IEDBXxEeW_BuhzgfQfeA">
            <language>OCL</language>
            <body>let set_of_CE: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::CE) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year),&#xA;&#x9; CE_dependence:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD),&#xA;&#x9; income_subject_to_witholding_tax : Set(Income_Concepts::Income) = self.incomes->select(income|income.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not income.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.start_date_within_taxation_year = self.incomeTax.tax_year),&#xA; &#x9; extraordinary_expenses : &#x9;Set(Expense_Concepts::Expense) = self.expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclIsTypeOf(Expense_Concepts::Extraordinary_Expense_CE)),&#x9;&#xA; &#x9; extraordinary_expense_dependence_and_care : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD), &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9; declared_expense:Integer=extraordinary_expense_dependence_and_care.declared_amount->sum() in&#xA;&#x9; &#xA;&#x9;if (income_subject_to_witholding_tax->size()>0) then&#xA;&#x9;&#x9;if (extraordinary_expenses->any(true).oclAsType(Expense_Concepts::Extraordinary_Expense_CE).is_above_thresholded_deduction_percentage_for_CE()=true) then&#xA;&#x9;&#x9;&#x9;&#x9;if  extraordinary_expense_dependence_and_care ->size()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->size()=1 and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;let &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expenses_for_dependence_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::DEPENDENCE_CARE) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; expenses_for_house_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|expense.expense_purpose=Expense_Purpose::HOUSE_CARE) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; expenses_for_child_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::CHILD_CARE),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;amount_house_care: Integer = expenses_for_house_care.declared_amount->sum(),&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sum_of_expenses:Integer =  expenses_for_child_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.compute_if_dependent_receives_allowances_eligible_for_CE_dependance_and_care() =true and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.dependent_type=Dependent_Type::CHILD and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(expense.dependent.oclAsType(Physical_Person).age&lt;14) or&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.oclAsType(Physical_Person).disability_percentage>0).declared_amount->sum() in&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(expenses_for_child_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CHILD CARE, CHILDREN BEING PART OF THE HOUSHOLD**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(amount_house_care + sum_of_expenses)>Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(expenses_for_dependence_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CLOSE RELATIVE DEPENDENCE CARE**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount = Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer)+ CE_dependence->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).dependent_relative_flat_rate&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;CE_dependence->any(true).deductible_amount = Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(expenses_for_dependence_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CLOSE RELATIVE DEPENDENCE CARE**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount= amount_house_care + sum_of_expenses + CE_dependence->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).dependent_relative_flat_rate&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount= amount_house_care + sum_of_expenses&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   endif &#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;endif&#x9;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CE, NOT SUBJECT TO WITHOLDING**/&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#x9;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_c4IEDRXxEeW_BuhzgfQfeA" name="NEW_TaxDeduction-CE-DEPENDENCE-AND-CARE-CHILDREN-NOT-PART-OF-HOUSEHOLD" constrainedElement="_c4ID4hXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IEDhXxEeW_BuhzgfQfeA">
            <language>OCL</language>
            <body>let set_of_CE: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::CE) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year),&#xA;&#x9; CE_child_not_part_of_household:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::CARE_FOR_CHILDREN_NOT_BEING_PART_OF_HOUSEHOLD),&#xA;&#x9; income_subject_to_witholding_tax : Set(Income_Concepts::Income) = self.incomes->select(income|income.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not income.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.start_date_within_taxation_year = self.incomeTax.tax_year),&#xA; &#x9; extraordinary_expenses : &#x9;Set(Expense_Concepts::Expense) = self.expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclIsTypeOf(Expense_Concepts::Extraordinary_Expense_CE)),&#x9;&#xA; &#x9; extraordinary_expense_care_for_children_not_part_of_the_household : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::CARE_FOR_CHILDREN_NOT_BEING_PART_OF_HOUSEHOLD),  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#xA;&#x9; declared_expense:Integer=extraordinary_expense_care_for_children_not_part_of_the_household.declared_amount->sum() in&#xA;&#x9; &#x9; &#xA;&#x9;if (income_subject_to_witholding_tax->size()>0) then&#xA;&#x9;&#x9;if (extraordinary_expenses->any(true).oclAsType(Expense_Concepts::Extraordinary_Expense_CE).is_above_thresholded_deduction_percentage_for_CE()=true) then&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;     if  CE_child_not_part_of_household->size()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; CE_child_not_part_of_household->size()= 1 and&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CARE FOR CHILDREN NOT BEING PART OF THE HOUSEHOLD**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;let&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expenses_for_child_not_part_of_houselod_care: Set(Expense_Concepts::Expense) = self.expenses->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::CHILD_CARE),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;sum_expenses_for_children:Integer = expenses_for_child_not_part_of_houselod_care->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.compute_if_dependent_receives_allowances_eligible_for_CE_dependance_and_care() =false and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;((expense.dependent.age&lt;=21) or&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(expense.dependent.age>21 and expense.dependent.continued_studies=true and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.tax_Payer.incomes.income_amount->sum()&lt;0.6*Constants::MINIMUM_SALARY.oclAsType(Integer)))).declared_amount->sum() in&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(sum_expenses_for_children>Constants::MAXIMUM_CE_RATE_FOR_CHILD_NOT_BEING_PART_OF_HOUSEHOLD.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;CE_child_not_part_of_household->any(true).deductible_amount  = Constants::MAXIMUM_CE_RATE_FOR_CHILD_NOT_BEING_PART_OF_HOUSEHOLD.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_child_not_part_of_household->any(true).deductible_amount = sum_expenses_for_children&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CE, NOT SUBJECT TO WITHOLDING**/&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#x9;</body>
          </specification>
        </ownedRule>
        <generalization xmi:id="_c4IEDxXxEeW_BuhzgfQfeA" general="_c4IDuxXxEeW_BuhzgfQfeA"/>
        <ownedAttribute xmi:id="_c4IEEBXxEeW_BuhzgfQfeA" name="incomes" visibility="private" type="_c4IEeBXxEeW_BuhzgfQfeA" association="_c4IFHBXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IEERXxEeW_BuhzgfQfeA" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IEEhXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IEExXxEeW_BuhzgfQfeA" name="incomeTax" visibility="private" type="_c4IDZxXxEeW_BuhzgfQfeA" association="_c4IERRXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IEFBXxEeW_BuhzgfQfeA" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IEFRXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IEFhXxEeW_BuhzgfQfeA" name="income_Tax_Credit" visibility="private" type="_c4IqORXxEeW_BuhzgfQfeA" association="_c4IFJBXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IEFxXxEeW_BuhzgfQfeA" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IEGBXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IEGRXxEeW_BuhzgfQfeA" name="tax_class" visibility="private" type="_c4IERhXxEeW_BuhzgfQfeA" association="_c4IDZhXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IEGhXxEeW_BuhzgfQfeA" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IEGxXxEeW_BuhzgfQfeA" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IEHBXxEeW_BuhzgfQfeA" name="household" visibility="private" type="_c4IDohXxEeW_BuhzgfQfeA" association="_c4IEQBXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IEHRXxEeW_BuhzgfQfeA" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IEHhXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IEHxXxEeW_BuhzgfQfeA" name="dependents" visibility="private" type="_c4IDdhXxEeW_BuhzgfQfeA" association="_c4IEQhXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IEIBXxEeW_BuhzgfQfeA" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IEIRXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IEIhXxEeW_BuhzgfQfeA" name="income_Tax_Deduction" visibility="private" type="_c4IqrxXxEeW_BuhzgfQfeA" association="_c4IFSBXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IEIxXxEeW_BuhzgfQfeA" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IEJBXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IEJRXxEeW_BuhzgfQfeA" name="taxed_jointly" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IEJhXxEeW_BuhzgfQfeA" name="expenses" visibility="private" type="_c4IFBBXxEeW_BuhzgfQfeA" association="_c4IFSRXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IEJxXxEeW_BuhzgfQfeA" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IEKBXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IEKRXxEeW_BuhzgfQfeA" name="dependent" visibility="private" type="_c4IDdhXxEeW_BuhzgfQfeA" association="_c4IEQRXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IEKhXxEeW_BuhzgfQfeA" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IEKxXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IELBXxEeW_BuhzgfQfeA" name="tax_Card" visibility="private" type="_c4Ip5RXxEeW_BuhzgfQfeA" aggregation="shared" association="_c4IEOxXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IELRXxEeW_BuhzgfQfeA" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IELhXxEeW_BuhzgfQfeA" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IELxXxEeW_BuhzgfQfeA" name="taxation_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_c4Fn5BXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_c4IEMBXxEeW_BuhzgfQfeA" name="is_dependent_part_of_the_household" isQuery="true" bodyCondition="_c4IEMhXxEeW_BuhzgfQfeA">
          <eAnnotations xmi:id="_c4IEMRXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_c4IEMhXxEeW_BuhzgfQfeA" name="is_child_part_of_household" constrainedElement="_c4IEMBXxEeW_BuhzgfQfeA">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IEMxXxEeW_BuhzgfQfeA">
              <language>OCL</language>
              <body>let responsible_person: Tax_Payer = IN_dependent.responsible_person,&#xA;     household_tax_payer_same_as_respnsible: Boolean = IN_dependent.household.tax_Payer.oclAsType(Physical_Person).SSNo = responsible_person.oclAsType(Physical_Person).SSNo&#xA;in&#xA;if (responsible_person->notEmpty() and household_tax_payer_same_as_respnsible) then&#xA;&#x9;/**THE CHILD IS PART OF THE TAX PAYERS HOUSEHOLD**/&#xA;&#x9;result = true&#xA;else &#xA;&#x9;/**THE CHILD IS NOT PART OF THE TAX PAYERS HOUSEHOLD**/&#xA;&#x9;result = false&#xA;endif&#xA;&#xA;&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_c4IENBXxEeW_BuhzgfQfeA" name="IN_dependent" type="_c4IDdhXxEeW_BuhzgfQfeA"/>
          <ownedParameter xmi:id="_c4IENRXxEeW_BuhzgfQfeA" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_c4IENhXxEeW_BuhzgfQfeA" name="number_of_months_of_allowance" isQuery="true" postcondition="_c4IEOBXxEeW_BuhzgfQfeA">
          <eAnnotations xmi:id="_c4IENxXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_c4IEOBXxEeW_BuhzgfQfeA" name="number_od_months_of_allowance" constrainedElement="_c4IENhXxEeW_BuhzgfQfeA">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IEORXxEeW_BuhzgfQfeA">
              <language>OCL</language>
              <body>result = 1&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_c4IEOhXxEeW_BuhzgfQfeA" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_c4IEOxXxEeW_BuhzgfQfeA" name="" memberEnd="_c4IELBXxEeW_BuhzgfQfeA _c4IqIBXxEeW_BuhzgfQfeA"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_c4IEPBXxEeW_BuhzgfQfeA" name="located at" memberEnd="_c4IDwhXxEeW_BuhzgfQfeA _c4IDbhXxEeW_BuhzgfQfeA"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_c4IEPRXxEeW_BuhzgfQfeA" name="receives" memberEnd="_c4IDvxXxEeW_BuhzgfQfeA _c4IDmRXxEeW_BuhzgfQfeA"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_c4IEPhXxEeW_BuhzgfQfeA" name="person B" memberEnd="_c4IDshXxEeW_BuhzgfQfeA _c4IDyBXxEeW_BuhzgfQfeA"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_c4IEPxXxEeW_BuhzgfQfeA" name="person A" memberEnd="_c4IDrxXxEeW_BuhzgfQfeA _c4IDxRXxEeW_BuhzgfQfeA"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_c4IEQBXxEeW_BuhzgfQfeA" name="maintains" memberEnd="_c4IEHBXxEeW_BuhzgfQfeA _c4IDoxXxEeW_BuhzgfQfeA"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_c4IEQRXxEeW_BuhzgfQfeA" name="as tax payer" memberEnd="_c4IDhBXxEeW_BuhzgfQfeA _c4IEKRXxEeW_BuhzgfQfeA"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_c4IEQhXxEeW_BuhzgfQfeA" name="supports" memberEnd="_c4IEHxXxEeW_BuhzgfQfeA _c4IDfBXxEeW_BuhzgfQfeA"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_c4IEQxXxEeW_BuhzgfQfeA" name="is part of" memberEnd="_c4IDeRXxEeW_BuhzgfQfeA _c4IDphXxEeW_BuhzgfQfeA"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_c4IERBXxEeW_BuhzgfQfeA" name="incurred over" memberEnd="_c4IFCxXxEeW_BuhzgfQfeA _c4IDgRXxEeW_BuhzgfQfeA"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_c4IERRXxEeW_BuhzgfQfeA" name="is subject to" memberEnd="_c4IEExXxEeW_BuhzgfQfeA _c4IDaBXxEeW_BuhzgfQfeA"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IERhXxEeW_BuhzgfQfeA" name="Tax_Class">
        <ownedAttribute xmi:id="_c4IERxXxEeW_BuhzgfQfeA" name="tax_class" visibility="public" type="_c4IFNxXxEeW_BuhzgfQfeA"/>
        <ownedAttribute xmi:id="_c4IESBXxEeW_BuhzgfQfeA" name="tax_Payer" visibility="private" type="_c4ID4hXxEeW_BuhzgfQfeA" association="_c4IDZhXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IESRXxEeW_BuhzgfQfeA" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IEShXxEeW_BuhzgfQfeA" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IESxXxEeW_BuhzgfQfeA" name="valid_from_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_c4Fn5BXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IETBXxEeW_BuhzgfQfeA" name="valid_until_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_c4Fn5BXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IETRXxEeW_BuhzgfQfeA" name="tax_card" visibility="private" type="_c4Ip5RXxEeW_BuhzgfQfeA" association="_c4IFRxXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IEThXxEeW_BuhzgfQfeA" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IETxXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IEUBXxEeW_BuhzgfQfeA" name="current_tax_class" visibility="private" type="_c4IERhXxEeW_BuhzgfQfeA" association="_c4IEVhXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IEURXxEeW_BuhzgfQfeA" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IEUhXxEeW_BuhzgfQfeA" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IEUxXxEeW_BuhzgfQfeA" name="prev" visibility="private" type="_c4IERhXxEeW_BuhzgfQfeA" association="_c4IEVhXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IEVBXxEeW_BuhzgfQfeA" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IEVRXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_c4IEVhXxEeW_BuhzgfQfeA" name="replaced by" memberEnd="_c4IEUBXxEeW_BuhzgfQfeA _c4IEUxXxEeW_BuhzgfQfeA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_c4IEVxXxEeW_BuhzgfQfeA" name="Income_Concepts">
      <ownedComment xmi:id="_c4IEWBXxEeW_BuhzgfQfeA" annotatedElement="_c4IEchXxEeW_BuhzgfQfeA">
        <body>&lt;p> Art.91, alinea 1, numero 2&lt;/p></body>
      </ownedComment>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IEWRXxEeW_BuhzgfQfeA" name="Income_Type">
        <ownedAttribute xmi:id="_c4IEWhXxEeW_BuhzgfQfeA" name="subjectToWithholdingTax" visibility="private">
          <ownedComment xmi:id="_c4IEWxXxEeW_BuhzgfQfeA" annotatedElement="_c4IEWhXxEeW_BuhzgfQfeA">
            <body>&lt;p>The&amp;nbsp;following&amp;nbsp;types&amp;nbsp;of&amp;nbsp;income&amp;nbsp;are&amp;nbsp;subject&amp;nbsp;to&amp;nbsp;withholding&amp;nbsp;tax:&lt;/p>&lt;p>Employment&lt;/p>&lt;p>Pensions&amp;nbsp;and&amp;nbsp;Annuities&lt;/p>&lt;p>Investments&amp;nbsp;(not&amp;nbsp;all&amp;nbsp;types&amp;nbsp;might&amp;nbsp;be&amp;nbsp;subject&amp;nbsp;to&amp;nbsp;withholding.&amp;nbsp;The&amp;nbsp;types&amp;nbsp;subject&amp;nbsp;to&amp;nbsp;withholding&amp;nbsp;have&amp;nbsp;been&amp;nbsp;elaborated&amp;nbsp;on&amp;nbsp;page&amp;nbsp;15&amp;nbsp;of&amp;nbsp;the&amp;nbsp;memento)&lt;/p>&lt;p>&lt;/p></body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/EcorePrimitiveTypes.library.uml#EBoolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IEXBXxEeW_BuhzgfQfeA" name="income" visibility="private" type="_c4IEeBXxEeW_BuhzgfQfeA" association="_c4IEcxXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IEXRXxEeW_BuhzgfQfeA" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IEXhXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IEXxXxEeW_BuhzgfQfeA" name="Trade_and_Business_Income">
        <generalization xmi:id="_c4IEYBXxEeW_BuhzgfQfeA" general="_c4IEWRXxEeW_BuhzgfQfeA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IEYRXxEeW_BuhzgfQfeA" name="Agriculture_and_Forestry_Income">
        <generalization xmi:id="_c4IEYhXxEeW_BuhzgfQfeA" general="_c4IEWRXxEeW_BuhzgfQfeA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IEYxXxEeW_BuhzgfQfeA" name="Independent_Professional_Services_Income">
        <generalization xmi:id="_c4IEZBXxEeW_BuhzgfQfeA" general="_c4IEWRXxEeW_BuhzgfQfeA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IEZRXxEeW_BuhzgfQfeA" name="Pensions_and_Annuities_Income">
        <generalization xmi:id="_c4IEZhXxEeW_BuhzgfQfeA" general="_c4IEWRXxEeW_BuhzgfQfeA"/>
        <ownedAttribute xmi:id="_c4IEZxXxEeW_BuhzgfQfeA" name="occasional_payement" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_c4IEaBXxEeW_BuhzgfQfeA">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IEaRXxEeW_BuhzgfQfeA" name="Capital_and_Investments_Income">
        <generalization xmi:id="_c4IEahXxEeW_BuhzgfQfeA" general="_c4IEWRXxEeW_BuhzgfQfeA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IEaxXxEeW_BuhzgfQfeA" name="Employment_Income">
        <generalization xmi:id="_c4IEbBXxEeW_BuhzgfQfeA" general="_c4IEWRXxEeW_BuhzgfQfeA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IEbRXxEeW_BuhzgfQfeA" name="Rentals_and_Leases_Income">
        <generalization xmi:id="_c4IEbhXxEeW_BuhzgfQfeA" general="_c4IEWRXxEeW_BuhzgfQfeA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IEbxXxEeW_BuhzgfQfeA" name="Sundry_Income">
        <generalization xmi:id="_c4IEcBXxEeW_BuhzgfQfeA" general="_c4IEWRXxEeW_BuhzgfQfeA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IEcRXxEeW_BuhzgfQfeA" name="Directors_Fee">
        <generalization xmi:id="_c4IEchXxEeW_BuhzgfQfeA" general="_c4IEYxXxEeW_BuhzgfQfeA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_c4IEcxXxEeW_BuhzgfQfeA" name="has as type" memberEnd="_c4IEhxXxEeW_BuhzgfQfeA _c4IEXBXxEeW_BuhzgfQfeA"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IEdBXxEeW_BuhzgfQfeA" name="Foreign_Income">
        <generalization xmi:id="_c4IEdRXxEeW_BuhzgfQfeA" general="_c4IEeBXxEeW_BuhzgfQfeA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IEdhXxEeW_BuhzgfQfeA" name="Local_Income">
        <generalization xmi:id="_c4IEdxXxEeW_BuhzgfQfeA" general="_c4IEeBXxEeW_BuhzgfQfeA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IEeBXxEeW_BuhzgfQfeA" name="Income">
        <ownedRule xmi:id="_c4IEeRXxEeW_BuhzgfQfeA" name="Tax_Deduction_FD-constraint" constrainedElement="_c4IEeBXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IEehXxEeW_BuhzgfQfeA">
            <language>OCL</language>
            <body>(self .income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) or&#xA;self.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or&#xA;self.income_type.oclIsTypeOf(Income_Concepts::Rentals_and_Leases_Income)) = true&#xA;and&#xA;self.start_date_within_taxation_year = self.taxPayer.incomeTax.tax_year &#xA;and&#xA;let fd_expenses : Set(Expense_Concepts::Expense) = self.expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Travel_Expense_FD) and exp.year_expense_was_incurred_in = self.start_date_within_taxation_year) in&#xA;     fd_expenses->notEmpty()&#xA;     &#xA;implies&#xA;&#xA;&#x9; fd_expenses->forAll(a_FD|&#x9; &#xA;&#x9; if  (a_FD.deduction.oclAsType(Income_Tax_Deduction_Concepts::FD).calculated_distance>a_FD.deduction.oclAsType(Income_Tax_Deduction_Concepts::FD).distance_declared_in_january) then&#xA;&#x9;&#x9;if  (a_FD.deduction.oclAsType(Income_Tax_Deduction_Concepts::FD).calculated_distance>Constants::MINIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if (a_FD.deduction.oclAsType(Income_Tax_Deduction_Concepts::FD).calculated_distance>Constants::MAXIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/**MAXIMAL FLAT DISTANCE FOR TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;a_FD.deduction.deductible_amount = Constants::FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT.oclAsType(Integer) * Constants::MAXIMAL_FLAT_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/**REAL DISTANCE FOR TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;a_FD.deduction.deductible_amount = Constants::FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT.oclAsType(Integer) * a_FD.deduction.oclAsType(Income_Tax_Deduction_Concepts::FD).calculated_distance&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;/**MINIMAL FLAT DISTANCE FOR TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;a_FD.deduction.deductible_amount = Constants::FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT.oclAsType(Integer) * Constants::MINIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/*NO CHANGES FOR FD, TRAVEL EXPENSE IS ALREADY DEDUCED FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;endif&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;a_FD.deduction.yearly=  a_FD.deduction.deductible_amount and&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;a_FD.deduction.monthly = a_FD.deduction.deductible_amount/12 and&#xA;&#x9;&#x9;a_FD.deduction.daily = a_FD.deduction.monthly/25&#xA;)&#xA;&#x9; </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_c4IEexXxEeW_BuhzgfQfeA" name="Tax_Deduction_FO-constraint" constrainedElement="_c4IEeBXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IEfBXxEeW_BuhzgfQfeA">
            <language>OCL</language>
            <body>(self.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) or&#xA;self.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or&#xA;self.income_type.oclIsTypeOf(Income_Concepts::Rentals_and_Leases_Income)) = true&#xA;and&#xA;self.start_date_within_taxation_year = self.taxPayer.incomeTax.tax_year&#xA;and&#xA;let fo_expenses : Set(Expense_Concepts::Expense) = self.expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Miscellaneous_Expense_FO) and exp.year_expense_was_incurred_in = self.start_date_within_taxation_year),&#xA;&#x9;declared_expense : Integer = fo_expenses.declared_amount->sum() in&#xA;&#x9;&#xA;     fo_expenses->notEmpty()&#xA;&#xA;implies&#xA;&#xA;&#x9;fo_expenses->forAll(fo|&#xA;&#x9;&#x9;&#x9;/*do we want to care about this, or up to the agent to decide*/&#xA;&#x9;&#x9;&#x9;let spouse_FO: Income_Tax_Deduction_Concepts::FO =  self.taxPayer.legal_union_A.individual_B.oclAsType(Tax_Payer_Concepts::Tax_Payer).income_Tax_Deduction->&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select(type|type.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO))->any(true).oclAsType(Income_Tax_Deduction_Concepts::FO),&#xA;&#x9;&#x9;&#x9;&#x9; spouse_declared_expense:Integer=self.taxPayer.legal_union_A.individual_B.oclAsType(Tax_Payer_Concepts::Tax_Payer).expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Miscellaneous_Expense_FO))->any(true).declared_amount in&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if(fo.deduction.oclAsType(Income_Tax_Deduction_Concepts::FO) .rate_type_for_FO = Type_of_Rate::REAL_COST) then &#xA;&#x9;&#x9;&#x9;&#x9;if(self.taxPayer.taxed_jointly) then &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(spouse_FO.rate_type_for_FO= Type_of_Rate::REAL_COST) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;fo.deduction.oclAsType(Income_Tax_Deduction_Concepts::FO) .rate_type_for_FO = Type_of_Rate::REGULAR&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if(declared_expense>Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE= Type_of_Rate::REAL_COST&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;&#x9;endif&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if (Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE = Type_of_Rate::REGULAR) then&#xA;&#x9;&#x9;&#x9;/*FLAT RATE FOR FO EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;fo.deduction.deductible_amount =Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)+Constants::DISABILITY_FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/**REAL COST FOR FO EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;fo.deduction.deductible_amount = declared_expense+Constants::DISABILITY_FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)&#xA;&#x9;&#x9;endif&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;fo.deduction.oclAsType(Income_Tax_Deduction_Concepts::FO) .yearly=  fo.deduction.deductible_amount and&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;fo.deduction.oclAsType(Income_Tax_Deduction_Concepts::FO) .monthly = fo.deduction.deductible_amount/12 and&#xA;&#x9;&#x9;fo.deduction.oclAsType(Income_Tax_Deduction_Concepts::FO) .daily = fo.deduction.monthly/25 &#x9;&#xA;&#x9;) &#xA;&#x9;</body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:id="_c4IEfRXxEeW_BuhzgfQfeA" name="taxPayer" visibility="private" type="_c4ID4hXxEeW_BuhzgfQfeA" association="_c4IFHBXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IEfhXxEeW_BuhzgfQfeA" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IEfxXxEeW_BuhzgfQfeA" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IEgBXxEeW_BuhzgfQfeA" name="income_amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IEgRXxEeW_BuhzgfQfeA" name="start_date_within_taxation_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_c4Fn5BXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IEghXxEeW_BuhzgfQfeA" name="start_date_of_contract" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_c4Fn5BXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IEgxXxEeW_BuhzgfQfeA" name="end_date_within_taxation_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_c4Fn5BXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IEhBXxEeW_BuhzgfQfeA" name="tax_card" visibility="private" type="_c4Ip5RXxEeW_BuhzgfQfeA" association="_c4IFQRXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IEhRXxEeW_BuhzgfQfeA" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IEhhXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IEhxXxEeW_BuhzgfQfeA" name="income_type" visibility="private" type="_c4IEWRXxEeW_BuhzgfQfeA" association="_c4IEcxXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IEiBXxEeW_BuhzgfQfeA" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IEiRXxEeW_BuhzgfQfeA" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IEihXxEeW_BuhzgfQfeA" name="expenses" visibility="private" type="_c4IFBBXxEeW_BuhzgfQfeA" association="_c4IFAxXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IEixXxEeW_BuhzgfQfeA" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IEjBXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IEjRXxEeW_BuhzgfQfeA" name="tax_liability" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_c4IEjhXxEeW_BuhzgfQfeA" name="compute_duration_of_contract" isQuery="true" postcondition="_c4IEkBXxEeW_BuhzgfQfeA">
          <eAnnotations xmi:id="_c4IEjxXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_c4IEkBXxEeW_BuhzgfQfeA" name="get_duration" constrainedElement="_c4IEjhXxEeW_BuhzgfQfeA">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IEkRXxEeW_BuhzgfQfeA">
              <language>OCL</language>
              <body>result=1&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_c4IEkhXxEeW_BuhzgfQfeA" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_c4IEkxXxEeW_BuhzgfQfeA" name="compute_duration_of_contract_within_taxation_year" isQuery="true">
          <eAnnotations xmi:id="_c4IElBXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_c4IElRXxEeW_BuhzgfQfeA" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_c4IElhXxEeW_BuhzgfQfeA" name="IN_date">
            <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_c4Fn5BXxEeW_BuhzgfQfeA"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_c4IElxXxEeW_BuhzgfQfeA" name="Expense_Concepts">
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IEmBXxEeW_BuhzgfQfeA" name="Permanent_Expense">
        <generalization xmi:id="_c4IEmRXxEeW_BuhzgfQfeA" general="_c4IEpRXxEeW_BuhzgfQfeA"/>
        <ownedAttribute xmi:id="_c4IEmhXxEeW_BuhzgfQfeA" name="category" visibility="public" type="_c4IE9hXxEeW_BuhzgfQfeA"/>
        <ownedAttribute xmi:id="_c4IEmxXxEeW_BuhzgfQfeA" name="is_eligible_for_deduction" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_c4IEnBXxEeW_BuhzgfQfeA">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedOperation xmi:id="_c4IEnRXxEeW_BuhzgfQfeA" name="is_expense_eligible_for_deduction" isQuery="true" postcondition="_c4IEnxXxEeW_BuhzgfQfeA">
          <eAnnotations xmi:id="_c4IEnhXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_c4IEnxXxEeW_BuhzgfQfeA" name="is_eligible" constrainedElement="_c4IEnRXxEeW_BuhzgfQfeA">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IEoBXxEeW_BuhzgfQfeA">
              <language>OCL</language>
              <body>self.is_eligible_for_deduction = IN_agent_response and&#xA;result = IN_agent_response&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_c4IEoRXxEeW_BuhzgfQfeA" name="IN_agent_response">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_c4IEohXxEeW_BuhzgfQfeA" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IEoxXxEeW_BuhzgfQfeA" name="Interest_Expense">
        <generalization xmi:id="_c4IEpBXxEeW_BuhzgfQfeA" general="_c4IEpRXxEeW_BuhzgfQfeA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IEpRXxEeW_BuhzgfQfeA" name="Special_Expense_DS">
        <generalization xmi:id="_c4IEphXxEeW_BuhzgfQfeA" general="_c4IFBBXxEeW_BuhzgfQfeA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IEpxXxEeW_BuhzgfQfeA" name="Private_Insurance_and_Plan">
        <generalization xmi:id="_c4IEqBXxEeW_BuhzgfQfeA" general="_c4IEpRXxEeW_BuhzgfQfeA"/>
        <ownedAttribute xmi:id="_c4IEqRXxEeW_BuhzgfQfeA" name="category" visibility="public" type="_c4IE-RXxEeW_BuhzgfQfeA"/>
        <ownedAttribute xmi:id="_c4IEqhXxEeW_BuhzgfQfeA" name="duration_of_contract" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IEqxXxEeW_BuhzgfQfeA" name="is_private_insurance_and_plan_eligible_for_deduction" visibility="public" isDerived="true">
          <eAnnotations xmi:id="_c4IErBXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_c4IErRXxEeW_BuhzgfQfeA">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedOperation xmi:id="_c4IErhXxEeW_BuhzgfQfeA" name="is_private_insurance_and_plan_eligible_for_deduction" isQuery="true" postcondition="_c4IEsBXxEeW_BuhzgfQfeA">
          <eAnnotations xmi:id="_c4IErxXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_c4IEsBXxEeW_BuhzgfQfeA" name="is_private_insurance_and_plan_eligible_for_deduction" constrainedElement="_c4IErhXxEeW_BuhzgfQfeA">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IEsRXxEeW_BuhzgfQfeA">
              <language>OCL</language>
              <body>self.is_private_insurance_and_plan_eligible_for_deduction = IN_eligible_plan&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_c4IEshXxEeW_BuhzgfQfeA" name="IN_eligible_plan">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IEsxXxEeW_BuhzgfQfeA" name="Health_and_Pension_Insurance">
        <generalization xmi:id="_c4IEtBXxEeW_BuhzgfQfeA" general="_c4IEpRXxEeW_BuhzgfQfeA"/>
        <ownedAttribute xmi:id="_c4IEtRXxEeW_BuhzgfQfeA" name="category" visibility="public" type="_c4IE_xXxEeW_BuhzgfQfeA"/>
        <ownedAttribute xmi:id="_c4IEthXxEeW_BuhzgfQfeA" name="is_related_to_additional_salary" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_c4IEtxXxEeW_BuhzgfQfeA">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IEuBXxEeW_BuhzgfQfeA" name="Donation">
        <generalization xmi:id="_c4IEuRXxEeW_BuhzgfQfeA" general="_c4IEpRXxEeW_BuhzgfQfeA"/>
        <ownedAttribute xmi:id="_c4IEuhXxEeW_BuhzgfQfeA" name="beneficiary" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IEuxXxEeW_BuhzgfQfeA" name="is_beneficiary_eligible" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_c4IEvBXxEeW_BuhzgfQfeA">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IEvRXxEeW_BuhzgfQfeA" name="is_donation_reported" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_c4IEvhXxEeW_BuhzgfQfeA" name="get_beneficiary_eligibility_for_deduction" isQuery="true" postcondition="_c4IEwBXxEeW_BuhzgfQfeA">
          <eAnnotations xmi:id="_c4IEvxXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_c4IEwBXxEeW_BuhzgfQfeA" name="is_leagaly_approved_beneficiary" constrainedElement="_c4IEvhXxEeW_BuhzgfQfeA">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IEwRXxEeW_BuhzgfQfeA">
              <language>OCL</language>
              <body>is_beneficiary_eligible = IN_eligibility&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_c4IEwhXxEeW_BuhzgfQfeA" name="IN_eligibility">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IEwxXxEeW_BuhzgfQfeA" name="Loss_Carryforward">
        <ownedRule xmi:id="_c4IExBXxEeW_BuhzgfQfeA" name="ExpensePossibleOnlyIfCertainIncomeType-constraint" constrainedElement="_c4IEwxXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IExRXxEeW_BuhzgfQfeA">
            <language>OCL</language>
            <body>self.oclIsTypeOf(Loss_Carryforward) implies&#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Agriculture_and_Forestry_Income) or &#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Independent_Professional_Services_Income) or&#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Trade_and_Business_Income)&#xA;&#xA;</body>
          </specification>
        </ownedRule>
        <generalization xmi:id="_c4IExhXxEeW_BuhzgfQfeA" general="_c4IEpRXxEeW_BuhzgfQfeA"/>
        <ownedAttribute xmi:id="_c4IExxXxEeW_BuhzgfQfeA" name="regular_accountability" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IEyBXxEeW_BuhzgfQfeA" name="compensation_by_other_means" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IEyRXxEeW_BuhzgfQfeA" name="tax_payer_has_inherited_business_ownership" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_c4IEyhXxEeW_BuhzgfQfeA">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IEyxXxEeW_BuhzgfQfeA" name="tax_payer_has_been_partner_in_business" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_c4IEzBXxEeW_BuhzgfQfeA" value="true">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedOperation xmi:id="_c4IEzRXxEeW_BuhzgfQfeA" name="is_accountability_regular" isQuery="true" postcondition="_c4IEzxXxEeW_BuhzgfQfeA">
          <eAnnotations xmi:id="_c4IEzhXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_c4IEzxXxEeW_BuhzgfQfeA" name="is_accounatbility_regular" constrainedElement="_c4IEzRXxEeW_BuhzgfQfeA">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IE0BXxEeW_BuhzgfQfeA">
              <language>OCL</language>
              <body>self.regular_accountability = IN_regularity</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_c4IE0RXxEeW_BuhzgfQfeA" name="IN_regularity">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_c4IE0hXxEeW_BuhzgfQfeA" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_c4IE0xXxEeW_BuhzgfQfeA" name="is_compensated_by_other_means" isQuery="true" postcondition="_c4IE1RXxEeW_BuhzgfQfeA">
          <eAnnotations xmi:id="_c4IE1BXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_c4IE1RXxEeW_BuhzgfQfeA" name="is_compensated_by_other_means" constrainedElement="_c4IE0xXxEeW_BuhzgfQfeA">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IE1hXxEeW_BuhzgfQfeA">
              <language>OCL</language>
              <body>self.compensation_by_other_means = IN_compensated</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_c4IE1xXxEeW_BuhzgfQfeA" name="IN_compensated">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_c4IE2BXxEeW_BuhzgfQfeA" name="has_been_tax_payer_partner_in_business" isQuery="true" postcondition="_c4IE2hXxEeW_BuhzgfQfeA">
          <eAnnotations xmi:id="_c4IE2RXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_c4IE2hXxEeW_BuhzgfQfeA" name="partner_in_business" constrainedElement="_c4IE2BXxEeW_BuhzgfQfeA">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IE2xXxEeW_BuhzgfQfeA">
              <language>OCL</language>
              <body>self.tax_payer_has_been_partner_in_business = IN_has_been_partner_in_business&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_c4IE3BXxEeW_BuhzgfQfeA" name="IN_has_been_partner_in_business">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_c4IE3RXxEeW_BuhzgfQfeA" name="has_tax_payer_inherited_business_ownership" isQuery="true" postcondition="_c4IE3xXxEeW_BuhzgfQfeA">
          <eAnnotations xmi:id="_c4IE3hXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_c4IE3xXxEeW_BuhzgfQfeA" name="inherited_business_ownership" constrainedElement="_c4IE3RXxEeW_BuhzgfQfeA">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IE4BXxEeW_BuhzgfQfeA">
              <language>OCL</language>
              <body>self.tax_payer_has_inherited_business_ownership = IN_inherited_business_ownership</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_c4IE4RXxEeW_BuhzgfQfeA" name="IN_inherited_business_ownership">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IE4hXxEeW_BuhzgfQfeA" name="Spousal_Expense_AC">
        <generalization xmi:id="_c4IE4xXxEeW_BuhzgfQfeA" general="_c4IFBBXxEeW_BuhzgfQfeA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IE5BXxEeW_BuhzgfQfeA" name="Extraordinary_Expense_CE">
        <generalization xmi:id="_c4IE5RXxEeW_BuhzgfQfeA" general="_c4IFBBXxEeW_BuhzgfQfeA"/>
        <ownedAttribute xmi:id="_c4IE5hXxEeW_BuhzgfQfeA" name="thresholded_deduction_percentage" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IE5xXxEeW_BuhzgfQfeA" name="ce_type" visibility="public" type="_c4IFTRXxEeW_BuhzgfQfeA"/>
        <ownedOperation xmi:id="_c4IE6BXxEeW_BuhzgfQfeA" name="is_above_thresholded_deduction_percentage_for_CE" isQuery="true">
          <eAnnotations xmi:id="_c4IE6RXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_c4IE6hXxEeW_BuhzgfQfeA" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_c4IE6xXxEeW_BuhzgfQfeA" name="compute_thresholded_deduction_percentage_for_CE" isQuery="true" postcondition="_c4IE7RXxEeW_BuhzgfQfeA">
          <eAnnotations xmi:id="_c4IE7BXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_c4IE7RXxEeW_BuhzgfQfeA" name="thresholded_deduction_percentage" constrainedElement="_c4IE6xXxEeW_BuhzgfQfeA">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IE7hXxEeW_BuhzgfQfeA">
              <language>OCL</language>
              <body>self.thresholded_deduction_percentage = IN_thresholded_deduction_percentage&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_c4IE7xXxEeW_BuhzgfQfeA" name="IN_thresholded_deduction_percentage">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IE8BXxEeW_BuhzgfQfeA" name="Travel_Expense_FD">
        <generalization xmi:id="_c4IE8RXxEeW_BuhzgfQfeA" general="_c4IE9BXxEeW_BuhzgfQfeA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IE8hXxEeW_BuhzgfQfeA" name="Miscellaneous_Expense_FO">
        <generalization xmi:id="_c4IE8xXxEeW_BuhzgfQfeA" general="_c4IE9BXxEeW_BuhzgfQfeA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IE9BXxEeW_BuhzgfQfeA" name="Professional_Expense">
        <generalization xmi:id="_c4IE9RXxEeW_BuhzgfQfeA" general="_c4IFBBXxEeW_BuhzgfQfeA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="_c4IE9hXxEeW_BuhzgfQfeA" name="Category_of_Permanent_Expense">
        <ownedLiteral xmi:id="_c4IE9xXxEeW_BuhzgfQfeA" name="MISCELLANEOUS_DEBT" classifier="_c4IE9hXxEeW_BuhzgfQfeA"/>
        <ownedLiteral xmi:id="_c4IE-BXxEeW_BuhzgfQfeA" name="ALIMONY" classifier="_c4IE9hXxEeW_BuhzgfQfeA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="_c4IE-RXxEeW_BuhzgfQfeA" name="Category_of_Private_Insurance_and_Plan">
        <ownedLiteral xmi:id="_c4IE-hXxEeW_BuhzgfQfeA" name="PRIVATE_INSURANCE" classifier="_c4IE-RXxEeW_BuhzgfQfeA"/>
        <ownedLiteral xmi:id="_c4IE-xXxEeW_BuhzgfQfeA" name="PRIVATE_LIFE_INSURANCE" classifier="_c4IE_xXxEeW_BuhzgfQfeA"/>
        <ownedLiteral xmi:id="_c4IE_BXxEeW_BuhzgfQfeA" name="COMPANY_MEMBERS_PRIVATE_INSURANCE" classifier="_c4IE-RXxEeW_BuhzgfQfeA"/>
        <ownedLiteral xmi:id="_c4IE_RXxEeW_BuhzgfQfeA" name="HOUSING_SAVING_PLAN" classifier="_c4IE_xXxEeW_BuhzgfQfeA"/>
        <ownedLiteral xmi:id="_c4IE_hXxEeW_BuhzgfQfeA" name="OLD_AGE_PENSION_PLAN" classifier="_c4IE_xXxEeW_BuhzgfQfeA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="_c4IE_xXxEeW_BuhzgfQfeA" name="Category_of_Health_and_Pension_Insurances">
        <ownedLiteral xmi:id="_c4IFABXxEeW_BuhzgfQfeA" name="MANDATORY_HEALTH_AND_PENSION_INSURANCE" classifier="_c4IE_xXxEeW_BuhzgfQfeA"/>
        <ownedLiteral xmi:id="_c4IFARXxEeW_BuhzgfQfeA" name="ADDITIONAL_EMPLOYERS_PENSION_INSURANCE" classifier="_c4IE_xXxEeW_BuhzgfQfeA"/>
        <ownedLiteral xmi:id="_c4IFAhXxEeW_BuhzgfQfeA" name="CONTINUED_HEALTH_AND_PENSION_INSURANCE" classifier="_c4IE_xXxEeW_BuhzgfQfeA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_c4IFAxXxEeW_BuhzgfQfeA" name="influences" memberEnd="_c4IFDxXxEeW_BuhzgfQfeA _c4IEihXxEeW_BuhzgfQfeA"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IFBBXxEeW_BuhzgfQfeA" name="Expense">
        <ownedAttribute xmi:id="_c4IFBRXxEeW_BuhzgfQfeA" name="tax_Payer" visibility="private" type="_c4ID4hXxEeW_BuhzgfQfeA" association="_c4IFSRXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IFBhXxEeW_BuhzgfQfeA" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IFBxXxEeW_BuhzgfQfeA" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IFCBXxEeW_BuhzgfQfeA" name="declared_amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IFCRXxEeW_BuhzgfQfeA" name="expense_purpose" visibility="public" type="_c4IFURXxEeW_BuhzgfQfeA">
          <defaultValue xmi:type="uml:InstanceValue" xmi:id="_c4IFChXxEeW_BuhzgfQfeA" name="OTHER" type="_c4IFURXxEeW_BuhzgfQfeA" instance="_c4IFVRXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IFCxXxEeW_BuhzgfQfeA" name="dependent" visibility="private" type="_c4IDdhXxEeW_BuhzgfQfeA" association="_c4IERBXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IFDBXxEeW_BuhzgfQfeA" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IFDRXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IFDhXxEeW_BuhzgfQfeA" name="year_expense_was_incurred_in" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IFDxXxEeW_BuhzgfQfeA" name="income" visibility="private" type="_c4IEeBXxEeW_BuhzgfQfeA" association="_c4IFAxXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IFEBXxEeW_BuhzgfQfeA" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IFERXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IFEhXxEeW_BuhzgfQfeA" name="deduction" visibility="private" type="_c4IqrxXxEeW_BuhzgfQfeA" association="_c4IqvhXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IFExXxEeW_BuhzgfQfeA" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IFFBXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_c4IFFRXxEeW_BuhzgfQfeA" name="Grantor">
      <ownedLiteral xmi:id="_c4IFFhXxEeW_BuhzgfQfeA" name="ACD" classifier="_c4IFFRXxEeW_BuhzgfQfeA"/>
      <ownedLiteral xmi:id="_c4IFFxXxEeW_BuhzgfQfeA" name="Employer" classifier="_c4IFFRXxEeW_BuhzgfQfeA"/>
      <ownedLiteral xmi:id="_c4IFGBXxEeW_BuhzgfQfeA" name="CNPF" classifier="_c4IFFRXxEeW_BuhzgfQfeA"/>
      <ownedLiteral xmi:id="_c4IFGRXxEeW_BuhzgfQfeA" name="CEDIES" classifier="_c4IFFRXxEeW_BuhzgfQfeA"/>
      <ownedLiteral xmi:id="_c4IFGhXxEeW_BuhzgfQfeA" name="SNJ" classifier="_c4IFFRXxEeW_BuhzgfQfeA"/>
      <ownedLiteral xmi:id="_c4IFGxXxEeW_BuhzgfQfeA" name="CNAP" classifier="_c4IFFRXxEeW_BuhzgfQfeA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_c4IFHBXxEeW_BuhzgfQfeA" name="earns" memberEnd="_c4IEEBXxEeW_BuhzgfQfeA _c4IEfRXxEeW_BuhzgfQfeA"/>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_c4IFHRXxEeW_BuhzgfQfeA" name="Country">
      <ownedLiteral xmi:id="_c4IFHhXxEeW_BuhzgfQfeA" name="LU" classifier="_c4IFHRXxEeW_BuhzgfQfeA"/>
      <ownedLiteral xmi:id="_c4IFHxXxEeW_BuhzgfQfeA" name="FR" classifier="_c4IFHRXxEeW_BuhzgfQfeA"/>
      <ownedLiteral xmi:id="_c4IFIBXxEeW_BuhzgfQfeA" name="BE" classifier="_c4IFHRXxEeW_BuhzgfQfeA"/>
      <ownedLiteral xmi:id="_c4IFIRXxEeW_BuhzgfQfeA" name="DE" classifier="_c4IFHRXxEeW_BuhzgfQfeA"/>
      <ownedLiteral xmi:id="_c4IFIhXxEeW_BuhzgfQfeA" name="NL" classifier="_c4IFHRXxEeW_BuhzgfQfeA"/>
      <ownedLiteral xmi:id="_c4IFIxXxEeW_BuhzgfQfeA" name="OTHER" classifier="_c4IFHRXxEeW_BuhzgfQfeA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_c4IFJBXxEeW_BuhzgfQfeA" name="credited for" memberEnd="_c4IEFhXxEeW_BuhzgfQfeA _c4IqOxXxEeW_BuhzgfQfeA"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_c4IFJRXxEeW_BuhzgfQfeA" name="Date">
      <ownedAttribute xmi:id="_c4IFJhXxEeW_BuhzgfQfeA" name="day" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IFJxXxEeW_BuhzgfQfeA" value="*"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IFKBXxEeW_BuhzgfQfeA" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_c4IFKRXxEeW_BuhzgfQfeA" name="month" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_c4IFKhXxEeW_BuhzgfQfeA" name="year" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_c4IFKxXxEeW_BuhzgfQfeA" name="Job_Activity">
      <ownedLiteral xmi:id="_c4IFLBXxEeW_BuhzgfQfeA" name="Salary" classifier="_c4IFKxXxEeW_BuhzgfQfeA"/>
      <ownedLiteral xmi:id="_c4IFLRXxEeW_BuhzgfQfeA" name="Pension" classifier="_c4IFKxXxEeW_BuhzgfQfeA"/>
      <ownedLiteral xmi:id="_c4IFLhXxEeW_BuhzgfQfeA" name="Annuity" classifier="_c4IFKxXxEeW_BuhzgfQfeA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_c4IFLxXxEeW_BuhzgfQfeA" name="Tax_Card_Type">
      <ownedLiteral xmi:id="_c4IFMBXxEeW_BuhzgfQfeA" name="Principal" classifier="_c4IFLxXxEeW_BuhzgfQfeA"/>
      <ownedLiteral xmi:id="_c4IFMRXxEeW_BuhzgfQfeA" name="Additional" classifier="_c4IFLxXxEeW_BuhzgfQfeA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_c4IFMhXxEeW_BuhzgfQfeA" name="Tax_Office">
      <ownedLiteral xmi:id="_c4IFMxXxEeW_BuhzgfQfeA" name="RTS_2" classifier="_c4IFMhXxEeW_BuhzgfQfeA"/>
      <ownedLiteral xmi:id="_c4IFNBXxEeW_BuhzgfQfeA" name="RTS_3" classifier="_c4IFMhXxEeW_BuhzgfQfeA"/>
      <ownedLiteral xmi:id="_c4IFNRXxEeW_BuhzgfQfeA" name="RTS_Esch" classifier="_c4IFMhXxEeW_BuhzgfQfeA"/>
      <ownedLiteral xmi:id="_c4IFNhXxEeW_BuhzgfQfeA" name="RTS_Ettelbruck" classifier="_c4IFMhXxEeW_BuhzgfQfeA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_c4IFNxXxEeW_BuhzgfQfeA" name="Tax_Class_Category">
      <ownedLiteral xmi:id="_c4IFOBXxEeW_BuhzgfQfeA" name="One" classifier="_c4IFNxXxEeW_BuhzgfQfeA"/>
      <ownedLiteral xmi:id="_c4IFORXxEeW_BuhzgfQfeA" name="One_A" classifier="_c4IFNxXxEeW_BuhzgfQfeA"/>
      <ownedLiteral xmi:id="_c4IFOhXxEeW_BuhzgfQfeA" name="Two" classifier="_c4IFNxXxEeW_BuhzgfQfeA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_c4IFOxXxEeW_BuhzgfQfeA" name="Town">
      <ownedLiteral xmi:id="_c4IFPBXxEeW_BuhzgfQfeA" name="Luxembourg_city" classifier="_c4IFOxXxEeW_BuhzgfQfeA"/>
      <ownedLiteral xmi:id="_c4IFPRXxEeW_BuhzgfQfeA" name="Bertrange" classifier="_c4IFOxXxEeW_BuhzgfQfeA"/>
      <ownedLiteral xmi:id="_c4IFPhXxEeW_BuhzgfQfeA" name="Strassen" classifier="_c4IFOxXxEeW_BuhzgfQfeA"/>
      <ownedLiteral xmi:id="_c4IFPxXxEeW_BuhzgfQfeA" name="Bettembourg" classifier="_c4IFOxXxEeW_BuhzgfQfeA"/>
      <ownedLiteral xmi:id="_c4IFQBXxEeW_BuhzgfQfeA" name="Beaufort" classifier="_c4IFOxXxEeW_BuhzgfQfeA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_c4IFQRXxEeW_BuhzgfQfeA" name="linked to" memberEnd="_c4IEhBXxEeW_BuhzgfQfeA _c4Ip-hXxEeW_BuhzgfQfeA"/>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_c4IFQhXxEeW_BuhzgfQfeA" name="Dependent_Type">
      <ownedLiteral xmi:id="_c4IFQxXxEeW_BuhzgfQfeA" name="CHILD" classifier="_c4IFQhXxEeW_BuhzgfQfeA"/>
      <ownedLiteral xmi:id="_c4IFRBXxEeW_BuhzgfQfeA" name="SPOUSE" classifier="_c4IFQhXxEeW_BuhzgfQfeA"/>
      <ownedLiteral xmi:id="_c4IFRRXxEeW_BuhzgfQfeA" name="RELATIVE" classifier="_c4IFQhXxEeW_BuhzgfQfeA"/>
      <ownedLiteral xmi:id="_c4IFRhXxEeW_BuhzgfQfeA" name="OTHER_FAMILY_MEMBER" classifier="_c4IFQhXxEeW_BuhzgfQfeA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_c4IFRxXxEeW_BuhzgfQfeA" name="provides" memberEnd="_c4Ip_RXxEeW_BuhzgfQfeA _c4IETRXxEeW_BuhzgfQfeA"/>
    <packagedElement xmi:type="uml:Association" xmi:id="_c4IFSBXxEeW_BuhzgfQfeA" name="receives" memberEnd="_c4IEIhXxEeW_BuhzgfQfeA _c4IqtBXxEeW_BuhzgfQfeA"/>
    <packagedElement xmi:type="uml:Association" xmi:id="_c4IFSRXxEeW_BuhzgfQfeA" name="declares" memberEnd="_c4IEJhXxEeW_BuhzgfQfeA _c4IFBRXxEeW_BuhzgfQfeA"/>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_c4IFShXxEeW_BuhzgfQfeA" name="Type_of_Rate">
      <ownedLiteral xmi:id="_c4IFSxXxEeW_BuhzgfQfeA" name="REGULAR" classifier="_c4IFShXxEeW_BuhzgfQfeA"/>
      <ownedLiteral xmi:id="_c4IFTBXxEeW_BuhzgfQfeA" name="REAL_COST" classifier="_c4IFShXxEeW_BuhzgfQfeA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_c4IFTRXxEeW_BuhzgfQfeA" name="CE_Type">
      <ownedLiteral xmi:id="_c4IFThXxEeW_BuhzgfQfeA" name="INALIDITY_AND_INFIRMITY" classifier="_c4IFTRXxEeW_BuhzgfQfeA"/>
      <ownedLiteral xmi:id="_c4IFTxXxEeW_BuhzgfQfeA" name="DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD" classifier="_c4IFTRXxEeW_BuhzgfQfeA"/>
      <ownedLiteral xmi:id="_c4IFUBXxEeW_BuhzgfQfeA" name="CARE_FOR_CHILDREN_NOT_BEING_PART_OF_HOUSEHOLD" classifier="_c4IFTRXxEeW_BuhzgfQfeA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_c4IFURXxEeW_BuhzgfQfeA" name="Expense_Purpose">
      <ownedLiteral xmi:id="_c4IFUhXxEeW_BuhzgfQfeA" name="HOUSE_CARE" classifier="_c4IFURXxEeW_BuhzgfQfeA"/>
      <ownedLiteral xmi:id="_c4IFUxXxEeW_BuhzgfQfeA" name="CHILD_CARE" classifier="_c4IFURXxEeW_BuhzgfQfeA"/>
      <ownedLiteral xmi:id="_c4IFVBXxEeW_BuhzgfQfeA" name="DEPENDENCE_CARE" classifier="_c4IFURXxEeW_BuhzgfQfeA"/>
      <ownedLiteral xmi:id="_c4IFVRXxEeW_BuhzgfQfeA" name="OTHER" classifier="_c4IFURXxEeW_BuhzgfQfeA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_c4IFVhXxEeW_BuhzgfQfeA" name="Constants">
      <ownedLiteral xmi:id="_c4IFVxXxEeW_BuhzgfQfeA" name="MAXIMUM_CE_RATE_FOR_CHILD_NOT_BEING_PART_OF_HOUSEHOLD" classifier="_c4IFVhXxEeW_BuhzgfQfeA">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_c4IFWBXxEeW_BuhzgfQfeA" value="3480"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_c4IFWRXxEeW_BuhzgfQfeA" name="MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE" classifier="_c4IFVhXxEeW_BuhzgfQfeA">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_c4IFWhXxEeW_BuhzgfQfeA" value="3600"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_c4IFWxXxEeW_BuhzgfQfeA" name="MINIMUM_SALARY" classifier="_c4IFVhXxEeW_BuhzgfQfeA">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_c4IFXBXxEeW_BuhzgfQfeA" value="1500"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_c4IFXRXxEeW_BuhzgfQfeA" name="FLAT_RATE_FOR_EXTRA_PROFESSIONAL_DEDUCTION" classifier="_c4IFVhXxEeW_BuhzgfQfeA">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_c4IFXhXxEeW_BuhzgfQfeA" value="4500"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_c4IFXxXxEeW_BuhzgfQfeA" name="MAXIMUM_DEDUCTIBLE_PERCENTAGE_FOR_DONATIONS" classifier="_c4IFVhXxEeW_BuhzgfQfeA">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_c4IFYBXxEeW_BuhzgfQfeA" value="20"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_c4IpwBXxEeW_BuhzgfQfeA" name="MINIMUM_DEDUCTIBLE_AMOUNT_FOR_DONATIONS" classifier="_c4IFVhXxEeW_BuhzgfQfeA">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_c4IpwRXxEeW_BuhzgfQfeA" value="120"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_c4IpwhXxEeW_BuhzgfQfeA" name="MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ADDITIONAL_PENSION_AND_INSURANCE" classifier="_c4IFVhXxEeW_BuhzgfQfeA">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_c4IpwxXxEeW_BuhzgfQfeA"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_c4IpxBXxEeW_BuhzgfQfeA" name="MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ALIMONY_EXPENSE" classifier="_c4IFVhXxEeW_BuhzgfQfeA">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_c4IpxRXxEeW_BuhzgfQfeA" value="24000"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_c4IpxhXxEeW_BuhzgfQfeA" name="FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT" classifier="_c4IFVhXxEeW_BuhzgfQfeA">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_c4IpxxXxEeW_BuhzgfQfeA" value="99"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_c4IpyBXxEeW_BuhzgfQfeA" name="MAXIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION" classifier="_c4IFVhXxEeW_BuhzgfQfeA">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_c4IpyRXxEeW_BuhzgfQfeA" value="26"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_c4IpyhXxEeW_BuhzgfQfeA" name="MAXIMAL_FLAT_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION" classifier="_c4IFVhXxEeW_BuhzgfQfeA">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_c4IpyxXxEeW_BuhzgfQfeA" value="30"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_c4IpzBXxEeW_BuhzgfQfeA" name="MINIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION" classifier="_c4IFVhXxEeW_BuhzgfQfeA">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_c4IpzRXxEeW_BuhzgfQfeA" value="4"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_c4IpzhXxEeW_BuhzgfQfeA" name="FLAT_RATE_CIM_DAILY" classifier="_c4IFVhXxEeW_BuhzgfQfeA">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_c4IpzxXxEeW_BuhzgfQfeA" value="2"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_c4Ip0BXxEeW_BuhzgfQfeA" name="FLAT_RATE_CIM_MONTHLY" classifier="_c4IFVhXxEeW_BuhzgfQfeA">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_c4Ip0RXxEeW_BuhzgfQfeA" value="62"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_c4Ip0hXxEeW_BuhzgfQfeA" name="FLAT_RATE_CIM_YEARLY" classifier="_c4IFVhXxEeW_BuhzgfQfeA">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_c4Ip0xXxEeW_BuhzgfQfeA" value="750"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_c4Ip1BXxEeW_BuhzgfQfeA" name="FLAT_RATE_CIP_DAILY" classifier="_c4IFVhXxEeW_BuhzgfQfeA">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_c4Ip1RXxEeW_BuhzgfQfeA" value="1"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_c4Ip1hXxEeW_BuhzgfQfeA" name="FLAT_RATE_CIP_MONTHLY" classifier="_c4IFVhXxEeW_BuhzgfQfeA">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_c4Ip1xXxEeW_BuhzgfQfeA" value="25"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_c4Ip2BXxEeW_BuhzgfQfeA" name="FLAT_RATE_CIP_YEARLY" classifier="_c4IFVhXxEeW_BuhzgfQfeA">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_c4Ip2RXxEeW_BuhzgfQfeA" value="300"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_c4Ip2hXxEeW_BuhzgfQfeA" name="FLAT_RATE_CIS_DAILY" classifier="_c4IFVhXxEeW_BuhzgfQfeA">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_c4Ip2xXxEeW_BuhzgfQfeA" value="1"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_c4Ip3BXxEeW_BuhzgfQfeA" name="FLAT_RATE_CIS_MONTHLY" classifier="_c4IFVhXxEeW_BuhzgfQfeA">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_c4Ip3RXxEeW_BuhzgfQfeA" value="25"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_c4Ip3hXxEeW_BuhzgfQfeA" name="FLAT_RATE_CIS_YEARLY" classifier="_c4IFVhXxEeW_BuhzgfQfeA">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_c4Ip3xXxEeW_BuhzgfQfeA" value="300"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_c4Ip4BXxEeW_BuhzgfQfeA" name="MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_DS" classifier="_c4IFVhXxEeW_BuhzgfQfeA">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_c4Ip4RXxEeW_BuhzgfQfeA" value="480"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_c4Ip4hXxEeW_BuhzgfQfeA" name="FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE" classifier="_c4IFVhXxEeW_BuhzgfQfeA"/>
      <ownedLiteral xmi:id="_c4Ip4xXxEeW_BuhzgfQfeA" name="DISABILITY_FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE" classifier="_c4IFVhXxEeW_BuhzgfQfeA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_c4Ip5BXxEeW_BuhzgfQfeA" name="Tax_Card_Concepts">
      <packagedElement xmi:type="uml:Class" xmi:id="_c4Ip5RXxEeW_BuhzgfQfeA" name="Tax_Card">
        <ownedRule xmi:id="_c4Ip5hXxEeW_BuhzgfQfeA" name="SubjectToWithholdingTax-constraint" constrainedElement="_c4Ip5RXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4Ip5xXxEeW_BuhzgfQfeA">
            <language>OCL</language>
            <body>not self.oclIsUndefined() &#xA;implies&#xA;(self.income.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or &#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) or&#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Capital_and_Investments_Income) or&#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Directors_Fee)&#xA;)&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_c4Ip6BXxEeW_BuhzgfQfeA" name="Tax_Credits-constraint" constrainedElement="_c4Ip5RXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4Ip6RXxEeW_BuhzgfQfeA">
            <language>OCL</language>
            <body>self.tax_card_type = Tax_Card_Type::Principal &#xA;&#xA;implies&#xA;&#xA;let cim : Income_Tax_Credit_Concepts::CIM = self.income_Tax_Credit->select(c|c.oclIsTypeOf(Income_Tax_Credit_Concepts::CIM) and c.tax_year = self.valid_from_date)->any(true).oclAsType(Income_Tax_Credit_Concepts::CIM),&#xA;&#x9;cis : Income_Tax_Credit_Concepts::CIS = self.income_Tax_Credit->select(cis|cis.oclIsTypeOf(Income_Tax_Credit_Concepts::CIS) and cis.tax_year = self.valid_from_date)->any(true).oclAsType(Income_Tax_Credit_Concepts::CIS),&#xA;&#x9;cip : Income_Tax_Credit_Concepts::CIP = self.income_Tax_Credit->select(cip|cip.oclIsTypeOf(Income_Tax_Credit_Concepts::CIP) and cip.tax_year = self.valid_from_date)->any(true).oclAsType(Income_Tax_Credit_Concepts::CIP) in&#xA;&#x9;&#xA;(not cis.oclIsUndefined()) xor (not cip.oclIsUndefined()) = true&#xA;and&#xA;if not cim.oclIsUndefined() then &#xA;&#x9;self.credit_CIM_daily = cim.daily and&#xA;&#x9;self.credit_CIM_monthly = cim.monthly &#xA;else&#xA;&#x9;true&#xA;endif&#xA;and&#xA;if not cis.oclIsUndefined()then&#xA;&#x9;self.credit_CIS_daily = cis.daily and&#xA;&#x9;self.credit_CIS_monthly = cis.monthly &#xA;else&#xA;&#x9;true&#xA;endif&#xA;and&#xA;if not cip.oclIsUndefined()then&#xA;&#x9;self.credit_CIP_monthly = cip.monthly &#xA;else&#xA;&#x9;true&#xA;endif</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_c4Ip6hXxEeW_BuhzgfQfeA" name="Tax_Card_AC-constraint" constrainedElement="_c4Ip5RXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4Ip6xXxEeW_BuhzgfQfeA">
            <language>OCL</language>
            <body>let set_ac : Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(deduction|deduction.oclIsTypeOf(Income_Tax_Deduction_Concepts::AC) and deduction.tax_year = self.valid_from_date),&#xA;&#x9;ac : Income_Tax_Deduction_Concepts::AC = set_ac->any(true).oclAsType(Income_Tax_Deduction_Concepts::AC),&#xA;&#x9;set_fo : Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(deduction|deduction.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO) and deduction.tax_year = self.valid_from_date),&#xA;&#x9;set_ds : Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(deduction|deduction.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS) and deduction.tax_year = self.valid_from_date) in&#xA;&#x9;&#xA;set_ac->size() = 1 &#xA;implies&#xA;&#xA;self.tax_card_type=Tax_Card_Type::Additional and&#xA;self.tax_Payer.taxed_jointly and&#xA;self.deduction_AC_yearly = ac.deductible_amount and&#xA;self.deduction_AC_monthly = ac.deductible_amount/12 and&#xA;self.deduction_AC_daily = self.deduction_AC_monthly/25 /**25 working days per month**/ and&#xA;&#xA;if(set_ds->size()>0) then&#xA;&#x9;set_ds->size() =1 and&#xA;&#x9;self.deduction_DS_yearly->notEmpty() and&#xA;&#x9;self.deduction_DS_yearly = set_ds.deductible_amount ->sum()&#xA;else&#xA;&#x9;true&#xA;endif&#xA;&#xA;and&#xA;&#xA;if(set_fo->size()>0) then&#xA;&#x9;set_fo->size() = 1 and&#xA;&#x9;self.deduction_FO_yearly->notEmpty() and&#xA;&#x9;self.deduction_FO_yearly = set_fo.deductible_amount ->sum()&#xA;else&#xA;&#x9;true&#xA;endif&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_c4Ip7BXxEeW_BuhzgfQfeA" name="Tax_Card_FD-constraint" constrainedElement="_c4Ip5RXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4Ip7RXxEeW_BuhzgfQfeA">
            <language>OCL</language>
            <body>not self.oclIsUndefined()&#xA;implies&#xA;self.income.taxPayer.income_Tax_Deduction->select(d|d.oclIsTypeOf(Income_Tax_Deduction_Concepts::FD) and d.tax_year = self.valid_from_date)->size() = 1&#xA;&#xA;and &#xA;let fd : Income_Tax_Deduction_Concepts::FD = self.income_Tax_Deduction->select(d|d.oclIsTypeOf(Income_Tax_Deduction_Concepts::FD) and d.tax_year = self.valid_from_date)->any(true).oclAsType(Income_Tax_Deduction_Concepts::FD) in&#xA;self.deduction_FD_daily = fd.daily and&#xA;self.deduction_FD_monthly = fd.monthly and&#xA;self.deduction_FD_yearly = fd.yearly&#xA;&#xA;&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_c4Ip7hXxEeW_BuhzgfQfeA" name="Tax_Card_DS-constraint" constrainedElement="_c4Ip5RXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4Ip7xXxEeW_BuhzgfQfeA">
            <language>OCL</language>
            <body>let set_ds : Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(d|d.oclIsTypeOf( Income_Tax_Deduction_Concepts::DS) and d.tax_year = self.valid_from_date),&#xA;&#x9;total_ds : Integer = set_ds.deductible_amount->sum()  in&#xA;set_ds->size()>0 and&#xA;self.tax_card_type = Tax_Card_Type::Principal&#xA;&#xA;implies&#xA;&#xA;if total_ds > Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_DS.oclAsType(Integer) then&#xA; &#x9;/**THE DIFFERENCE BETWEEN THE MINIMUM AND THE TOTAL DS AMOUNT IS WRITTEN ON THE TAX CARD**/&#xA; &#x9;self.deduction_DS_monthly = (total_ds - Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_DS.oclAsType(Integer))/self.income^^compute_duration_of_contract_within_taxation_year(self.valid_from_date)->first().result&#xA; else&#xA; &#x9;/**NO NEED TO PUT DETAILS ON THE TAX CARD**/&#xA; &#x9;false&#xA; endif</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_c4Ip8BXxEeW_BuhzgfQfeA" name="Tax_Card_CE-constraint" constrainedElement="_c4Ip5RXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4Ip8RXxEeW_BuhzgfQfeA">
            <language>OCL</language>
            <body>let set_ce : Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(deduction|deduction.oclIsTypeOf(Income_Tax_Deduction_Concepts::CE) and deduction.tax_year = self.valid_from_date),&#xA;&#x9;ce : Income_Tax_Deduction_Concepts::CE = set_ce->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE) in&#xA;&#x9;&#xA;&#x9;set_ce->size() = 1 &#xA;implies&#xA;&#xA;self.tax_card_type=Tax_Card_Type::Principal and&#xA;self.deduction_CE_yearly = ce.deductible_amount and&#xA;self.deduction_CE_monthly = ce.deductible_amount/12 and&#xA;self.deduction_CE_daily = self.deduction_CE_monthly/25 /**25 working days per month**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_c4Ip8hXxEeW_BuhzgfQfeA" name="Tax_Card_FO-constraint" constrainedElement="_c4Ip5RXxEeW_BuhzgfQfeA">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4Ip8xXxEeW_BuhzgfQfeA">
            <language>OCL</language>
            <body>not self.oclIsUndefined()&#xA;implies&#xA;self.income.taxPayer.income_Tax_Deduction->select(d|d.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO) and d.tax_year = self.valid_from_date)->size() = 1&#xA;&#xA;and &#xA;&#xA;let fo : Income_Tax_Deduction_Concepts::FO = self.income_Tax_Deduction->select(d|d.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO) and d.tax_year = self.valid_from_date)->any(true).oclAsType(Income_Tax_Deduction_Concepts::FO) in&#xA;self.deduction_FO_daily = fo.daily and&#xA;self.deduction_FO_monthly = fo.monthly and&#xA;self.deduction_FO_yearly = fo.yearly&#xA;</body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:id="_c4Ip9BXxEeW_BuhzgfQfeA" name="card_identifier" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4Ip9RXxEeW_BuhzgfQfeA" name="tax_card_type" visibility="public" type="_c4IFLxXxEeW_BuhzgfQfeA"/>
        <ownedAttribute xmi:id="_c4Ip9hXxEeW_BuhzgfQfeA" name="tax_office" visibility="public" type="_c4IFMhXxEeW_BuhzgfQfeA"/>
        <ownedAttribute xmi:id="_c4Ip9xXxEeW_BuhzgfQfeA" name="valid_from_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_c4Fn5BXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4Ip-BXxEeW_BuhzgfQfeA" name="valid_until_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_c4Fn5BXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4Ip-RXxEeW_BuhzgfQfeA" name="percentage_of_witholding" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4Ip-hXxEeW_BuhzgfQfeA" name="income" visibility="private" type="_c4IEeBXxEeW_BuhzgfQfeA" association="_c4IFQRXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4Ip-xXxEeW_BuhzgfQfeA" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4Ip_BXxEeW_BuhzgfQfeA" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4Ip_RXxEeW_BuhzgfQfeA" name="tax_Class" visibility="private" type="_c4IERhXxEeW_BuhzgfQfeA" association="_c4IFRxXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4Ip_hXxEeW_BuhzgfQfeA" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4Ip_xXxEeW_BuhzgfQfeA" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqABXxEeW_BuhzgfQfeA" name="tax_payers_SSno" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqARXxEeW_BuhzgfQfeA" name="tax_payers_name_surname" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IqAhXxEeW_BuhzgfQfeA" value="2"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IqAxXxEeW_BuhzgfQfeA" value="2"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqBBXxEeW_BuhzgfQfeA" name="tax_payers_partner_name_surname" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IqBRXxEeW_BuhzgfQfeA" value="2"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IqBhXxEeW_BuhzgfQfeA" value="2"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqBxXxEeW_BuhzgfQfeA" name="tax_payers_address" visibility="public" type="_c4IDbRXxEeW_BuhzgfQfeA" isDerived="true"/>
        <ownedAttribute xmi:id="_c4IqCBXxEeW_BuhzgfQfeA" name="jobs_Employer_SSNo" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqCRXxEeW_BuhzgfQfeA" name="jobs_employers_name" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqChXxEeW_BuhzgfQfeA" name="jobs_activity_type" visibility="public" type="_c4IFKxXxEeW_BuhzgfQfeA" isDerived="true"/>
        <ownedAttribute xmi:id="_c4IqCxXxEeW_BuhzgfQfeA" name="jobs_place_of_work" visibility="public" type="_c4IFOxXxEeW_BuhzgfQfeA" isDerived="true"/>
        <ownedAttribute xmi:id="_c4IqDBXxEeW_BuhzgfQfeA" name="deduction_FD_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqDRXxEeW_BuhzgfQfeA" name="deduction_FD_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqDhXxEeW_BuhzgfQfeA" name="deduction_FD_yearly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqDxXxEeW_BuhzgfQfeA" name="deduction_AC_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqEBXxEeW_BuhzgfQfeA" name="deduction_AC_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqERXxEeW_BuhzgfQfeA" name="deduction_AC_yearly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqEhXxEeW_BuhzgfQfeA" name="deduction_CE_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqExXxEeW_BuhzgfQfeA" name="deduction_CE_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqFBXxEeW_BuhzgfQfeA" name="deduction_CE_yearly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqFRXxEeW_BuhzgfQfeA" name="deduction_DS_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqFhXxEeW_BuhzgfQfeA" name="deduction_DS_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqFxXxEeW_BuhzgfQfeA" name="deduction_DS_yearly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqGBXxEeW_BuhzgfQfeA" name="deduction_FO_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqGRXxEeW_BuhzgfQfeA" name="deduction_FO_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqGhXxEeW_BuhzgfQfeA" name="deduction_FO_yearly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqGxXxEeW_BuhzgfQfeA" name="credit_CIS_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqHBXxEeW_BuhzgfQfeA" name="credit_CIS_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqHRXxEeW_BuhzgfQfeA" name="credit_CIP_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqHhXxEeW_BuhzgfQfeA" name="credit_CIM_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqHxXxEeW_BuhzgfQfeA" name="credit_CIM_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqIBXxEeW_BuhzgfQfeA" name="tax_Payer" visibility="private" type="_c4ID4hXxEeW_BuhzgfQfeA" association="_c4IEOxXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IqIRXxEeW_BuhzgfQfeA" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IqIhXxEeW_BuhzgfQfeA" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqIxXxEeW_BuhzgfQfeA" name="income_Tax_Credit" visibility="private" type="_c4IqORXxEeW_BuhzgfQfeA" aggregation="shared" association="_c4IqMBXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IqJBXxEeW_BuhzgfQfeA" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IqJRXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqJhXxEeW_BuhzgfQfeA" name="income_Tax_Deduction" visibility="private" type="_c4IqrxXxEeW_BuhzgfQfeA" aggregation="shared" association="_c4IqrhXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IqJxXxEeW_BuhzgfQfeA" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IqKBXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqKRXxEeW_BuhzgfQfeA" name="validity" visibility="protected">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqKhXxEeW_BuhzgfQfeA" name="previous" visibility="private" type="_c4Ip5RXxEeW_BuhzgfQfeA" association="_c4IqMRXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IqKxXxEeW_BuhzgfQfeA" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IqLBXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqLRXxEeW_BuhzgfQfeA" name="current_tax_card" visibility="private" type="_c4Ip5RXxEeW_BuhzgfQfeA" association="_c4IqMRXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IqLhXxEeW_BuhzgfQfeA" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IqLxXxEeW_BuhzgfQfeA" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_c4IqMBXxEeW_BuhzgfQfeA" name="include" memberEnd="_c4IqRRXxEeW_BuhzgfQfeA _c4IqIxXxEeW_BuhzgfQfeA"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_c4IqMRXxEeW_BuhzgfQfeA" name="invalidated by" memberEnd="_c4IqKhXxEeW_BuhzgfQfeA _c4IqLRXxEeW_BuhzgfQfeA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_c4IqMhXxEeW_BuhzgfQfeA" name="Income_Tax_Credit_Concepts">
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IqMxXxEeW_BuhzgfQfeA" name="CIM">
        <generalization xmi:id="_c4IqNBXxEeW_BuhzgfQfeA" general="_c4IqORXxEeW_BuhzgfQfeA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IqNRXxEeW_BuhzgfQfeA" name="CIP">
        <generalization xmi:id="_c4IqNhXxEeW_BuhzgfQfeA" general="_c4IqORXxEeW_BuhzgfQfeA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IqNxXxEeW_BuhzgfQfeA" name="CIS">
        <generalization xmi:id="_c4IqOBXxEeW_BuhzgfQfeA" general="_c4IqORXxEeW_BuhzgfQfeA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IqORXxEeW_BuhzgfQfeA" name="Income_Tax_Credit">
        <ownedAttribute xmi:id="_c4IqOhXxEeW_BuhzgfQfeA" name="grantedBy" visibility="public" type="_c4IFFRXxEeW_BuhzgfQfeA"/>
        <ownedAttribute xmi:id="_c4IqOxXxEeW_BuhzgfQfeA" name="taxPayer" visibility="private" type="_c4ID4hXxEeW_BuhzgfQfeA" association="_c4IFJBXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IqPBXxEeW_BuhzgfQfeA" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IqPRXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqPhXxEeW_BuhzgfQfeA" name="tax_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqPxXxEeW_BuhzgfQfeA" name="yearly" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_c4IqQBXxEeW_BuhzgfQfeA" value="300">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqQRXxEeW_BuhzgfQfeA" name="monthly" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_c4IqQhXxEeW_BuhzgfQfeA" value="25">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqQxXxEeW_BuhzgfQfeA" name="daily" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_c4IqRBXxEeW_BuhzgfQfeA" value="1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqRRXxEeW_BuhzgfQfeA" name="taxation_Frame" visibility="private" type="_c4Ip5RXxEeW_BuhzgfQfeA" association="_c4IqMBXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IqRhXxEeW_BuhzgfQfeA" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IqRxXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_c4IqSBXxEeW_BuhzgfQfeA" name="Income_Tax_Deduction_Concepts">
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IqSRXxEeW_BuhzgfQfeA" name="FD">
        <generalization xmi:id="_c4IqShXxEeW_BuhzgfQfeA" general="_c4IqqRXxEeW_BuhzgfQfeA"/>
        <ownedAttribute xmi:id="_c4IqSxXxEeW_BuhzgfQfeA" name="distance_declared_in_january" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqTBXxEeW_BuhzgfQfeA" name="calculated_distance" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_c4IqTRXxEeW_BuhzgfQfeA" name="compute_distance_unit_between_home_and_workpalce" isQuery="true">
          <eAnnotations xmi:id="_c4IqThXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_c4IqTxXxEeW_BuhzgfQfeA" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IqUBXxEeW_BuhzgfQfeA" name="FO">
        <generalization xmi:id="_c4IqURXxEeW_BuhzgfQfeA" general="_c4IqqRXxEeW_BuhzgfQfeA"/>
        <ownedAttribute xmi:id="_c4IqUhXxEeW_BuhzgfQfeA" name="rate_type_for_FO" visibility="public" type="_c4IFShXxEeW_BuhzgfQfeA" isDerived="true"/>
        <ownedOperation xmi:id="_c4IqUxXxEeW_BuhzgfQfeA" name="compute_disability_flat_rate" isQuery="true">
          <eAnnotations xmi:id="_c4IqVBXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_c4IqVRXxEeW_BuhzgfQfeA" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_c4IqVhXxEeW_BuhzgfQfeA" name="compute_regular_flat_rate" isQuery="true">
          <eAnnotations xmi:id="_c4IqVxXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_c4IqWBXxEeW_BuhzgfQfeA" key="lookup"/>
          </eAnnotations>
          <ownedParameter xmi:id="_c4IqWRXxEeW_BuhzgfQfeA" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IqWhXxEeW_BuhzgfQfeA" name="CE">
        <eAnnotations xmi:id="_c4IqWxXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
        <generalization xmi:id="_c4IqXBXxEeW_BuhzgfQfeA" general="_c4IqrxXxEeW_BuhzgfQfeA"/>
        <ownedAttribute xmi:id="_c4IqXRXxEeW_BuhzgfQfeA" name="ce_deduction_type" visibility="public" type="_c4IFTRXxEeW_BuhzgfQfeA"/>
        <ownedAttribute xmi:id="_c4IqXhXxEeW_BuhzgfQfeA" name="dependent_relative_flat_rate" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqXxXxEeW_BuhzgfQfeA" name="disability_flat_rate" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_c4IqYBXxEeW_BuhzgfQfeA" name="compute_disability_flat_rate_for_CE" isQuery="true" postcondition="_c4IqYhXxEeW_BuhzgfQfeA">
          <eAnnotations xmi:id="_c4IqYRXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_c4IqYhXxEeW_BuhzgfQfeA" name="compute_disability_flat_rate" constrainedElement="_c4IqYBXxEeW_BuhzgfQfeA">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IqYxXxEeW_BuhzgfQfeA">
              <language>OCL</language>
              <body>if self.ce_deduction_type = CE_Type::INALIDITY_AND_INFIRMITY then&#xA;&#x9;self.disability_flat_rate = IN_disability_flat_rate&#xA;else&#xA;&#x9;false&#xA;endif&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_c4IqZBXxEeW_BuhzgfQfeA" name="IN_disability_flat_rate">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_c4IqZRXxEeW_BuhzgfQfeA" name="compute_dependent_relative_flat_rate_for_CE" isQuery="true" postcondition="_c4IqZxXxEeW_BuhzgfQfeA">
          <eAnnotations xmi:id="_c4IqZhXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_c4IqZxXxEeW_BuhzgfQfeA" name="dependent_relative_flat_rate" constrainedElement="_c4IqZRXxEeW_BuhzgfQfeA">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IqaBXxEeW_BuhzgfQfeA">
              <language>OCL</language>
              <body>if self.ce_deduction_type = CE_Type::DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD then&#xA;&#x9;self.dependent_relative_flat_rate = IN_dependent_relative_flat_rate&#xA;else&#x9;&#xA;&#x9;false&#xA;endif&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_c4IqaRXxEeW_BuhzgfQfeA" name="IN_dependent_relative_flat_rate">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IqahXxEeW_BuhzgfQfeA" name="AC">
        <generalization xmi:id="_c4IqaxXxEeW_BuhzgfQfeA" general="_c4IqrxXxEeW_BuhzgfQfeA"/>
        <ownedOperation xmi:id="_c4IqbBXxEeW_BuhzgfQfeA" name="is_eligible_income_for_AC" isQuery="true" postcondition="_c4IqbhXxEeW_BuhzgfQfeA">
          <eAnnotations xmi:id="_c4IqbRXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_c4IqbhXxEeW_BuhzgfQfeA" name="is_eligible_income_for_AC" constrainedElement="_c4IqbBXxEeW_BuhzgfQfeA">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IqbxXxEeW_BuhzgfQfeA">
              <language>OCL</language>
              <body>if IN_income.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or&#xA;&#x9;IN_income.income_type.oclIsTypeOf(Income_Concepts::Independent_Professional_Services_Income) or&#xA;&#x9;IN_income.income_type.oclIsTypeOf(Income_Concepts::Agriculture_and_Forestry_Income) or&#xA;&#x9;IN_income.income_type.oclIsTypeOf(Income_Concepts::Trade_and_Business_Income) then&#xA;&#x9;result = true&#xA;else&#xA;&#x9;result=false&#xA;endif&#xA; </body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_c4IqcBXxEeW_BuhzgfQfeA" name="IN_income" type="_c4IEeBXxEeW_BuhzgfQfeA"/>
          <ownedParameter xmi:id="_c4IqcRXxEeW_BuhzgfQfeA" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_c4IqchXxEeW_BuhzgfQfeA" name="is_eligible_income_for_AC_assisting_spouse" isQuery="true" postcondition="_c4IqdBXxEeW_BuhzgfQfeA">
          <eAnnotations xmi:id="_c4IqcxXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_c4IqdBXxEeW_BuhzgfQfeA" name="is_eligible_income_for_AC_assisting_spouse" constrainedElement="_c4IqchXxEeW_BuhzgfQfeA">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IqdRXxEeW_BuhzgfQfeA">
              <language>OCL</language>
              <body>if  IN_income.income_type.oclIsTypeOf(Income_Concepts::Independent_Professional_Services_Income) or&#xA;&#x9;IN_income.income_type.oclIsTypeOf(Income_Concepts::Trade_and_Business_Income) then&#xA;&#x9;result = true&#xA;else&#xA;&#x9;result=false&#xA;endif&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_c4IqdhXxEeW_BuhzgfQfeA" name="IN_income" type="_c4IEeBXxEeW_BuhzgfQfeA"/>
          <ownedParameter xmi:id="_c4IqdxXxEeW_BuhzgfQfeA" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IqeBXxEeW_BuhzgfQfeA" name="DS_for_Permanent_Expense">
        <generalization xmi:id="_c4IqeRXxEeW_BuhzgfQfeA" general="_c4IqqxXxEeW_BuhzgfQfeA"/>
        <ownedAttribute xmi:id="_c4IqehXxEeW_BuhzgfQfeA" name="permanent_expense_category" visibility="public" type="_c4IE9hXxEeW_BuhzgfQfeA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IqexXxEeW_BuhzgfQfeA" name="DS_for_Interest_Expense">
        <generalization xmi:id="_c4IqfBXxEeW_BuhzgfQfeA" general="_c4IqqxXxEeW_BuhzgfQfeA"/>
        <ownedOperation xmi:id="_c4IqfRXxEeW_BuhzgfQfeA" name="compute_maximum_deductible_amount" isQuery="true" postcondition="_c4IqfxXxEeW_BuhzgfQfeA">
          <eAnnotations xmi:id="_c4IqfhXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_c4IqfxXxEeW_BuhzgfQfeA" name="maximum_deductible_amount" constrainedElement="_c4IqfRXxEeW_BuhzgfQfeA">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IqgBXxEeW_BuhzgfQfeA">
              <language>OCL</language>
              <body>result = 1 and&#xA;self.maximum_deductible_amount = 1&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_c4IqgRXxEeW_BuhzgfQfeA" name="result" isOrdered="true" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_c4IqghXxEeW_BuhzgfQfeA" name="IN_children_with_allowances" type="_c4IDdhXxEeW_BuhzgfQfeA">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IqgxXxEeW_BuhzgfQfeA" value="*"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IqhBXxEeW_BuhzgfQfeA"/>
          </ownedParameter>
          <ownedParameter xmi:id="_c4IqhRXxEeW_BuhzgfQfeA" name="IN_legal_union" type="_c4IDqRXxEeW_BuhzgfQfeA">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IqhhXxEeW_BuhzgfQfeA" value="*"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IqhxXxEeW_BuhzgfQfeA"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IqiBXxEeW_BuhzgfQfeA" name="DS_for_Health_and_Pension_Insurance">
        <generalization xmi:id="_c4IqiRXxEeW_BuhzgfQfeA" general="_c4IqqxXxEeW_BuhzgfQfeA"/>
        <ownedAttribute xmi:id="_c4IqihXxEeW_BuhzgfQfeA" name="insurance_category" visibility="public" type="_c4IE_xXxEeW_BuhzgfQfeA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IqixXxEeW_BuhzgfQfeA" name="DS_for_Private_Insurance_and_Plan">
        <generalization xmi:id="_c4IqjBXxEeW_BuhzgfQfeA" general="_c4IqqxXxEeW_BuhzgfQfeA"/>
        <ownedAttribute xmi:id="_c4IqjRXxEeW_BuhzgfQfeA" name="private_insurance_and_plan_category" visibility="public" type="_c4IE-RXxEeW_BuhzgfQfeA"/>
        <ownedAttribute xmi:id="_c4IqjhXxEeW_BuhzgfQfeA" name="increase_for_life_insurance" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqjxXxEeW_BuhzgfQfeA" name="maximum_deductible_amount_for_private_insurance" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqkBXxEeW_BuhzgfQfeA" name="maximum_deductible_amount_for_old_age_pension_plan" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_c4IqkRXxEeW_BuhzgfQfeA" name="compute_increase_for_life_insurance" isQuery="true" postcondition="_c4IqkxXxEeW_BuhzgfQfeA">
          <eAnnotations xmi:id="_c4IqkhXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_c4IqkxXxEeW_BuhzgfQfeA" name="get_increase_for_life_insurance" constrainedElement="_c4IqkRXxEeW_BuhzgfQfeA">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IqlBXxEeW_BuhzgfQfeA">
              <language>OCL</language>
              <body>result = 1&#xA;and self.increase_for_life_insurance = 1&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_c4IqlRXxEeW_BuhzgfQfeA" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_c4IqlhXxEeW_BuhzgfQfeA" name="compute_maximum_deductible_amount_for_private_insruance" isQuery="true" postcondition="_c4IqmBXxEeW_BuhzgfQfeA">
          <eAnnotations xmi:id="_c4IqlxXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_c4IqmBXxEeW_BuhzgfQfeA" name="get_maximum_deductible_amount_for_private_insurance" constrainedElement="_c4IqlhXxEeW_BuhzgfQfeA">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IqmRXxEeW_BuhzgfQfeA">
              <language>OCL</language>
              <body>self.maximum_deductible_amount_for_private_insurance = 1&#xA;</body>
            </specification>
          </ownedRule>
        </ownedOperation>
        <ownedOperation xmi:id="_c4IqmhXxEeW_BuhzgfQfeA" name="compute_maximum_deductible_amount_for_old_age_pension_plan" isQuery="true" postcondition="_c4IqnBXxEeW_BuhzgfQfeA">
          <eAnnotations xmi:id="_c4IqmxXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_c4IqnBXxEeW_BuhzgfQfeA" name="maximum_deductible_amount_for_old_age_pension_plan" constrainedElement="_c4IqmhXxEeW_BuhzgfQfeA">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IqnRXxEeW_BuhzgfQfeA">
              <language>OCL</language>
              <body>maximum_deductible_amount_for_old_age_pension_plan = 1&#xA;</body>
            </specification>
          </ownedRule>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IqnhXxEeW_BuhzgfQfeA" name="DS_for_Loss_Carryforward">
        <generalization xmi:id="_c4IqnxXxEeW_BuhzgfQfeA" general="_c4IqqxXxEeW_BuhzgfQfeA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IqoBXxEeW_BuhzgfQfeA" name="DS_for_Donation">
        <generalization xmi:id="_c4IqoRXxEeW_BuhzgfQfeA" general="_c4IqqxXxEeW_BuhzgfQfeA"/>
        <ownedOperation xmi:id="_c4IqohXxEeW_BuhzgfQfeA" name="compute_maximum_deductible_amount_for_donation" isQuery="true" postcondition="_c4IqpBXxEeW_BuhzgfQfeA">
          <eAnnotations xmi:id="_c4IqoxXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_c4IqpBXxEeW_BuhzgfQfeA" name="maximum_deductible_amount" constrainedElement="_c4IqohXxEeW_BuhzgfQfeA">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_c4IqpRXxEeW_BuhzgfQfeA">
              <language>OCL</language>
              <body>if IN_maximum_percentage = Constants::MAXIMUM_DEDUCTIBLE_PERCENTAGE_FOR_DONATIONS then&#xA;&#x9;self.maximum_deductible_amount = IN_maximum_percentage.oclAsType(Integer)/100 * IN_total_tax_payer_income&#xA;else&#xA;&#x9;false&#xA;endif&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_c4IqphXxEeW_BuhzgfQfeA" name="IN_maximum_percentage" type="_c4IFVhXxEeW_BuhzgfQfeA"/>
          <ownedParameter xmi:id="_c4IqpxXxEeW_BuhzgfQfeA" name="IN_total_tax_payer_income">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_c4IqqBXxEeW_BuhzgfQfeA" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IqqRXxEeW_BuhzgfQfeA" name="Professional_Expenses_Deduction">
        <generalization xmi:id="_c4IqqhXxEeW_BuhzgfQfeA" general="_c4IqrxXxEeW_BuhzgfQfeA"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IqqxXxEeW_BuhzgfQfeA" name="DS">
        <generalization xmi:id="_c4IqrBXxEeW_BuhzgfQfeA" general="_c4IqrxXxEeW_BuhzgfQfeA"/>
        <ownedAttribute xmi:id="_c4IqrRXxEeW_BuhzgfQfeA" name="maximum_deductible_amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_c4IqrhXxEeW_BuhzgfQfeA" name="considers" memberEnd="_c4IquBXxEeW_BuhzgfQfeA _c4IqJhXxEeW_BuhzgfQfeA"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_c4IqrxXxEeW_BuhzgfQfeA" name="Income_Tax_Deduction">
        <ownedAttribute xmi:id="_c4IqsBXxEeW_BuhzgfQfeA" name="tax_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqsRXxEeW_BuhzgfQfeA" name="daily" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqshXxEeW_BuhzgfQfeA" name="monthly" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqsxXxEeW_BuhzgfQfeA" name="yearly" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqtBXxEeW_BuhzgfQfeA" name="tax_Payer" visibility="private" type="_c4ID4hXxEeW_BuhzgfQfeA" association="_c4IFSBXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IqtRXxEeW_BuhzgfQfeA" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IqthXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IqtxXxEeW_BuhzgfQfeA" name="deductible_amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IquBXxEeW_BuhzgfQfeA" name="tax_card" visibility="private" type="_c4Ip5RXxEeW_BuhzgfQfeA" association="_c4IqrhXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IquRXxEeW_BuhzgfQfeA" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IquhXxEeW_BuhzgfQfeA"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_c4IquxXxEeW_BuhzgfQfeA" name="expenses" visibility="private" type="_c4IFBBXxEeW_BuhzgfQfeA" association="_c4IqvhXxEeW_BuhzgfQfeA">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_c4IqvBXxEeW_BuhzgfQfeA" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c4IqvRXxEeW_BuhzgfQfeA" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_c4IqvhXxEeW_BuhzgfQfeA" name="is computed based on" memberEnd="_c4IquxXxEeW_BuhzgfQfeA _c4IFEhXxEeW_BuhzgfQfeA"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="_c4IqvxXxEeW_BuhzgfQfeA" name="Interface1"/>
    <packagedElement xmi:type="uml:DataType" xmi:id="_c4IqwBXxEeW_BuhzgfQfeA" name="DataType1"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_c4IqwRXxEeW_BuhzgfQfeA" name="Class1"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_c4IqwhXxEeW_BuhzgfQfeA" name="Class2"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_c4IqwxXxEeW_BuhzgfQfeA" name="Class3"/>
    <profileApplication xmi:id="_c4IqxBXxEeW_BuhzgfQfeA">
      <eAnnotations xmi:id="_c4IqxRXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://UML_PROFILES/Standard.profile.uml#_yzU58YinEdqtvbnfB2L_5w"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_PROFILES/Standard.profile.uml#_0"/>
    </profileApplication>
    <profileApplication xmi:id="_c4IqxhXxEeW_BuhzgfQfeA">
      <eAnnotations xmi:id="_c4IqxxXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="Default.profile.uml#_c4MVzRXxEeW_BuhzgfQfeA"/>
      </eAnnotations>
      <appliedProfile href="Default.profile.uml#_c4MVyxXxEeW_BuhzgfQfeA"/>
    </profileApplication>
    <profileApplication xmi:id="_c4IqyBXxEeW_BuhzgfQfeA">
      <eAnnotations xmi:id="_c4IqyRXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="Deployment.profile.uml#_c1_UyRXxEeW_BuhzgfQfeA"/>
      </eAnnotations>
      <appliedProfile href="Deployment.profile.uml#_c1_UxxXxEeW_BuhzgfQfeA"/>
    </profileApplication>
    <profileApplication xmi:id="_c4IqyhXxEeW_BuhzgfQfeA">
      <eAnnotations xmi:id="_c4IqyxXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="MARTE_VSL.profile.uml#_c4DL6xXxEeW_BuhzgfQfeA"/>
      </eAnnotations>
      <appliedProfile href="MARTE_VSL.profile.uml#_c4DL6RXxEeW_BuhzgfQfeA"/>
    </profileApplication>
    <profileApplication xmi:id="_c4IqzBXxEeW_BuhzgfQfeA">
      <eAnnotations xmi:id="_c4IqzRXxEeW_BuhzgfQfeA" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="MARTE_Time.profile.uml#_c2P0fxXxEeW_BuhzgfQfeA"/>
      </eAnnotations>
      <appliedProfile href="MARTE_Time.profile.uml#_c2P0fRXxEeW_BuhzgfQfeA"/>
    </profileApplication>
  </uml:Package>
  <Default:Documentation xmi:id="_c4IqzhXxEeW_BuhzgfQfeA" base_Comment="_c4IEWxXxEeW_BuhzgfQfeA"/>
  <Default:Documentation xmi:id="_c4IqzxXxEeW_BuhzgfQfeA" base_Comment="_c4IDqhXxEeW_BuhzgfQfeA"/>
</xmi:XMI>
