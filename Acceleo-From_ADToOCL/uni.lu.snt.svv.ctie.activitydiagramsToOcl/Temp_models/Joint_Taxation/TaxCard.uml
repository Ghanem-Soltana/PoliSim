<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.1" xmlns:xmi="http://schema.omg.org/spec/XMI/2.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:Default="http:///schemas/Default/_fNm3AAqoEd6-N_NOT9vsCA/2" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/3.0.0/UML" xsi:schemaLocation="http:///schemas/Default/_fNm3AAqoEd6-N_NOT9vsCA/2 Default.profile.uml#_f30k8oMJEeWhJIXHrNBLtw">
  <uml:Package xmi:id="_f3spCYMJEeWhJIXHrNBLtw" name="TaxCard">
    <packageImport xmi:id="_f3spCoMJEeWhJIXHrNBLtw">
      <importedPackage xmi:type="uml:Model" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#_0"/>
    </packageImport>
    <packageImport xmi:id="_f3spC4MJEeWhJIXHrNBLtw">
      <importedPackage xmi:type="uml:Model" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#_0"/>
    </packageImport>
    <packageImport xmi:id="_f3spDIMJEeWhJIXHrNBLtw">
      <importedPackage xmi:type="uml:Model" href="MARTELibrary.uml#_f3yvzIMJEeWhJIXHrNBLtw"/>
    </packageImport>
    <packagedElement xmi:type="uml:Package" xmi:id="_f3spDYMJEeWhJIXHrNBLtw" name="Tax_Card_Domain">
      <packageImport xmi:id="_f3spDoMJEeWhJIXHrNBLtw" importedPackage="_f3tPBoMJEeWhJIXHrNBLtw"/>
      <packageImport xmi:id="_f3spD4MJEeWhJIXHrNBLtw" importedPackage="_f3spFIMJEeWhJIXHrNBLtw"/>
      <packageImport xmi:id="_f3spEIMJEeWhJIXHrNBLtw" importedPackage="_f3tO8IMJEeWhJIXHrNBLtw"/>
      <packageImport xmi:id="_f3spEYMJEeWhJIXHrNBLtw" importedPackage="_f3sqBoMJEeWhJIXHrNBLtw"/>
      <packageImport xmi:id="_f3spEoMJEeWhJIXHrNBLtw" importedPackage="_f3sqRoMJEeWhJIXHrNBLtw"/>
      <packageImport xmi:id="_f3spE4MJEeWhJIXHrNBLtw" importedPackage="_f3srNIMJEeWhJIXHrNBLtw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_f3spFIMJEeWhJIXHrNBLtw" name="Tax_Payer_Concepts">
      <packagedElement xmi:type="uml:Association" xmi:id="_f3spFYMJEeWhJIXHrNBLtw" name="taxed under" memberEnd="_f3spyIMJEeWhJIXHrNBLtw _f3sp94MJEeWhJIXHrNBLtw"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3spFoMJEeWhJIXHrNBLtw" name="Income_Tax">
        <ownedAttribute xmi:id="_f3spF4MJEeWhJIXHrNBLtw" name="taxPayer" visibility="private" type="_f3spkYMJEeWhJIXHrNBLtw" association="_f3sp9IMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3spGIMJEeWhJIXHrNBLtw" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3spGYMJEeWhJIXHrNBLtw" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3spGoMJEeWhJIXHrNBLtw" name="tax_amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3spG4MJEeWhJIXHrNBLtw" name="tax_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_f3ywTYMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3spHIMJEeWhJIXHrNBLtw" name="Address">
        <ownedAttribute xmi:id="_f3spHYMJEeWhJIXHrNBLtw" name="taxPayer" visibility="private" type="_f3spaoMJEeWhJIXHrNBLtw" association="_f3sp64MJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3spHoMJEeWhJIXHrNBLtw" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3spH4MJEeWhJIXHrNBLtw" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3spIIMJEeWhJIXHrNBLtw" name="country" visibility="public" type="_f3sqzIMJEeWhJIXHrNBLtw">
          <defaultValue xmi:type="uml:InstanceValue" xmi:id="_f3spIYMJEeWhJIXHrNBLtw" name="LU" type="_f3sqzIMJEeWhJIXHrNBLtw" instance="_f3sqzYMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3spIoMJEeWhJIXHrNBLtw" name="street" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3spI4MJEeWhJIXHrNBLtw" name="zipCode" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3spJIMJEeWhJIXHrNBLtw" name="city" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3spJYMJEeWhJIXHrNBLtw" name="Dependent">
        <generalization xmi:id="_f3spJoMJEeWhJIXHrNBLtw" general="_f3spaoMJEeWhJIXHrNBLtw"/>
        <ownedAttribute xmi:id="_f3spJ4MJEeWhJIXHrNBLtw" name="dependent_type" visibility="public" type="_f3sq8YMJEeWhJIXHrNBLtw"/>
        <ownedAttribute xmi:id="_f3spKIMJEeWhJIXHrNBLtw" name="household" visibility="private" type="_f3spUYMJEeWhJIXHrNBLtw" association="_f3sp8oMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3spKYMJEeWhJIXHrNBLtw" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3spKoMJEeWhJIXHrNBLtw" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3spK4MJEeWhJIXHrNBLtw" name="responsible_person" visibility="private" type="_f3spkYMJEeWhJIXHrNBLtw" association="_f3sp8YMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3spLIMJEeWhJIXHrNBLtw" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3spLYMJEeWhJIXHrNBLtw" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3spLoMJEeWhJIXHrNBLtw" name="continued_studies" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_f3spL4MJEeWhJIXHrNBLtw">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3spMIMJEeWhJIXHrNBLtw" name="expense" visibility="private" type="_f3sqs4MJEeWhJIXHrNBLtw" association="_f3sp84MJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3spMYMJEeWhJIXHrNBLtw" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3spMoMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3spM4MJEeWhJIXHrNBLtw" name="tax_Payer" visibility="private" type="_f3spkYMJEeWhJIXHrNBLtw" association="_f3sp8IMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3spNIMJEeWhJIXHrNBLtw" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3spNYMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_f3spNoMJEeWhJIXHrNBLtw" name="compute_if_dependent_receives_allowances_eligible_for_CIM" isQuery="true">
          <eAnnotations xmi:id="_f3spN4MJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_f3spOIMJEeWhJIXHrNBLtw" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_f3spOYMJEeWhJIXHrNBLtw" name="compute_if_dependent_receives_allowances_eligible_for_DS" isQuery="true">
          <eAnnotations xmi:id="_f3spOoMJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_f3spO4MJEeWhJIXHrNBLtw" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_f3spPIMJEeWhJIXHrNBLtw" name="compute_if_dependent_receives_allowances_eligible_for_CE_dependance_and_care" isQuery="true">
          <eAnnotations xmi:id="_f3spPYMJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_f3spPoMJEeWhJIXHrNBLtw" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_f3spP4MJEeWhJIXHrNBLtw" name="is_dependent_following_continued_studies" isQuery="true" postcondition="_f3spQYMJEeWhJIXHrNBLtw">
          <eAnnotations xmi:id="_f3spQIMJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_f3spQYMJEeWhJIXHrNBLtw" name="is_dependent_following_continued_studies" constrainedElement="_f3spP4MJEeWhJIXHrNBLtw">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3spQoMJEeWhJIXHrNBLtw">
              <language>OCL</language>
              <body>self.continued_studies = IN_continued_studies&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_f3spQ4MJEeWhJIXHrNBLtw" name="IN_continued_studies">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_f3spRIMJEeWhJIXHrNBLtw" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3spRYMJEeWhJIXHrNBLtw" name="External_Allowance">
        <ownedAttribute xmi:id="_f3spRoMJEeWhJIXHrNBLtw" name="amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3spR4MJEeWhJIXHrNBLtw" name="grantor" visibility="public" type="_f3sqxIMJEeWhJIXHrNBLtw"/>
        <ownedAttribute xmi:id="_f3spSIMJEeWhJIXHrNBLtw" name="person" visibility="private" type="_f3spaoMJEeWhJIXHrNBLtw" association="_f3sp7IMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3spSYMJEeWhJIXHrNBLtw" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3spSoMJEeWhJIXHrNBLtw" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3spS4MJEeWhJIXHrNBLtw" name="valid_from_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_f3ywTYMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3spTIMJEeWhJIXHrNBLtw" name="valid_until_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_f3ywTYMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3spTYMJEeWhJIXHrNBLtw" name="Fiscal_Address">
        <generalization xmi:id="_f3spToMJEeWhJIXHrNBLtw" general="_f3spHIMJEeWhJIXHrNBLtw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3spT4MJEeWhJIXHrNBLtw" name="Habitual_Address">
        <generalization xmi:id="_f3spUIMJEeWhJIXHrNBLtw" general="_f3spHIMJEeWhJIXHrNBLtw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3spUYMJEeWhJIXHrNBLtw" name="Household">
        <ownedAttribute xmi:id="_f3spUoMJEeWhJIXHrNBLtw" name="tax_Payer" visibility="private" type="_f3spkYMJEeWhJIXHrNBLtw" association="_f3sp74MJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3spU4MJEeWhJIXHrNBLtw" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3spVIMJEeWhJIXHrNBLtw" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3spVYMJEeWhJIXHrNBLtw" name="dependent" visibility="private" type="_f3spJYMJEeWhJIXHrNBLtw" association="_f3sp8oMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3spVoMJEeWhJIXHrNBLtw" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3spV4MJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3spWIMJEeWhJIXHrNBLtw" name="Legal_Union_Record">
        <ownedComment xmi:id="_f3spWYMJEeWhJIXHrNBLtw" annotatedElement="_f3spWIMJEeWhJIXHrNBLtw">
          <body>&lt;p>&lt;span style=&quot;font-size:16pt;&quot;>When&amp;nbsp;a&amp;nbsp;decision&amp;nbsp;for&amp;nbsp;Dates&amp;nbsp;would&amp;nbsp;be&amp;nbsp;taken,&amp;nbsp;&lt;/span>&lt;/p>&lt;p>&lt;span style=&quot;font-size:16pt;&quot;>we&amp;nbsp;must&amp;nbsp;take&amp;nbsp;into&amp;nbsp;account&amp;nbsp;that&amp;nbsp;all&amp;nbsp;marriages&amp;nbsp;and&amp;nbsp;partnerships&amp;nbsp;are&amp;nbsp;mutually&amp;nbsp;exclusive.&lt;/span>&lt;/p></body>
        </ownedComment>
        <ownedRule xmi:id="_f3spWoMJEeWhJIXHrNBLtw" name="Legal_Union-different_people-constraint" constrainedElement="_f3spWIMJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3spW4MJEeWhJIXHrNBLtw">
            <language>OCL</language>
            <body>if self.end_date.oclIsUndefined() then&#xA;/**LEGAL UNION IS VALID**/&#xA;self.individual_A.SSNo &lt;> self.individual_B.SSNo&#xA;and&#xA;self.individual_A->size()=1 and&#xA;self.individual_B->size()=1&#xA;else&#xA;/**LEGAL UNION IS AUTHORIZED WITH ONLY ONE PERSON**/&#xA;false&#xA;endif&#xA;</body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:id="_f3spXIMJEeWhJIXHrNBLtw" name="start_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_f3ywTYMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3spXYMJEeWhJIXHrNBLtw" name="end_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_f3ywTYMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3spXoMJEeWhJIXHrNBLtw" name="individual_A" visibility="private" type="_f3spaoMJEeWhJIXHrNBLtw" association="_f3sp7oMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3spX4MJEeWhJIXHrNBLtw" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3spYIMJEeWhJIXHrNBLtw" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3spYYMJEeWhJIXHrNBLtw" name="individual_B" visibility="private" type="_f3spaoMJEeWhJIXHrNBLtw" association="_f3sp7YMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3spYoMJEeWhJIXHrNBLtw" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3spY4MJEeWhJIXHrNBLtw" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3spZIMJEeWhJIXHrNBLtw" name="Marriage_Record">
        <generalization xmi:id="_f3spZYMJEeWhJIXHrNBLtw" general="_f3spWIMJEeWhJIXHrNBLtw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3spZoMJEeWhJIXHrNBLtw" name="Non_Resident_Tax_Payer">
        <generalization xmi:id="_f3spZ4MJEeWhJIXHrNBLtw" general="_f3spkYMJEeWhJIXHrNBLtw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3spaIMJEeWhJIXHrNBLtw" name="Partnership_Record">
        <generalization xmi:id="_f3spaYMJEeWhJIXHrNBLtw" general="_f3spWIMJEeWhJIXHrNBLtw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3spaoMJEeWhJIXHrNBLtw" name="Physical_Person">
        <ownedAttribute xmi:id="_f3spa4MJEeWhJIXHrNBLtw" name="name" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3spbIMJEeWhJIXHrNBLtw" name="is_assisting_spouse" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3spbYMJEeWhJIXHrNBLtw" name="SSNo" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3spboMJEeWhJIXHrNBLtw" name="allowances" visibility="private" type="_f3spRYMJEeWhJIXHrNBLtw" association="_f3sp7IMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3spb4MJEeWhJIXHrNBLtw" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3spcIMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3spcYMJEeWhJIXHrNBLtw" name="addresses" visibility="private" type="_f3spHIMJEeWhJIXHrNBLtw" association="_f3sp64MJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3spcoMJEeWhJIXHrNBLtw" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3spc4MJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3spdIMJEeWhJIXHrNBLtw" name="legal_union_A" visibility="private" type="_f3spWIMJEeWhJIXHrNBLtw" association="_f3sp7oMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3spdYMJEeWhJIXHrNBLtw" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3spdoMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3spd4MJEeWhJIXHrNBLtw" name="legal_union_B" visibility="private" type="_f3spWIMJEeWhJIXHrNBLtw" association="_f3sp7YMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3speIMJEeWhJIXHrNBLtw" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3speYMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3speoMJEeWhJIXHrNBLtw" name="age" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3spe4MJEeWhJIXHrNBLtw" name="disability_percentage" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_f3spfIMJEeWhJIXHrNBLtw">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3spfYMJEeWhJIXHrNBLtw" name="is_affiliated_personnaly_to_social_security" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_f3spfoMJEeWhJIXHrNBLtw" name="is_separated_from" isQuery="true">
          <eAnnotations xmi:id="_f3spf4MJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_f3spgIMJEeWhJIXHrNBLtw" key="computaion"/>
          </eAnnotations>
          <ownedParameter xmi:id="_f3spgYMJEeWhJIXHrNBLtw" name="IN_person" type="_f3spaoMJEeWhJIXHrNBLtw"/>
          <ownedParameter xmi:id="_f3spgoMJEeWhJIXHrNBLtw" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_f3spg4MJEeWhJIXHrNBLtw" name="is_person_assisting_spouse" isQuery="true" postcondition="_f3sphYMJEeWhJIXHrNBLtw">
          <eAnnotations xmi:id="_f3sphIMJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_f3sphYMJEeWhJIXHrNBLtw" name="is_assisting_spouse" constrainedElement="_f3spg4MJEeWhJIXHrNBLtw">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3sphoMJEeWhJIXHrNBLtw">
              <language>OCL</language>
              <body>self.is_assisting_spouse = IN_assisting_spouse&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_f3sph4MJEeWhJIXHrNBLtw" name="IN_assisting_spouse">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_f3spiIMJEeWhJIXHrNBLtw" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_f3spiYMJEeWhJIXHrNBLtw" name="is_person_affiliated_personnaly_to_social_security" isQuery="true" postcondition="_f3spi4MJEeWhJIXHrNBLtw">
          <eAnnotations xmi:id="_f3spioMJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_f3spi4MJEeWhJIXHrNBLtw" name="is_person_affiliated_personnaly_affiliated_to_social_security" constrainedElement="_f3spiYMJEeWhJIXHrNBLtw">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3spjIMJEeWhJIXHrNBLtw">
              <language>OCL</language>
              <body>self.is_affiliated_personnaly_to_social_security = IN_personnaly_affiliated&#xA;&#xA;&#xA;&#xA;&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_f3spjYMJEeWhJIXHrNBLtw" name="IN_personnaly_affiliated">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_f3spjoMJEeWhJIXHrNBLtw" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3spj4MJEeWhJIXHrNBLtw" name="Resident_Tax_Payer">
        <generalization xmi:id="_f3spkIMJEeWhJIXHrNBLtw" general="_f3spkYMJEeWhJIXHrNBLtw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3spkYMJEeWhJIXHrNBLtw" name="Tax_Payer">
        <ownedRule xmi:id="_f3spkoMJEeWhJIXHrNBLtw" name="NonResidentTaxPayer-constraint" constrainedElement="_f3spZoMJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3spk4MJEeWhJIXHrNBLtw">
            <language>OCL</language>
            <body>&#x9;self.addresses->exists( fiscal_add:Address | &#xA;&#x9;&#x9;fiscal_add.oclIsTypeOf(Fiscal_Address) and fiscal_add.country&lt;>Country::LU) and&#xA;&#x9;self.addresses->exists( hab_add:Address | &#xA;&#x9;&#x9;hab_add.oclIsTypeOf(Habitual_Address) and hab_add.country&lt;>Country::LU) and&#xA;&#x9;self.incomes->exists(inc:Income_Concepts::Income | inc.oclIsTypeOf(Income_Concepts::Local_Income))&#xA;implies&#xA;&#x9;self.oclIsTypeOf(Non_Resident_Tax_Payer)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_f3splIMJEeWhJIXHrNBLtw" name="ResidentTaxPayer-constraint" constrainedElement="_f3spj4MJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3splYMJEeWhJIXHrNBLtw">
            <language>OCL</language>
            <body>&#x9;self.addresses->exists( fiscal_add:Address | &#xA;&#x9;&#x9;fiscal_add.oclIsTypeOf(Fiscal_Address) and fiscal_add.country=Country::LU) or&#xA;&#x9;self.addresses->exists( hab_add:Address | &#xA;&#x9;&#x9;hab_add.oclIsTypeOf(Habitual_Address) and hab_add.country=Country::LU) &#xA;implies&#xA;&#x9;self.oclIsTypeOf(Resident_Tax_Payer)</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_f3sploMJEeWhJIXHrNBLtw" name="SubjectToIncomeTax-constraint" constrainedElement="_f3spkYMJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3spl4MJEeWhJIXHrNBLtw" name="subjectToIncomeTax ">
            <language>OCL</language>
            <body>&#x9;self.incomes->exists(inc:Income_Concepts::Income |&#xA;&#x9;&#x9; inc.oclIsTypeOf(Income_Concepts::Local_Income) or inc.oclIsTypeOf(Income_Concepts::Foreign_Income))&#xA;implies&#xA;&#x9;not self.incomeTax->isEmpty()&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_f3spmIMJEeWhJIXHrNBLtw" name="TaxCredit-CIS-constraint" constrainedElement="_f3spkYMJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3spmYMJEeWhJIXHrNBLtw">
            <language>OCL</language>
            <body>let   employement_income: Set(Income_Concepts::Income) = &#xA;      &#x9;self.incomes->select(inc|&#xA;      &#x9;&#x9;inc.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;not inc.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;   &#x9;   &#x9;&#x9;inc.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) and&#xA;       &#x9;&#x9;inc.start_date_within_taxation_year=self.incomeTax.tax_year),&#xA;       &#x9;total_income: Integer = employement_income.income_amount->sum(),&#xA;&#x9;&#x9;tax_liability :Integer = employement_income.tax_liability->sum() in&#xA;&#x9;&#x9;&#x9; &#x9;&#x9; &#xA;&#x9;&#x9;&#xA;&#x9;if(employement_income->size()>0) then&#xA;&#x9;&#x9; if (total_income>936*tax_liability) then&#xA;&#x9;&#x9; let set_of_CIS: Set(Income_Tax_Credit_Concepts::Income_Tax_Credit) = self.income_Tax_Credit->select(type|type.oclIsTypeOf(Income_Tax_Credit_Concepts::CIS) and type.tax_year=self.incomeTax.tax_year),&#xA;&#x9;&#x9;&#x9;size_set_of_CIS :Integer = set_of_CIS->size(),&#xA;&#x9;&#x9;&#x9; a_CIS: Income_Tax_Credit_Concepts::Income_Tax_Credit = set_of_CIS->any(true) in&#xA;&#x9; &#x9;    &#xA;&#x9; &#x9;    size_set_of_CIS = 1 and&#xA;&#x9;&#x9;&#x9;/**CIS IS CREDITED TO THE TAX PAYER**/&#xA;&#x9;&#x9;&#x9;a_CIS.yearly = Constants::FLAT_RATE_CIS_YEARLY.oclAsType(Integer)*tax_liability&#xA;      &#x9;else&#xA;      &#x9;&#x9;/**ERROR CIS CANNOT BE CREDITED**/&#xA;      &#x9;&#x9;false&#xA;      &#x9;endif&#x9;&#xA;     else&#xA;     &#x9;false&#xA;     endif&#xA;  &#xA;    </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_f3spmoMJEeWhJIXHrNBLtw" name="TaxCredit-CIP-constraint" constrainedElement="_f3spkYMJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3spm4MJEeWhJIXHrNBLtw">
            <language>OCL</language>
            <body>let   employement_income: Set(Income_Concepts::Income) = &#xA;      &#x9;self.incomes->select(inc|&#xA;      &#x9;&#x9;inc.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;not inc.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;   &#x9;   &#x9;&#x9;inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) and&#xA;       &#x9;&#x9;inc.start_date_within_taxation_year=self.incomeTax.tax_year),&#xA;       &#x9;total_income: Integer = employement_income.income_amount->sum(),&#xA;&#x9;&#x9;tax_liability :Integer = employement_income.tax_liability->sum() in&#xA;&#x9;&#x9;&#x9; &#x9;&#x9; &#xA;&#x9;if(employement_income->size()>0) then&#xA;&#x9;&#x9; if (total_income>936*tax_liability) then&#xA;&#x9;&#x9; let set_of_CIP: Set(Income_Tax_Credit_Concepts::Income_Tax_Credit) = self.income_Tax_Credit->select(type|type.oclIsTypeOf(Income_Tax_Credit_Concepts::CIP) and type.tax_year=self.incomeTax.tax_year),&#xA;&#x9;&#x9;&#x9;size_set_of_CIP :Integer = set_of_CIP->size(),&#xA;&#x9;&#x9;&#x9; a_CIP: Income_Tax_Credit_Concepts::Income_Tax_Credit = set_of_CIP->any(true) in&#xA;&#x9; &#x9;    &#xA;&#x9; &#x9;    size_set_of_CIP = 1 and&#xA;&#x9;&#x9;&#x9;/**CIP IS CREDITED TO THE TAX PAYER**/&#xA;&#x9;&#x9;&#x9;a_CIP.yearly = Constants::FLAT_RATE_CIP_YEARLY.oclAsType(Integer) *tax_liability&#xA;      &#x9;else&#xA;      &#x9;&#x9;/**ERROR CIP CANNOT BE CREDITED**/&#xA;      &#x9;&#x9;false&#xA;      &#x9;endif&#x9;&#xA;     else&#xA;     &#x9;false&#xA;     endif&#xA;      &#x9;&#xA;      &#x9;&#xA;    </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_f3spnIMJEeWhJIXHrNBLtw" name="TaxCredit-CIM-constraint" constrainedElement="_f3spkYMJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3spnYMJEeWhJIXHrNBLtw">
            <language>OCL</language>
            <body>let&#xA; a_CIM : Income_Tax_Credit_Concepts::CIM = self.income_Tax_Credit->select(c | c.oclIsTypeOf(Income_Tax_Credit_Concepts::CIM) and c.tax_year = self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Credit_Concepts::CIM),&#xA; current_employement_income: Set(Income_Concepts::Income) = self.incomes->select(inc|&#xA;      &#x9;&#x9;inc.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;(inc.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)) and&#xA;      &#x9;&#x9;inc.start_date_within_taxation_year=self.incomeTax.tax_year) ,&#xA;      &#x9;&#x9;&#xA;income_TaxClass1A: Set(Income_Concepts::Income) = &#xA;      &#x9;&#x9;current_employement_income->select(inc|&#xA;      &#x9;&#x9;      &#x9;&#x9;inc.oclAsType(Income_Concepts::Local_Income).tax_card->exists(tc|tc.tax_Class = Tax_Class_Category::One_A)),&#xA;tax_liability : Integer = income_TaxClass1A.tax_liability->sum()&#xA;      &#x9;&#x9;in&#xA;&#xA;       if (current_employement_income->size()>0) then&#xA;&#x9;&#x9;&#x9;if &#x9;(income_TaxClass1A->size()>0) then&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;let child_with_allowances : Set(Dependent) = self.dependents->select(dep:Dependent|dep.dependent_type=Dependent_Type::CHILD and dep.compute_if_dependent_receives_allowances_eligible_for_CIM()=true and&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;dep.allowances->exists(al|al.valid_from_date=self.incomeTax.tax_year and al.valid_until_date = self.incomeTax.tax_year)=true) in&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9; if  child_with_allowances ->size()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CIM ALLOWED**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;a_CIM.yearly= Constants::FLAT_RATE_CIM_YEARLY.oclAsType(Integer) * tax_liability&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9; else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CIM, MISSING CHILD ALLOWANCE**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9; endif&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CIM, NOT TAX CLASS 1A**/&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CIM, NOT ELIGIBLE INCOME*/&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#xA;&#xA;&#x9;&#xA;/**NAVIGATION&#xA;self.tax_class&#xA;self.income_Tax_Credit->&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;self.tax_class&#xA;self.incomeTax.tax_year&#xA;self.incomes&#xA;inc.oclAsType(Income_Concepts::Local_Income).tax_card&#xA;self.incomeTax.tax_year&#xA;self.dependents&#xA;dep.allowances&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;**/</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_f3spnoMJEeWhJIXHrNBLtw" name="Legal_Union-monogamus-constraint" constrainedElement="_f3spkYMJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3spn4MJEeWhJIXHrNBLtw">
            <language>OCL</language>
            <body>let legal_union: Set(Legal_Union_Record) = self.legal_union_A->select(couple|couple.end_date->isEmpty()) in&#xA;if (legal_union->size()=1) then&#x9;&#xA;&#x9;/**YOU ARE IN LIGEL UNION WITH ONLY ONE PERSON**/&#xA;&#x9;true&#xA;else&#xA;&#x9;/**ERROR YOU CANNOT BE IN LEGAL UNION WITH MORE THAN ONE PERSON**/&#xA;&#x9;false&#xA;endif&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_f3spoIMJEeWhJIXHrNBLtw" name="TaxClass-unique-constraint" constrainedElement="_f3spkYMJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3spoYMJEeWhJIXHrNBLtw">
            <language>OCL</language>
            <body>let tax_classes: Set(Tax_Class) = self.tax_class->select(tax_classe|tax_class.valid_until_date->isEmpty()) in&#xA;if tax_classes->size()=1 then&#x9;&#xA;&#x9;/**ONLY ONE TAX CLASS AT TIME**/&#xA;&#x9;true&#xA;else&#xA;&#x9;/**ERROR YOU CANNOT HAVE SEVERAL TAX CLASSES AT TIME**/&#xA;&#x9;false&#xA;endif</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_f3spooMJEeWhJIXHrNBLtw" name="TaxDeduction-CE-constraint" constrainedElement="_f3spkYMJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3spo4MJEeWhJIXHrNBLtw">
            <language>OCL</language>
            <body>let set_of_CE: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::CE) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year),&#xA;&#x9; CE_invalidity:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::INALIDITY_AND_INFIRMITY),&#xA;&#x9; CE_dependence:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD),&#xA;&#x9; CE_child_not_part_of_household:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::CARE_FOR_CHILDREN_NOT_BEING_PART_OF_HOUSEHOLD),&#xA;&#x9; income_subject_to_witholding_tax : Set(Income_Concepts::Income) = self.incomes->select(income|income.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not income.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.start_date_within_taxation_year = self.incomeTax.tax_year),&#xA; &#x9; extraordinary_expenses : &#x9;Set(Expense_Concepts::Expense) = self.expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclIsTypeOf(Expense_Concepts::Extraordinary_Expense_CE)),&#x9;&#xA; &#x9; extraordinary_expense_invalidity_and_infirmity  : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::INALIDITY_AND_INFIRMITY),&#xA; &#x9; extraordinary_expense_dependence_and_care : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD), &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA; &#x9; extraordinary_expense_care_for_children_not_part_of_the_household : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::CARE_FOR_CHILDREN_NOT_BEING_PART_OF_HOUSEHOLD),  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#xA;&#x9; declared_expense:Integer=extraordinary_expenses.declared_amount->sum() in&#xA;&#x9; &#xA;&#x9;if (income_subject_to_witholding_tax->size()>0) then&#xA;&#x9;&#x9;if (extraordinary_expenses->any(true).oclAsType(Expense_Concepts::Extraordinary_Expense_CE).is_above_thresholded_deduction_percentage_for_CE()=true) then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if extraordinary_expense_invalidity_and_infirmity->size()>0 then &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if self.oclIsTypeOf(Resident_Tax_Payer) then&#xA;&#x9;&#x9;&#x9;&#x9;/**CE FOR INVALIDITY AND INFIRMITY ON THE TAX CARD**/&#xA;&#x9;&#x9;&#x9;&#x9;CE_invalidity->size() = 1&#x9;and&#xA;&#x9;&#x9;&#x9;&#x9;CE_invalidity->any(true).deductible_amount = CE_invalidity->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).disability_flat_rate&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if  extraordinary_expense_dependence_and_care ->size()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->size()=1 and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;let &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expenses_for_dependence_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::DEPENDENCE_CARE) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; expenses_for_house_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|expense.expense_purpose=Expense_Purpose::HOUSE_CARE) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; expenses_for_child_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::CHILD_CARE),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;amount_house_care: Integer = expenses_for_house_care.declared_amount->sum(),&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sum_of_expenses:Integer =  expenses_for_child_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.compute_if_dependent_receives_allowances_eligible_for_CE_dependance_and_care() =true and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.dependent_type=Dependent_Type::CHILD and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(expense.dependent.oclAsType(Physical_Person).age&lt;14) or&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.oclAsType(Physical_Person).disability_percentage>0).declared_amount->sum() in&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(expenses_for_child_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CHILD CARE, CHILDREN BEING PART OF THE HOUSHOLD**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(amount_house_care + sum_of_expenses)>Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(expenses_for_dependence_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CLOSE RELATIVE DEPENDENCE CARE**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount = Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer)+ CE_dependence->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).dependent_relative_flat_rate&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;CE_dependence->any(true).deductible_amount = Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(expenses_for_dependence_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CLOSE RELATIVE DEPENDENCE CARE**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount= amount_house_care + sum_of_expenses + CE_dependence->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).dependent_relative_flat_rate&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount= amount_house_care + sum_of_expenses&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif &#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if  CE_child_not_part_of_household->size()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; CE_child_not_part_of_household->size()= 1 and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CARE FOR CHILDREN NOT BEING PART OF THE HOUSEHOLD**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;let&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expenses_for_child_not_part_of_houselod_care: Set(Expense_Concepts::Expense) = self.expenses->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::CHILD_CARE),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;sum_expenses_for_children:Integer = expenses_for_child_not_part_of_houselod_care->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.compute_if_dependent_receives_allowances_eligible_for_CE_dependance_and_care() =false and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;((expense.dependent.age&lt;=21) or&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(expense.dependent.age>21 and expense.dependent.continued_studies=true and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.tax_Payer.incomes.income_amount->sum()&lt;0.6*Constants::MINIMUM_SALARY.oclAsType(Integer)))).declared_amount->sum() in&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(sum_expenses_for_children>Constants::MAXIMUM_CE_RATE_FOR_CHILD_NOT_BEING_PART_OF_HOUSEHOLD.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;CE_child_not_part_of_household->any(true).deductible_amount  = Constants::MAXIMUM_CE_RATE_FOR_CHILD_NOT_BEING_PART_OF_HOUSEHOLD.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_child_not_part_of_household->any(true).deductible_amount = sum_expenses_for_children&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;/*use it to fill the tax card, temporary until decision on how to model the tax card with respect to the tax payer&#xA;&#x9;&#x9;&#x9;CE_invalidity->any(true).deductible_amount +&#xA;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount + &#xA;&#x9;&#x9;&#x9;CE_child_not_part_of_household->any(true).deductible_amount */&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CE, NOT SUBJECT TO WITHOLDING**/&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#x9;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_f3sppIMJEeWhJIXHrNBLtw" name="TaxDeduction-AC-extra_professional-constraint" constrainedElement="_f3spkYMJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3sppYMJEeWhJIXHrNBLtw">
            <language>OCL</language>
            <body>let set_of_AC: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::AC) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year),&#xA;&#x9;ac: Income_Tax_Deduction_Concepts::AC = set_of_AC->any(true).oclAsType(Income_Tax_Deduction_Concepts::AC),&#xA;&#x9;spouse: Physical_Person = self.legal_union_A->select(couple|couple.end_date->isEmpty())->any(true).individual_B,&#xA;&#x9;taxpayer_income_eligible_type : Boolean = self.incomes->exists(inc|ac.is_eligible_income_for_AC(inc)),&#xA;&#x9;spouse_income_eligible_type : Boolean = spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->exists(inc|ac.is_eligible_income_for_AC(inc)),&#xA;&#x9;&#xA;&#x9;taxpayer_income_eligible_type_assisting_spouse : Boolean = self.incomes->exists(inc|ac.is_eligible_income_for_AC_assisting_spouse(inc)),&#xA;&#x9;spouse_income_eligible_type_assisting_spouse : Boolean = spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->exists(inc|ac.is_eligible_income_for_AC_assisting_spouse(inc)),&#xA;&#x9;&#xA;&#x9;taxpayer_personnaly_affiliated_to_social_security : Boolean = self.is_affiliated_personnaly_to_social_security,&#xA;&#x9;taxpayer_assisting_spouse: Boolean = self.is_assisting_spouse,&#xA;&#x9;&#xA;&#x9;spouse_personnaly_affiliated_to_social_security : Boolean = spouse.is_affiliated_personnaly_to_social_security,&#xA;&#x9;spouse_assisting_spouse: Boolean =  spouse.is_assisting_spouse&#xA;&#x9;in&#xA;&#x9; &#xA;&#x9; if taxpayer_income_eligible_type=true and spouse_income_eligible_type=true then&#xA;&#x9; &#x9;if taxpayer_personnaly_affiliated_to_social_security=true  and spouse_personnaly_affiliated_to_social_security = true then&#xA;&#x9; &#x9;&#x9;ac.deductible_amount= Constants::FLAT_RATE_FOR_EXTRA_PROFESSIONAL_DEDUCTION&#xA;&#x9; &#x9;else&#xA;&#x9; &#x9;&#x9;false&#xA;&#x9; &#x9;endif&#xA;&#x9; else&#xA;&#x9; &#x9;&#x9;if taxpayer_income_eligible_type=true xor spouse_income_eligible_type=true then&#x9; &#x9;&#x9;&#xA;&#x9; &#x9;&#x9;&#x9;if  self.incomes->exists(inc|inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) and inc.compute_duration_of_contract() &lt;=36) xor&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exists(inc|inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)  and inc.compute_duration_of_contract() &lt;=36) then&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;true&#x9; &#x9;&#x9;&#x9;&#x9;&#xA;&#x9; &#x9;&#x9;&#x9;else&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;ac.deductible_amount=0 &#xA;&#x9; &#x9;&#x9;&#x9;endif&#x9;&#xA;&#x9; &#x9;&#x9;&#x9;&#xA;&#x9; &#x9;&#x9;else&#xA;&#x9; &#x9;&#x9;&#x9; if taxpayer_income_eligible_type_assisting_spouse=true xor taxpayer_income_eligible_type_assisting_spouse=true then&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;if (taxpayer_personnaly_affiliated_to_social_security=true and spouse_personnaly_affiliated_to_social_security = false)  xor &#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;(taxpayer_personnaly_affiliated_to_social_security=false and spouse_personnaly_affiliated_to_social_security = true) then&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;else&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;ac.deductible_amount=0&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9; else&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;ac.deductible_amount =0 &#xA;&#x9;&#x9;&#x9; endif&#xA;&#x9; &#x9;endif&#xA;&#x9; endif&#xA;/**NAVIGATIONS&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;self.income_Tax_Deduction->&#xA;self.incomeTax.tax_year&#xA;self.legal_union_A->select&#xA;self.incomes->exists&#xA;spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->exists&#xA;self.incomes->exists(i&#xA;spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->&#xA;self.incomes->exists(&#xA;inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)&#xA;spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->&#xA;inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)**/</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_f3sppoMJEeWhJIXHrNBLtw" name="TaxDeduction-DS-1-permanent_expense" constrainedElement="_f3spkYMJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3spp4MJEeWhJIXHrNBLtw">
            <language>OCL</language>
            <body>let &#xA;permanent_expense: Set(Expense_Concepts::Expense) = self.expenses->select(expense|expense.oclIsTypeOf(Expense_Concepts::Permanent_Expense) and expense.year_expense_was_incurred_in=self.incomeTax.tax_year),&#xA;alimony: Set(Expense_Concepts::Expense) = permanent_expense->select(alimony|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;alimony.oclAsType(Expense_Concepts::Permanent_Expense).category = Expense_Concepts::Category_of_Permanent_Expense::ALIMONY and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;alimony.oclAsType(Expense_Concepts::Permanent_Expense).is_eligible_for_deduction = true),&#xA;debt: Set(Expense_Concepts::Expense) = permanent_expense->select(debt|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;debt.oclAsType(Expense_Concepts::Permanent_Expense).category = Expense_Concepts::Category_of_Permanent_Expense::MISCELLANEOUS_DEBT),&#xA;ds_alimony: Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense).permanent_expense_category =  Expense_Concepts::Category_of_Permanent_Expense::ALIMONY and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense),&#xA;tax_liability : Integer = self.incomes.tax_liability->sum(),&#xA;ds_debt: Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense).permanent_expense_category =  Expense_Concepts::Category_of_Permanent_Expense::MISCELLANEOUS_DEBT and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense)&#xA;&#x9;   in&#x9;&#xA;&#xA;if permanent_expense->size()>0 then&#xA;&#x9;if debt->size()>0 then&#xA;&#x9;&#x9;ds_debt.deductible_amount = debt.declared_amount->sum()/2 * tax_liability&#xA;&#x9;else&#xA;&#x9;&#x9;false&#xA;&#x9;endif and&#xA;&#x9;if alimony->size()>0 then&#xA;&#x9;&#x9;alimony->forAll(al|self.is_separated_from(al.dependent)=true)&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;let sum_alimony: Integer = alimony.declared_amount->sum() * tax_liability in&#xA;&#x9;&#x9;if sum_alimony&lt;=Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ALIMONY_EXPENSE.oclAsType(Integer) then&#xA;&#x9;&#x9;&#x9;ds_alimony.deductible_amount = sum_alimony&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;ds_alimony.deductible_amount = Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ALIMONY_EXPENSE.oclAsType(Integer) &#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif&#xA;&#xA;/**NAVIGATION&#xA;self.expenses->select&#xA;self.incomeTax.tax_year&#xA;self.income_Tax_Deduction->select&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;al.dependent**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_f3spqIMJEeWhJIXHrNBLtw" name="TaxDeduction-DS-2-interest_expense" constrainedElement="_f3spkYMJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3spqYMJEeWhJIXHrNBLtw">
            <language>OCL</language>
            <body>self.incomes->forAll(inc |&#xA;&#xA;if (inc.end_date_within_taxation_year = self.incomeTax.tax_year) then&#xA;&#xA;let &#xA;interest_expense: Set(Expense_Concepts::Expense) = inc.expenses->select(expense|expense.oclIsTypeOf(Expense_Concepts::Interest_Expense) and expense.year_expense_was_incurred_in=self.incomeTax.tax_year),&#xA;ds_interest_expense: Income_Tax_Deduction_Concepts::DS_for_Interest_Expense = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Interest_Expense) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.expenses->includesAll(interest_expense) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Interest_Expense),&#xA;dependent_children_with_allowances: Set(Dependent) = self.dependents->select(deps|deps.compute_if_dependent_receives_allowances_eligible_for_DS() =true),&#xA;tax_liability : Integer =inc.tax_liability in &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;if interest_expense->size()>0 then&#xA;&#x9;let sum_interest_expense: Integer = interest_expense.declared_amount->sum() in&#xA;&#x9;if sum_interest_expense&lt;=ds_interest_expense.maximum_deductible_amount then&#xA;&#x9;&#xA;&#x9;&#x9;ds_interest_expense.deductible_amount = sum_interest_expense * tax_liability&#xA;&#x9;else&#xA;&#x9;&#x9;ds_interest_expense.deductible_amount = ds_interest_expense.maximum_deductible_amount * tax_liability&#x9;&#x9;&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif&#xA;else&#xA;false&#xA;endif&#xA;)&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_f3spqoMJEeWhJIXHrNBLtw" name="TaxDeduction-DS-3-health_and_pension_insurance" constrainedElement="_f3spkYMJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3spq4MJEeWhJIXHrNBLtw">
            <language>OCL</language>
            <body>self.incomes->forAll( inc | &#xA;&#xA;let &#xA;mandatory_health_and_pension_insurance: Set(Expense_Concepts::Expense) = inc.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Health_and_Pension_Insurance).category =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::MANDATORY_HEALTH_AND_PENSION_INSURANCE&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Health_and_Pension_Insurance).is_related_to_additional_salary=true),&#xA;additional_pension_insurance: Set(Expense_Concepts::Expense) = inc.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Health_and_Pension_Insurance).category =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::ADDITIONAL_EMPLOYERS_PENSION_INSURANCE),&#xA;continued_health_and_pension_insurance: Set(Expense_Concepts::Expense) = inc.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Health_and_Pension_Insurance).category =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::CONTINUED_HEALTH_AND_PENSION_INSURANCE),&#xA;ds_mandatory_health_and_pension : Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance).insurance_category = &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::MANDATORY_HEALTH_AND_PENSION_INSURANCE and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year and type.expenses->includesAll(mandatory_health_and_pension_insurance)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance),&#xA;ds_additional_pension_insurance : Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance).insurance_category = &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::ADDITIONAL_EMPLOYERS_PENSION_INSURANCE and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and type.expenses->includesAll(additional_pension_insurance)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance),&#xA;ds_continued_health_and_pension_insurance : Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance).insurance_category = &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::CONTINUED_HEALTH_AND_PENSION_INSURANCE and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and type.expenses->includesAll(continued_health_and_pension_insurance)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance),&#xA;tax_liability : Integer = inc.tax_liability  in &#xA;&#xA;if mandatory_health_and_pension_insurance->size()>0 then&#xA;&#x9;if inc.oclIsTypeOf(Income_Concepts::Employment_Income) then&#xA;&#x9;let sum_mandatory_health_and_pension_insurance : Integer = mandatory_health_and_pension_insurance.declared_amount->sum() in&#xA;&#x9;&#x9;ds_mandatory_health_and_pension.deductible_amount = sum_mandatory_health_and_pension_insurance&#xA;&#x9;else&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif &#xA;and&#xA;if additional_pension_insurance->size()>0 then&#xA;&#x9;if inc.oclIsTypeOf(Income_Concepts::Employment_Income) then&#xA;&#x9;let sum_additional_pension_insurance : Integer = additional_pension_insurance.declared_amount->sum() in&#xA;&#x9;&#x9;if&#x9;sum_additional_pension_insurance &lt;= Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ADDITIONAL_PENSION_AND_INSURANCE.oclAsType(Integer) then&#xA;&#x9;&#x9;&#x9;ds_additional_pension_insurance.deductible_amount = sum_additional_pension_insurance&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;ds_additional_pension_insurance.deductible_amount = Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ADDITIONAL_PENSION_AND_INSURANCE.oclAsType(Integer)&#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif and&#xA;if continued_health_and_pension_insurance->size()>0 then&#xA;&#x9;let sum_continued_health_and_pension_insurance : Integer = continued_health_and_pension_insurance.declared_amount->sum() in&#xA;&#x9;&#x9;ds_continued_health_and_pension_insurance.deductible_amount = tax_liability * sum_continued_health_and_pension_insurance&#xA;else&#xA;&#x9;false&#xA;endif&#xA;)&#xA;&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_f3sprIMJEeWhJIXHrNBLtw" name="TaxDeduction-DS-4-private_insurance_and_plan" constrainedElement="_f3spkYMJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3sprYMJEeWhJIXHrNBLtw">
            <language>OCL</language>
            <body>let &#xA;insurance_and_plan: Set(Expense_Concepts::Expense) = self.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).category &lt;>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::OLD_AGE_PENSION_PLAN&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).category &lt;>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::PRIVATE_LIFE_INSURANCE&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).is_private_insurance_and_plan_eligible_for_deduction=true),&#xA;life_insurance: Set(Expense_Concepts::Expense) = self.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).category =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::PRIVATE_LIFE_INSURANCE&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).is_private_insurance_and_plan_eligible_for_deduction=true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).duration_of_contract >=10),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;old_age_pension_plan: Set(Expense_Concepts::Expense) = self.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).category =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::OLD_AGE_PENSION_PLAN&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).is_private_insurance_and_plan_eligible_for_deduction=true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).duration_of_contract >=10),&#xA;ds_private_insurance_and_plan: Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan).private_insurance_and_plan_category &lt;> &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::OLD_AGE_PENSION_PLAN and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan),&#xA;ds_old_age_pension_plan: Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan).private_insurance_and_plan_category = &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::OLD_AGE_PENSION_PLAN and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan),&#xA;tax_liability : Integer = self.incomes.tax_liability->sum() in&#xA;&#xA;if insurance_and_plan->size()>0 then&#xA;&#xA;let sum_insurance_and_plan : Integer = insurance_and_plan.declared_amount->sum() + life_insurance.declared_amount->sum() + &#xA;      &#x9;&#x9;&#x9;ds_private_insurance_and_plan.increase_for_life_insurance in&#xA;&#x9;&#x9;&#xA;if&#x9;sum_insurance_and_plan &lt;= ds_private_insurance_and_plan.maximum_deductible_amount_for_private_insurance then&#xA;&#x9;&#x9;&#x9;ds_private_insurance_and_plan.deductible_amount = sum_insurance_and_plan&#xA;&#x9;else&#xA;&#x9;&#x9;&#x9;ds_private_insurance_and_plan.deductible_amount = ds_private_insurance_and_plan.maximum_deductible_amount_for_private_insurance&#x9;&#x9;&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif&#xA;&#xA;and&#xA;&#xA;if old_age_pension_plan->size()>0 then&#xA;let sum_old_age_pension_plan : Integer = old_age_pension_plan.declared_amount->sum() in&#xA;&#x9;if&#x9;sum_old_age_pension_plan &lt;= ds_old_age_pension_plan.maximum_deductible_amount_for_old_age_pension_plan then&#xA;&#x9;&#x9;&#x9;ds_old_age_pension_plan.deductible_amount = sum_old_age_pension_plan&#xA;&#x9;else&#xA;&#x9;&#x9;&#x9;ds_old_age_pension_plan.deductible_amount = ds_old_age_pension_plan.maximum_deductible_amount_for_private_insurance&#x9;&#x9;&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif&#xA;&#xA;/**NAVIGATIONS&#xA;self.expenses->&#xA;self.incomeTax.tax_year&#xA;self.expenses->&#xA;self.incomeTax.tax_year->&#xA;self.expenses->&#xA;self.incomeTax.tax_year&#xA;self.income_Tax_Deduction->select&#xA;self.incomeTax.tax_year&#xA;**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_f3sproMJEeWhJIXHrNBLtw" name="TaxDeduction-DS-5-donation" constrainedElement="_f3spkYMJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3spr4MJEeWhJIXHrNBLtw">
            <language>OCL</language>
            <body>let &#xA;donations: Set(Expense_Concepts::Expense) = self.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Donation)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;or expense.oclAsType(Expense_Concepts::Donation).is_donation_reported = true)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Donation).is_beneficiary_eligible=true),&#xA;ds_donation: Income_Tax_Deduction_Concepts::DS_for_Donation = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Donation) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Donation) in &#x9;&#x9;&#x9;&#x9;&#x9;&#xA;if donations->size()>0 then&#xA;&#x9;let sum_donation: Integer = donations.declared_amount->sum() in&#xA;&#x9;if sum_donation >= Constants::MINIMUM_DEDUCTIBLE_AMOUNT_FOR_DONATIONS.oclAsType(Integer) then&#xA;&#x9;&#x9;if sum_donation &lt;= ds_donation.maximum_deductible_amount then&#xA;&#x9;&#x9;ds_donation.deductible_amount = sum_donation&#xA;&#x9;else&#xA;&#x9;&#x9;ds_donation.deductible_amount = ds_donation.maximum_deductible_amount&#xA;&#x9;endif&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif&#xA;&#xA; </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_f3spsIMJEeWhJIXHrNBLtw" name="TaxDeduction-DS-6-loss_carryforward" constrainedElement="_f3spkYMJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3spsYMJEeWhJIXHrNBLtw">
            <language>OCL</language>
            <body>self.incomes->forAll( inc | &#xA;&#xA;                            if (&#xA;                            &#x9;&#x9;(inc.income_type.oclIsTypeOf(Income_Concepts::Agriculture_and_Forestry_Income) or&#xA;                            &#x9;&#x9;inc.income_type.oclIsTypeOf(Income_Concepts::Independent_Professional_Services_Income) or&#xA;                                inc.income_type.oclIsTypeOf(Income_Concepts::Trade_and_Business_Income))&#xA;                               and (inc.end_date_within_taxation_year = self.incomeTax.tax_year)) then /**PUT &lt;, when deciding how to model Date or how to use &quot;&lt;&quot; with the Marte Profile **/&#xA;                               let&#xA;                                 &#x9;losses: Set(Expense_Concepts::Expense) = inc.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Loss_Carryforward) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).regular_accountability = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).compensation_by_other_means=false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).tax_payer_has_been_partner_in_business = false),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;losses_successor: Set(Expense_Concepts::Expense) = inc.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Loss_Carryforward) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).regular_accountability = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).compensation_by_other_means=false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).tax_payer_has_been_partner_in_business = true &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).tax_payer_has_inherited_business_ownership = true),&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ds_loss: Income_Tax_Deduction_Concepts::DS_for_Loss_Carryforward = losses.deduction->select(type| &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Loss_Carryforward) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Loss_Carryforward) in &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(inc.end_date_within_taxation_year = 1990) then /**PUT &lt;, when deciding how to model Date or how to use &quot;&lt;&quot; with the Marte Profile **/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;if losses.declared_amount->sum()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ds_loss.deductible_amount =  losses.declared_amount->sum()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if losses_successor.declared_amount->sum() >0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ds_loss.deductible_amount = losses_successor.declared_amount->sum() &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ds_loss.deductible_amount = 0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; else &#xA;                                &#x9;&#x9; false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif)&#xA;&#xA;/**NAVIGATIONS:&#xA;self.incomes->&#xA;inc.expenses->&#xA;inc.expenses->&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;losses.deduction->&#xA;inc.income_type&#xA;inc.income_type&#xA;inc.income_type&#xA;**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_f3spsoMJEeWhJIXHrNBLtw" name="TaxCard-unique-constraint" constrainedElement="_f3spkYMJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3sps4MJEeWhJIXHrNBLtw">
            <language>OCL</language>
            <body>self.incomes->forAll(income|income.tax_card->select(tc|tc.validity=true)->size() &lt;= 1)&#xA;/**THE INCOME CAN HAVE AT MOST ONE VALID TAX CARD, IF THE CONTRACT HAS ENDED THAN IT IS ZERO VALID**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_f3sptIMJEeWhJIXHrNBLtw" name="TaxDeduction-FD-constraint" constrainedElement="_f3spkYMJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3sptYMJEeWhJIXHrNBLtw">
            <language>OCL</language>
            <body>self.incomes->forAll(income|&#xA;&#xA;&#x9;let &#xA;&#x9;&#x9;fd_expenses : Set(Expense_Concepts::Expense)= self.expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Travel_Expense_FD) and&#xA;&#x9;&#x9;&#x9;exp.year_expense_was_incurred_in=self.incomeTax.tax_year),&#xA;&#x9;&#x9;declared_amount : Integer = fd_expenses.declared_amount->sum(),&#xA;&#x9;&#x9;a_FD:Income_Tax_Deduction_Concepts::FD= self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::FD) and type.tax_year=self.incomeTax.tax_year and&#xA;&#x9;&#x9;&#x9;type.expenses->includesAll(fd_expenses))->any(true).oclAsType(Income_Tax_Deduction_Concepts::FD) in&#xA;&#xA;if ((income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) or&#xA;income.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or&#xA;income.income_type.oclIsTypeOf(Income_Concepts::Rentals_and_Leases_Income)) and&#xA;income.start_date_within_taxation_year = self.incomeTax.tax_year) then&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#xA;&#x9;&#x9;if  (a_FD.calculated_distance>a_FD.distance_declared_in_january) then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if  (a_FD.calculated_distance>Constants::MINIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;if (a_FD.calculated_distance>Constants::MAXIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/**MAXIMAL FLAT DISTANCE FOR TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;a_FD.deductible_amount = Constants::FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT.oclAsType(Integer) * Constants::MAXIMAL_FLAT_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/**REAL DISTANCE FOR TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;a_FD.deductible_amount = Constants::FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT.oclAsType(Integer) * a_FD.calculated_distance&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;/**NO TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;a_FD.deductible_amount = 0&#xA;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/*NO CHANGES FOR FD, TRAVEL EXPENSE IS ALREADY DEDUCED FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;endif&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;a_FD.yearly=  a_FD.deductible_amount and&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;a_FD.monthly = a_FD.deductible_amount/12 and&#xA;&#x9;&#x9;a_FD.daily = a_FD.monthly/24&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE FD FOR TRAVEL EXPENSE, THERE IS NO INCOME TYPE ELIGIBLE FOR FD**/&#xA;&#x9;&#x9;a_FD.deductible_amount = 0&#xA;&#x9;endif&#xA;)&#xA;&#xA;&#xA;/** NAVIGATIONS&#xA;self.incomes&#xA;self.expenses&#xA;self.incomeTax&#xA;self.income_Tax_Deduction&#xA;type.expenses&#xA;income.income_type&#xA;income.income_type&#xA;income.income_type&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_f3sptoMJEeWhJIXHrNBLtw" name="TaxDeduction-FO-constraint" constrainedElement="_f3spkYMJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3spt4MJEeWhJIXHrNBLtw">
            <language>OCL</language>
            <body>self.incomes->forAll(income| &#xA;let &#xA;&#x9; fo_expenses : Set(Expense_Concepts::Expense) = income.expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Miscellaneous_Expense_FO) and exp.year_expense_was_incurred_in = self.incomeTax.tax_year),&#xA;&#x9; declared_expense:Integer=fo_expenses.declared_amount->sum(),&#xA;&#x9; set_of_FO: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|type.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO) &#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and type.tax_year=self.incomeTax.tax_year&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and type.expenses->includesAll(fo_expenses)),&#xA;&#x9; size_set_of_FO:Integer = set_of_FO->size(),&#xA;&#x9; a_FO:Income_Tax_Deduction_Concepts::FO=set_of_FO->any(true).oclAsType(Income_Tax_Deduction_Concepts::FO),&#xA;&#x9; income_type_for_taxpayer_authorized_for_FO : Boolean = ((income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) or&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.income_type.oclIsTypeOf(Income_Concepts::Rentals_and_Leases_Income)) and&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.start_date_within_taxation_year = self.incomeTax.tax_year)&#x9; in&#xA;if size_set_of_FO>1 then&#xA;&#x9;/**TAX PAYER CANNOT RECEIVE MORE THAN ONE FO PER INCOME AND EXPENSES ATTACHED TO THE INCOME**/&#xA;&#x9;false&#xA;else&#xA;&#x9;if income_type_for_taxpayer_authorized_for_FO = true then&#xA;&#x9;&#x9;if(not self.taxed_jointly) then &#xA;&#x9;&#x9;&#x9;if(declared_expense> Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;a_FO.rate_type_for_FO = Type_of_Rate::REAL_COST&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;a_FO.rate_type_for_FO = Type_of_Rate::REGULAR&#xA;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/**FLAT RATE OR REAL COSTS DEFINED BY JOINT TAXATION**/&#xA;&#x9;&#x9;&#x9;/*do we want to care about this, or up to the agent to decide*/&#xA;&#x9;&#x9;&#x9;let spouse_FO: Income_Tax_Deduction_Concepts::FO =  self.legal_union_A.individual_B.oclAsType(Tax_Payer).income_Tax_Deduction->&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select(type|type.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO))->any(true).oclAsType(Income_Tax_Deduction_Concepts::FO),&#xA;&#x9;&#x9;&#x9;&#x9; spouse_declared_expense:Integer=self.legal_union_A.individual_B.oclAsType(Tax_Payer).expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Miscellaneous_Expense_FO))->any(true).declared_amount in&#xA;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;(a_FO.rate_type_for_FO = Type_of_Rate::REAL_COST and declared_expense> Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer) and spouse_FO.rate_type_for_FO = Type_of_Rate::REGULAR) xor&#xA;&#x9;&#x9;&#x9;(a_FO.rate_type_for_FO = Type_of_Rate::REGULAR and spouse_FO.rate_type_for_FO = Type_of_Rate::REAL_COST and  spouse_declared_expense>Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)) &#xA;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if (a_FO.rate_type_for_FO = Type_of_Rate::REGULAR) then&#xA;&#x9;&#x9;&#x9;/*FLAT RATE FOR FO EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;a_FO.oclAsType(Income_Tax_Deduction_Concepts::Income_Tax_Deduction).deductible_amount = Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)+Constants::DISABILITY_FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/**REAL COST FOR FO EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;a_FO.deductible_amount = declared_expense+Constants::DISABILITY_FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)&#xA;&#xA;&#x9;&#x9;endif&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;a_FO.yearly=  a_FO.deductible_amount and&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;a_FO.monthly = a_FO.deductible_amount/12 and&#xA;&#x9;&#x9;a_FO.daily = a_FO.monthly/24&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE FO, THERE IS NO INCOME TYPE ELIGIBLE FOR FO**/&#xA;&#x9;&#x9;a_FO.deductible_amount = 0&#xA;&#x9;endif&#xA;endif&#xA;)&#xA;&#xA;/**NAVIGATION &#xA;&#xA;self.income_Tax_Deduction->select(type|type.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO) and type.tax_year=self.incomeTax.tax_year),&#xA;self.incomeTax.tax_year&#xA;self.incomes->select(income&#xA;income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)&#xA;income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)&#xA;income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)&#xA;self.expenses->select(exp&#xA;self.legal_union_A.individual_B.oclAsType(Tax_Payer).income_Tax_Deduction->&#xA;self.legal_union_A.individual_B.oclAsType(Tax_Payer).expenses->selec&#xA;a_FO.oclAsType(Income_Tax_Deduction_Concepts::Income_Tax_Deduction).tax_year&#xA;&#xA;&#xA;**/</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_f3spuIMJEeWhJIXHrNBLtw" name="NEW_TaxDeduction-CE-INVALIDITY" constrainedElement="_f3spkYMJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3spuYMJEeWhJIXHrNBLtw">
            <language>OCL</language>
            <body>let set_of_CE: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::CE) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year),&#xA;&#x9; CE_invalidity:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::INALIDITY_AND_INFIRMITY),&#xA;&#x9;income_subject_to_witholding_tax : Set(Income_Concepts::Income) = self.incomes->select(income|income.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not income.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.start_date_within_taxation_year = self.incomeTax.tax_year),&#xA; &#x9; extraordinary_expenses : &#x9;Set(Expense_Concepts::Expense) = self.expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclIsTypeOf(Expense_Concepts::Extraordinary_Expense_CE)),&#x9;&#xA; &#x9; extraordinary_expense_invalidity_and_infirmity  : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::INALIDITY_AND_INFIRMITY),&#x9;&#xA;&#x9; declared_expense:Integer=extraordinary_expense_invalidity_and_infirmity.declared_amount->sum() in&#xA;&#x9;if (income_subject_to_witholding_tax->size()>0) then&#xA;&#x9;&#x9;if (extraordinary_expenses->any(true).oclAsType(Expense_Concepts::Extraordinary_Expense_CE).is_above_thresholded_deduction_percentage_for_CE()=true) then&#xA;&#x9;&#x9;&#x9;if extraordinary_expense_invalidity_and_infirmity->size()>0 then &#xA;&#x9;&#x9;&#x9;&#x9;if self.oclIsTypeOf(Resident_Tax_Payer) then&#xA;&#x9;&#x9;&#x9;&#x9;/**CE FOR INVALIDITY AND INFIRMITY ON THE TAX CARD**/&#xA;&#x9;&#x9;&#x9;&#x9;CE_invalidity->size() = 1&#x9;and&#xA;&#x9;&#x9;&#x9;&#x9;CE_invalidity->any(true).deductible_amount = CE_invalidity->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).disability_flat_rate&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;endif&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;false&#xA;&#x9;&#x9;endif&#x9;&#xA;else&#xA;false&#xA;endif&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_f3spuoMJEeWhJIXHrNBLtw" name="NEW_TaxDeduction-CE-DEPENDENCE-AND-CARE" constrainedElement="_f3spkYMJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3spu4MJEeWhJIXHrNBLtw">
            <language>OCL</language>
            <body>let set_of_CE: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::CE) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year),&#xA;&#x9; CE_dependence:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD),&#xA;&#x9; income_subject_to_witholding_tax : Set(Income_Concepts::Income) = self.incomes->select(income|income.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not income.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.start_date_within_taxation_year = self.incomeTax.tax_year),&#xA; &#x9; extraordinary_expenses : &#x9;Set(Expense_Concepts::Expense) = self.expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclIsTypeOf(Expense_Concepts::Extraordinary_Expense_CE)),&#x9;&#xA; &#x9; extraordinary_expense_dependence_and_care : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD), &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9; declared_expense:Integer=extraordinary_expense_dependence_and_care.declared_amount->sum() in&#xA;&#x9; &#xA;&#x9;if (income_subject_to_witholding_tax->size()>0) then&#xA;&#x9;&#x9;if (extraordinary_expenses->any(true).oclAsType(Expense_Concepts::Extraordinary_Expense_CE).is_above_thresholded_deduction_percentage_for_CE()=true) then&#xA;&#x9;&#x9;&#x9;&#x9;if  extraordinary_expense_dependence_and_care ->size()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->size()=1 and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;let &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expenses_for_dependence_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::DEPENDENCE_CARE) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; expenses_for_house_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|expense.expense_purpose=Expense_Purpose::HOUSE_CARE) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; expenses_for_child_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::CHILD_CARE),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;amount_house_care: Integer = expenses_for_house_care.declared_amount->sum(),&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sum_of_expenses:Integer =  expenses_for_child_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.compute_if_dependent_receives_allowances_eligible_for_CE_dependance_and_care() =true and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.dependent_type=Dependent_Type::CHILD and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(expense.dependent.oclAsType(Physical_Person).age&lt;14) or&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.oclAsType(Physical_Person).disability_percentage>0).declared_amount->sum() in&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(expenses_for_child_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CHILD CARE, CHILDREN BEING PART OF THE HOUSHOLD**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(amount_house_care + sum_of_expenses)>Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(expenses_for_dependence_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CLOSE RELATIVE DEPENDENCE CARE**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount = Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer)+ CE_dependence->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).dependent_relative_flat_rate&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;CE_dependence->any(true).deductible_amount = Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(expenses_for_dependence_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CLOSE RELATIVE DEPENDENCE CARE**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount= amount_house_care + sum_of_expenses + CE_dependence->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).dependent_relative_flat_rate&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount= amount_house_care + sum_of_expenses&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   endif &#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;endif&#x9;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CE, NOT SUBJECT TO WITHOLDING**/&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#x9;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_f3spvIMJEeWhJIXHrNBLtw" name="NEW_TaxDeduction-CE-DEPENDENCE-AND-CARE-CHILDREN-NOT-PART-OF-HOUSEHOLD" constrainedElement="_f3spkYMJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3spvYMJEeWhJIXHrNBLtw">
            <language>OCL</language>
            <body>let set_of_CE: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::CE) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year),&#xA;&#x9; CE_child_not_part_of_household:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::CARE_FOR_CHILDREN_NOT_BEING_PART_OF_HOUSEHOLD),&#xA;&#x9; income_subject_to_witholding_tax : Set(Income_Concepts::Income) = self.incomes->select(income|income.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not income.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.start_date_within_taxation_year = self.incomeTax.tax_year),&#xA; &#x9; extraordinary_expenses : &#x9;Set(Expense_Concepts::Expense) = self.expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclIsTypeOf(Expense_Concepts::Extraordinary_Expense_CE)),&#x9;&#xA; &#x9; extraordinary_expense_care_for_children_not_part_of_the_household : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::CARE_FOR_CHILDREN_NOT_BEING_PART_OF_HOUSEHOLD),  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#xA;&#x9; declared_expense:Integer=extraordinary_expense_care_for_children_not_part_of_the_household.declared_amount->sum() in&#xA;&#x9; &#x9; &#xA;&#x9;if (income_subject_to_witholding_tax->size()>0) then&#xA;&#x9;&#x9;if (extraordinary_expenses->any(true).oclAsType(Expense_Concepts::Extraordinary_Expense_CE).is_above_thresholded_deduction_percentage_for_CE()=true) then&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;     if  CE_child_not_part_of_household->size()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; CE_child_not_part_of_household->size()= 1 and&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CARE FOR CHILDREN NOT BEING PART OF THE HOUSEHOLD**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;let&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expenses_for_child_not_part_of_houselod_care: Set(Expense_Concepts::Expense) = self.expenses->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::CHILD_CARE),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;sum_expenses_for_children:Integer = expenses_for_child_not_part_of_houselod_care->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.compute_if_dependent_receives_allowances_eligible_for_CE_dependance_and_care() =false and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;((expense.dependent.age&lt;=21) or&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(expense.dependent.age>21 and expense.dependent.continued_studies=true and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.tax_Payer.incomes.income_amount->sum()&lt;0.6*Constants::MINIMUM_SALARY.oclAsType(Integer)))).declared_amount->sum() in&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(sum_expenses_for_children>Constants::MAXIMUM_CE_RATE_FOR_CHILD_NOT_BEING_PART_OF_HOUSEHOLD.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;CE_child_not_part_of_household->any(true).deductible_amount  = Constants::MAXIMUM_CE_RATE_FOR_CHILD_NOT_BEING_PART_OF_HOUSEHOLD.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_child_not_part_of_household->any(true).deductible_amount = sum_expenses_for_children&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CE, NOT SUBJECT TO WITHOLDING**/&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#x9;</body>
          </specification>
        </ownedRule>
        <generalization xmi:id="_f3spvoMJEeWhJIXHrNBLtw" general="_f3spaoMJEeWhJIXHrNBLtw"/>
        <ownedAttribute xmi:id="_f3spv4MJEeWhJIXHrNBLtw" name="incomes" visibility="private" type="_f3sqJ4MJEeWhJIXHrNBLtw" association="_f3sqy4MJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3spwIMJEeWhJIXHrNBLtw" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3spwYMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3spwoMJEeWhJIXHrNBLtw" name="incomeTax" visibility="private" type="_f3spFoMJEeWhJIXHrNBLtw" association="_f3sp9IMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3spw4MJEeWhJIXHrNBLtw" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3spxIMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3spxYMJEeWhJIXHrNBLtw" name="income_Tax_Credit" visibility="private" type="_f3tO94MJEeWhJIXHrNBLtw" association="_f3sq04MJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3spxoMJEeWhJIXHrNBLtw" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3spx4MJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3spyIMJEeWhJIXHrNBLtw" name="tax_class" visibility="private" type="_f3sp9YMJEeWhJIXHrNBLtw" association="_f3spFYMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3spyYMJEeWhJIXHrNBLtw" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3spyoMJEeWhJIXHrNBLtw" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3spy4MJEeWhJIXHrNBLtw" name="household" visibility="private" type="_f3spUYMJEeWhJIXHrNBLtw" association="_f3sp74MJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3spzIMJEeWhJIXHrNBLtw" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3spzYMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3spzoMJEeWhJIXHrNBLtw" name="dependents" visibility="private" type="_f3spJYMJEeWhJIXHrNBLtw" association="_f3sp8YMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3spz4MJEeWhJIXHrNBLtw" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3sp0IMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3sp0YMJEeWhJIXHrNBLtw" name="income_Tax_Deduction" visibility="private" type="_f3tPbYMJEeWhJIXHrNBLtw" association="_f3sq94MJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3sp0oMJEeWhJIXHrNBLtw" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3sp04MJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3sp1IMJEeWhJIXHrNBLtw" name="taxed_jointly" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3sp1YMJEeWhJIXHrNBLtw" name="expenses" visibility="private" type="_f3sqs4MJEeWhJIXHrNBLtw" association="_f3sq-IMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3sp1oMJEeWhJIXHrNBLtw" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3sp14MJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3sp2IMJEeWhJIXHrNBLtw" name="dependent" visibility="private" type="_f3spJYMJEeWhJIXHrNBLtw" association="_f3sp8IMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3sp2YMJEeWhJIXHrNBLtw" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3sp2oMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3sp24MJEeWhJIXHrNBLtw" name="tax_Card" visibility="private" type="_f3srNYMJEeWhJIXHrNBLtw" aggregation="shared" association="_f3sp6oMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3sp3IMJEeWhJIXHrNBLtw" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3sp3YMJEeWhJIXHrNBLtw" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3sp3oMJEeWhJIXHrNBLtw" name="taxation_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_f3ywTYMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_f3sp34MJEeWhJIXHrNBLtw" name="is_dependent_part_of_the_household" isQuery="true" bodyCondition="_f3sp4YMJEeWhJIXHrNBLtw">
          <eAnnotations xmi:id="_f3sp4IMJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_f3sp4YMJEeWhJIXHrNBLtw" name="is_child_part_of_household" constrainedElement="_f3sp34MJEeWhJIXHrNBLtw">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3sp4oMJEeWhJIXHrNBLtw">
              <language>OCL</language>
              <body>let responsible_person: Tax_Payer = IN_dependent.responsible_person,&#xA;     household_tax_payer_same_as_respnsible: Boolean = IN_dependent.household.tax_Payer.oclAsType(Physical_Person).SSNo = responsible_person.oclAsType(Physical_Person).SSNo&#xA;in&#xA;if (responsible_person->notEmpty() and household_tax_payer_same_as_respnsible) then&#xA;&#x9;/**THE CHILD IS PART OF THE TAX PAYERS HOUSEHOLD**/&#xA;&#x9;result = true&#xA;else &#xA;&#x9;/**THE CHILD IS NOT PART OF THE TAX PAYERS HOUSEHOLD**/&#xA;&#x9;result = false&#xA;endif&#xA;&#xA;&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_f3sp44MJEeWhJIXHrNBLtw" name="IN_dependent" type="_f3spJYMJEeWhJIXHrNBLtw"/>
          <ownedParameter xmi:id="_f3sp5IMJEeWhJIXHrNBLtw" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_f3sp5YMJEeWhJIXHrNBLtw" name="number_of_months_of_allowance" isQuery="true" postcondition="_f3sp54MJEeWhJIXHrNBLtw">
          <eAnnotations xmi:id="_f3sp5oMJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_f3sp54MJEeWhJIXHrNBLtw" name="number_od_months_of_allowance" constrainedElement="_f3sp5YMJEeWhJIXHrNBLtw">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3sp6IMJEeWhJIXHrNBLtw">
              <language>OCL</language>
              <body>result = 1&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_f3sp6YMJEeWhJIXHrNBLtw" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_f3sp6oMJEeWhJIXHrNBLtw" name="" memberEnd="_f3sp24MJEeWhJIXHrNBLtw _f3tO3oMJEeWhJIXHrNBLtw"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_f3sp64MJEeWhJIXHrNBLtw" name="located at" memberEnd="_f3spcYMJEeWhJIXHrNBLtw _f3spHYMJEeWhJIXHrNBLtw"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_f3sp7IMJEeWhJIXHrNBLtw" name="receives" memberEnd="_f3spboMJEeWhJIXHrNBLtw _f3spSIMJEeWhJIXHrNBLtw"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_f3sp7YMJEeWhJIXHrNBLtw" name="person B" memberEnd="_f3spYYMJEeWhJIXHrNBLtw _f3spd4MJEeWhJIXHrNBLtw"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_f3sp7oMJEeWhJIXHrNBLtw" name="person A" memberEnd="_f3spXoMJEeWhJIXHrNBLtw _f3spdIMJEeWhJIXHrNBLtw"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_f3sp74MJEeWhJIXHrNBLtw" name="maintains" memberEnd="_f3spy4MJEeWhJIXHrNBLtw _f3spUoMJEeWhJIXHrNBLtw"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_f3sp8IMJEeWhJIXHrNBLtw" name="as tax payer" memberEnd="_f3spM4MJEeWhJIXHrNBLtw _f3sp2IMJEeWhJIXHrNBLtw"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_f3sp8YMJEeWhJIXHrNBLtw" name="supports" memberEnd="_f3spzoMJEeWhJIXHrNBLtw _f3spK4MJEeWhJIXHrNBLtw"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_f3sp8oMJEeWhJIXHrNBLtw" name="is part of" memberEnd="_f3spKIMJEeWhJIXHrNBLtw _f3spVYMJEeWhJIXHrNBLtw"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_f3sp84MJEeWhJIXHrNBLtw" name="incurred over" memberEnd="_f3squoMJEeWhJIXHrNBLtw _f3spMIMJEeWhJIXHrNBLtw"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_f3sp9IMJEeWhJIXHrNBLtw" name="is subject to" memberEnd="_f3spwoMJEeWhJIXHrNBLtw _f3spF4MJEeWhJIXHrNBLtw"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3sp9YMJEeWhJIXHrNBLtw" name="Tax_Class">
        <ownedAttribute xmi:id="_f3sp9oMJEeWhJIXHrNBLtw" name="tax_class" visibility="public" type="_f3sq5oMJEeWhJIXHrNBLtw"/>
        <ownedAttribute xmi:id="_f3sp94MJEeWhJIXHrNBLtw" name="tax_Payer" visibility="private" type="_f3spkYMJEeWhJIXHrNBLtw" association="_f3spFYMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3sp-IMJEeWhJIXHrNBLtw" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3sp-YMJEeWhJIXHrNBLtw" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3sp-oMJEeWhJIXHrNBLtw" name="valid_from_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_f3ywTYMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3sp-4MJEeWhJIXHrNBLtw" name="valid_until_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_f3ywTYMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3sp_IMJEeWhJIXHrNBLtw" name="tax_card" visibility="private" type="_f3srNYMJEeWhJIXHrNBLtw" association="_f3sq9oMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3sp_YMJEeWhJIXHrNBLtw" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3sp_oMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3sp_4MJEeWhJIXHrNBLtw" name="current_tax_class" visibility="private" type="_f3sp9YMJEeWhJIXHrNBLtw" association="_f3sqBYMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3sqAIMJEeWhJIXHrNBLtw" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3sqAYMJEeWhJIXHrNBLtw" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3sqAoMJEeWhJIXHrNBLtw" name="prev" visibility="private" type="_f3sp9YMJEeWhJIXHrNBLtw" association="_f3sqBYMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3sqA4MJEeWhJIXHrNBLtw" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3sqBIMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_f3sqBYMJEeWhJIXHrNBLtw" name="replaced by" memberEnd="_f3sp_4MJEeWhJIXHrNBLtw _f3sqAoMJEeWhJIXHrNBLtw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_f3sqBoMJEeWhJIXHrNBLtw" name="Income_Concepts">
      <ownedComment xmi:id="_f3sqB4MJEeWhJIXHrNBLtw" annotatedElement="_f3sqIYMJEeWhJIXHrNBLtw">
        <body>&lt;p> Art.91, alinea 1, numero 2&lt;/p></body>
      </ownedComment>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3sqCIMJEeWhJIXHrNBLtw" name="Income_Type">
        <ownedAttribute xmi:id="_f3sqCYMJEeWhJIXHrNBLtw" name="subjectToWithholdingTax" visibility="private">
          <ownedComment xmi:id="_f3sqCoMJEeWhJIXHrNBLtw" annotatedElement="_f3sqCYMJEeWhJIXHrNBLtw">
            <body>&lt;p>The&amp;nbsp;following&amp;nbsp;types&amp;nbsp;of&amp;nbsp;income&amp;nbsp;are&amp;nbsp;subject&amp;nbsp;to&amp;nbsp;withholding&amp;nbsp;tax:&lt;/p>&lt;p>Employment&lt;/p>&lt;p>Pensions&amp;nbsp;and&amp;nbsp;Annuities&lt;/p>&lt;p>Investments&amp;nbsp;(not&amp;nbsp;all&amp;nbsp;types&amp;nbsp;might&amp;nbsp;be&amp;nbsp;subject&amp;nbsp;to&amp;nbsp;withholding.&amp;nbsp;The&amp;nbsp;types&amp;nbsp;subject&amp;nbsp;to&amp;nbsp;withholding&amp;nbsp;have&amp;nbsp;been&amp;nbsp;elaborated&amp;nbsp;on&amp;nbsp;page&amp;nbsp;15&amp;nbsp;of&amp;nbsp;the&amp;nbsp;memento)&lt;/p>&lt;p>&lt;/p></body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/EcorePrimitiveTypes.library.uml#EBoolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3sqC4MJEeWhJIXHrNBLtw" name="income" visibility="private" type="_f3sqJ4MJEeWhJIXHrNBLtw" association="_f3sqIoMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3sqDIMJEeWhJIXHrNBLtw" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3sqDYMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3sqDoMJEeWhJIXHrNBLtw" name="Trade_and_Business_Income">
        <generalization xmi:id="_f3sqD4MJEeWhJIXHrNBLtw" general="_f3sqCIMJEeWhJIXHrNBLtw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3sqEIMJEeWhJIXHrNBLtw" name="Agriculture_and_Forestry_Income">
        <generalization xmi:id="_f3sqEYMJEeWhJIXHrNBLtw" general="_f3sqCIMJEeWhJIXHrNBLtw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3sqEoMJEeWhJIXHrNBLtw" name="Independent_Professional_Services_Income">
        <generalization xmi:id="_f3sqE4MJEeWhJIXHrNBLtw" general="_f3sqCIMJEeWhJIXHrNBLtw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3sqFIMJEeWhJIXHrNBLtw" name="Pensions_and_Annuities_Income">
        <generalization xmi:id="_f3sqFYMJEeWhJIXHrNBLtw" general="_f3sqCIMJEeWhJIXHrNBLtw"/>
        <ownedAttribute xmi:id="_f3sqFoMJEeWhJIXHrNBLtw" name="occasional_payement" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_f3sqF4MJEeWhJIXHrNBLtw">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3sqGIMJEeWhJIXHrNBLtw" name="Capital_and_Investments_Income">
        <generalization xmi:id="_f3sqGYMJEeWhJIXHrNBLtw" general="_f3sqCIMJEeWhJIXHrNBLtw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3sqGoMJEeWhJIXHrNBLtw" name="Employment_Income">
        <generalization xmi:id="_f3sqG4MJEeWhJIXHrNBLtw" general="_f3sqCIMJEeWhJIXHrNBLtw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3sqHIMJEeWhJIXHrNBLtw" name="Rentals_and_Leases_Income">
        <generalization xmi:id="_f3sqHYMJEeWhJIXHrNBLtw" general="_f3sqCIMJEeWhJIXHrNBLtw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3sqHoMJEeWhJIXHrNBLtw" name="Sundry_Income">
        <generalization xmi:id="_f3sqH4MJEeWhJIXHrNBLtw" general="_f3sqCIMJEeWhJIXHrNBLtw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3sqIIMJEeWhJIXHrNBLtw" name="Directors_Fee">
        <generalization xmi:id="_f3sqIYMJEeWhJIXHrNBLtw" general="_f3sqEoMJEeWhJIXHrNBLtw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_f3sqIoMJEeWhJIXHrNBLtw" name="has as type" memberEnd="_f3sqNoMJEeWhJIXHrNBLtw _f3sqC4MJEeWhJIXHrNBLtw"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3sqI4MJEeWhJIXHrNBLtw" name="Foreign_Income">
        <generalization xmi:id="_f3sqJIMJEeWhJIXHrNBLtw" general="_f3sqJ4MJEeWhJIXHrNBLtw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3sqJYMJEeWhJIXHrNBLtw" name="Local_Income">
        <generalization xmi:id="_f3sqJoMJEeWhJIXHrNBLtw" general="_f3sqJ4MJEeWhJIXHrNBLtw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3sqJ4MJEeWhJIXHrNBLtw" name="Income">
        <ownedRule xmi:id="_f3sqKIMJEeWhJIXHrNBLtw" name="Tax_Deduction_FD-constraint" constrainedElement="_f3sqJ4MJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3sqKYMJEeWhJIXHrNBLtw">
            <language>OCL</language>
            <body>(self .income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) or&#xA;self.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or&#xA;self.income_type.oclIsTypeOf(Income_Concepts::Rentals_and_Leases_Income)) = true&#xA;and&#xA;self.start_date_within_taxation_year = self.taxPayer.incomeTax.tax_year &#xA;and&#xA;let fd_expenses : Set(Expense_Concepts::Expense) = self.expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Travel_Expense_FD) and exp.year_expense_was_incurred_in = self.start_date_within_taxation_year) in&#xA;     fd_expenses->notEmpty()&#xA;     &#xA;implies&#xA;&#xA;&#x9; fd_expenses->forAll(a_FD|&#x9; &#xA;&#x9; if  (a_FD.deduction.oclAsType(Income_Tax_Deduction_Concepts::FD).calculated_distance>a_FD.deduction.oclAsType(Income_Tax_Deduction_Concepts::FD).distance_declared_in_january) then&#xA;&#x9;&#x9;if  (a_FD.deduction.oclAsType(Income_Tax_Deduction_Concepts::FD).calculated_distance>Constants::MINIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if (a_FD.deduction.oclAsType(Income_Tax_Deduction_Concepts::FD).calculated_distance>Constants::MAXIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/**MAXIMAL FLAT DISTANCE FOR TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;a_FD.deduction.deductible_amount = Constants::FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT.oclAsType(Integer) * Constants::MAXIMAL_FLAT_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/**REAL DISTANCE FOR TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;a_FD.deduction.deductible_amount = Constants::FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT.oclAsType(Integer) * a_FD.deduction.oclAsType(Income_Tax_Deduction_Concepts::FD).calculated_distance&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;/**MINIMAL FLAT DISTANCE FOR TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;a_FD.deduction.deductible_amount = Constants::FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT.oclAsType(Integer) * Constants::MINIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/*NO CHANGES FOR FD, TRAVEL EXPENSE IS ALREADY DEDUCED FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;endif&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;a_FD.deduction.yearly=  a_FD.deduction.deductible_amount and&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;a_FD.deduction.monthly = a_FD.deduction.deductible_amount/12 and&#xA;&#x9;&#x9;a_FD.deduction.daily = a_FD.deduction.monthly/25&#xA;)&#xA;&#x9; </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_f3sqKoMJEeWhJIXHrNBLtw" name="Tax_Deduction_FO-constraint" constrainedElement="_f3sqJ4MJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3sqK4MJEeWhJIXHrNBLtw">
            <language>OCL</language>
            <body>(self.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) or&#xA;self.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or&#xA;self.income_type.oclIsTypeOf(Income_Concepts::Rentals_and_Leases_Income)) = true&#xA;and&#xA;self.start_date_within_taxation_year = self.taxPayer.incomeTax.tax_year&#xA;and&#xA;let fo_expenses : Set(Expense_Concepts::Expense) = self.expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Miscellaneous_Expense_FO) and exp.year_expense_was_incurred_in = self.start_date_within_taxation_year),&#xA;&#x9;declared_expense : Integer = fo_expenses.declared_amount->sum() in&#xA;&#x9;&#xA;     fo_expenses->notEmpty()&#xA;&#xA;implies&#xA;&#xA;&#x9;fo_expenses->forAll(fo|&#xA;&#x9;&#x9;&#x9;/*do we want to care about this, or up to the agent to decide*/&#xA;&#x9;&#x9;&#x9;let spouse_FO: Income_Tax_Deduction_Concepts::FO =  self.taxPayer.legal_union_A.individual_B.oclAsType(Tax_Payer_Concepts::Tax_Payer).income_Tax_Deduction->&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select(type|type.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO))->any(true).oclAsType(Income_Tax_Deduction_Concepts::FO),&#xA;&#x9;&#x9;&#x9;&#x9; spouse_declared_expense:Integer=self.taxPayer.legal_union_A.individual_B.oclAsType(Tax_Payer_Concepts::Tax_Payer).expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Miscellaneous_Expense_FO))->any(true).declared_amount in&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if(fo.deduction.oclAsType(Income_Tax_Deduction_Concepts::FO) .rate_type_for_FO = Type_of_Rate::REAL_COST) then &#xA;&#x9;&#x9;&#x9;&#x9;if(self.taxPayer.taxed_jointly) then &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(spouse_FO.rate_type_for_FO= Type_of_Rate::REAL_COST) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;fo.deduction.oclAsType(Income_Tax_Deduction_Concepts::FO) .rate_type_for_FO = Type_of_Rate::REGULAR&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if(declared_expense>Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE= Type_of_Rate::REAL_COST&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;&#x9;endif&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if (Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE = Type_of_Rate::REGULAR) then&#xA;&#x9;&#x9;&#x9;/*FLAT RATE FOR FO EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;fo.deduction.deductible_amount =Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)+Constants::DISABILITY_FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/**REAL COST FOR FO EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;fo.deduction.deductible_amount = declared_expense+Constants::DISABILITY_FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)&#xA;&#x9;&#x9;endif&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;fo.deduction.oclAsType(Income_Tax_Deduction_Concepts::FO) .yearly=  fo.deduction.deductible_amount and&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;fo.deduction.oclAsType(Income_Tax_Deduction_Concepts::FO) .monthly = fo.deduction.deductible_amount/12 and&#xA;&#x9;&#x9;fo.deduction.oclAsType(Income_Tax_Deduction_Concepts::FO) .daily = fo.deduction.monthly/25 &#x9;&#xA;&#x9;) &#xA;&#x9;</body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:id="_f3sqLIMJEeWhJIXHrNBLtw" name="taxPayer" visibility="private" type="_f3spkYMJEeWhJIXHrNBLtw" association="_f3sqy4MJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3sqLYMJEeWhJIXHrNBLtw" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3sqLoMJEeWhJIXHrNBLtw" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3sqL4MJEeWhJIXHrNBLtw" name="income_amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3sqMIMJEeWhJIXHrNBLtw" name="start_date_within_taxation_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_f3ywTYMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3sqMYMJEeWhJIXHrNBLtw" name="start_date_of_contract" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_f3ywTYMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3sqMoMJEeWhJIXHrNBLtw" name="end_date_within_taxation_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_f3ywTYMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3sqM4MJEeWhJIXHrNBLtw" name="tax_card" visibility="private" type="_f3srNYMJEeWhJIXHrNBLtw" association="_f3sq8IMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3sqNIMJEeWhJIXHrNBLtw" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3sqNYMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3sqNoMJEeWhJIXHrNBLtw" name="income_type" visibility="private" type="_f3sqCIMJEeWhJIXHrNBLtw" association="_f3sqIoMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3sqN4MJEeWhJIXHrNBLtw" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3sqOIMJEeWhJIXHrNBLtw" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3sqOYMJEeWhJIXHrNBLtw" name="expenses" visibility="private" type="_f3sqs4MJEeWhJIXHrNBLtw" association="_f3sqsoMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3sqOoMJEeWhJIXHrNBLtw" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3sqO4MJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3sqPIMJEeWhJIXHrNBLtw" name="tax_liability" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_f3sqPYMJEeWhJIXHrNBLtw" name="compute_duration_of_contract" isQuery="true" postcondition="_f3sqP4MJEeWhJIXHrNBLtw">
          <eAnnotations xmi:id="_f3sqPoMJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_f3sqP4MJEeWhJIXHrNBLtw" name="get_duration" constrainedElement="_f3sqPYMJEeWhJIXHrNBLtw">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3sqQIMJEeWhJIXHrNBLtw">
              <language>OCL</language>
              <body>result=1&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_f3sqQYMJEeWhJIXHrNBLtw" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_f3sqQoMJEeWhJIXHrNBLtw" name="compute_duration_of_contract_within_taxation_year" isQuery="true">
          <eAnnotations xmi:id="_f3sqQ4MJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_f3sqRIMJEeWhJIXHrNBLtw" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_f3sqRYMJEeWhJIXHrNBLtw" name="IN_date">
            <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_f3ywTYMJEeWhJIXHrNBLtw"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_f3sqRoMJEeWhJIXHrNBLtw" name="Expense_Concepts">
      <packagedElement xmi:type="uml:Class" xmi:id="_f3sqR4MJEeWhJIXHrNBLtw" name="Permanent_Expense">
        <generalization xmi:id="_f3sqSIMJEeWhJIXHrNBLtw" general="_f3sqVIMJEeWhJIXHrNBLtw"/>
        <ownedAttribute xmi:id="_f3sqSYMJEeWhJIXHrNBLtw" name="category" visibility="public" type="_f3sqpYMJEeWhJIXHrNBLtw"/>
        <ownedAttribute xmi:id="_f3sqSoMJEeWhJIXHrNBLtw" name="is_eligible_for_deduction" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_f3sqS4MJEeWhJIXHrNBLtw">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedOperation xmi:id="_f3sqTIMJEeWhJIXHrNBLtw" name="is_expense_eligible_for_deduction" isQuery="true" postcondition="_f3sqToMJEeWhJIXHrNBLtw">
          <eAnnotations xmi:id="_f3sqTYMJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_f3sqToMJEeWhJIXHrNBLtw" name="is_eligible" constrainedElement="_f3sqTIMJEeWhJIXHrNBLtw">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3sqT4MJEeWhJIXHrNBLtw">
              <language>OCL</language>
              <body>self.is_eligible_for_deduction = IN_agent_response and&#xA;result = IN_agent_response&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_f3sqUIMJEeWhJIXHrNBLtw" name="IN_agent_response">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_f3sqUYMJEeWhJIXHrNBLtw" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3sqUoMJEeWhJIXHrNBLtw" name="Interest_Expense">
        <generalization xmi:id="_f3sqU4MJEeWhJIXHrNBLtw" general="_f3sqVIMJEeWhJIXHrNBLtw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3sqVIMJEeWhJIXHrNBLtw" name="Special_Expense_DS">
        <generalization xmi:id="_f3sqVYMJEeWhJIXHrNBLtw" general="_f3sqs4MJEeWhJIXHrNBLtw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3sqVoMJEeWhJIXHrNBLtw" name="Private_Insurance_and_Plan">
        <generalization xmi:id="_f3sqV4MJEeWhJIXHrNBLtw" general="_f3sqVIMJEeWhJIXHrNBLtw"/>
        <ownedAttribute xmi:id="_f3sqWIMJEeWhJIXHrNBLtw" name="category" visibility="public" type="_f3sqqIMJEeWhJIXHrNBLtw"/>
        <ownedAttribute xmi:id="_f3sqWYMJEeWhJIXHrNBLtw" name="duration_of_contract" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3sqWoMJEeWhJIXHrNBLtw" name="is_private_insurance_and_plan_eligible_for_deduction" visibility="public" isDerived="true">
          <eAnnotations xmi:id="_f3sqW4MJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_f3sqXIMJEeWhJIXHrNBLtw">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedOperation xmi:id="_f3sqXYMJEeWhJIXHrNBLtw" name="is_private_insurance_and_plan_eligible_for_deduction" isQuery="true" postcondition="_f3sqX4MJEeWhJIXHrNBLtw">
          <eAnnotations xmi:id="_f3sqXoMJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_f3sqX4MJEeWhJIXHrNBLtw" name="is_private_insurance_and_plan_eligible_for_deduction" constrainedElement="_f3sqXYMJEeWhJIXHrNBLtw">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3sqYIMJEeWhJIXHrNBLtw">
              <language>OCL</language>
              <body>self.is_private_insurance_and_plan_eligible_for_deduction = IN_eligible_plan&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_f3sqYYMJEeWhJIXHrNBLtw" name="IN_eligible_plan">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3sqYoMJEeWhJIXHrNBLtw" name="Health_and_Pension_Insurance">
        <generalization xmi:id="_f3sqY4MJEeWhJIXHrNBLtw" general="_f3sqVIMJEeWhJIXHrNBLtw"/>
        <ownedAttribute xmi:id="_f3sqZIMJEeWhJIXHrNBLtw" name="category" visibility="public" type="_f3sqroMJEeWhJIXHrNBLtw"/>
        <ownedAttribute xmi:id="_f3sqZYMJEeWhJIXHrNBLtw" name="is_related_to_additional_salary" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_f3sqZoMJEeWhJIXHrNBLtw">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3sqZ4MJEeWhJIXHrNBLtw" name="Donation">
        <generalization xmi:id="_f3sqaIMJEeWhJIXHrNBLtw" general="_f3sqVIMJEeWhJIXHrNBLtw"/>
        <ownedAttribute xmi:id="_f3sqaYMJEeWhJIXHrNBLtw" name="beneficiary" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3sqaoMJEeWhJIXHrNBLtw" name="is_beneficiary_eligible" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_f3sqa4MJEeWhJIXHrNBLtw">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3sqbIMJEeWhJIXHrNBLtw" name="is_donation_reported" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_f3sqbYMJEeWhJIXHrNBLtw" name="get_beneficiary_eligibility_for_deduction" isQuery="true" postcondition="_f3sqb4MJEeWhJIXHrNBLtw">
          <eAnnotations xmi:id="_f3sqboMJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_f3sqb4MJEeWhJIXHrNBLtw" name="is_leagaly_approved_beneficiary" constrainedElement="_f3sqbYMJEeWhJIXHrNBLtw">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3sqcIMJEeWhJIXHrNBLtw">
              <language>OCL</language>
              <body>is_beneficiary_eligible = IN_eligibility&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_f3sqcYMJEeWhJIXHrNBLtw" name="IN_eligibility">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3sqcoMJEeWhJIXHrNBLtw" name="Loss_Carryforward">
        <ownedRule xmi:id="_f3sqc4MJEeWhJIXHrNBLtw" name="ExpensePossibleOnlyIfCertainIncomeType-constraint" constrainedElement="_f3sqcoMJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3sqdIMJEeWhJIXHrNBLtw">
            <language>OCL</language>
            <body>self.oclIsTypeOf(Loss_Carryforward) implies&#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Agriculture_and_Forestry_Income) or &#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Independent_Professional_Services_Income) or&#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Trade_and_Business_Income)&#xA;&#xA;</body>
          </specification>
        </ownedRule>
        <generalization xmi:id="_f3sqdYMJEeWhJIXHrNBLtw" general="_f3sqVIMJEeWhJIXHrNBLtw"/>
        <ownedAttribute xmi:id="_f3sqdoMJEeWhJIXHrNBLtw" name="regular_accountability" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3sqd4MJEeWhJIXHrNBLtw" name="compensation_by_other_means" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3sqeIMJEeWhJIXHrNBLtw" name="tax_payer_has_inherited_business_ownership" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_f3sqeYMJEeWhJIXHrNBLtw">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3sqeoMJEeWhJIXHrNBLtw" name="tax_payer_has_been_partner_in_business" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_f3sqe4MJEeWhJIXHrNBLtw" value="true">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedOperation xmi:id="_f3sqfIMJEeWhJIXHrNBLtw" name="is_accountability_regular" isQuery="true" postcondition="_f3sqfoMJEeWhJIXHrNBLtw">
          <eAnnotations xmi:id="_f3sqfYMJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_f3sqfoMJEeWhJIXHrNBLtw" name="is_accounatbility_regular" constrainedElement="_f3sqfIMJEeWhJIXHrNBLtw">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3sqf4MJEeWhJIXHrNBLtw">
              <language>OCL</language>
              <body>self.regular_accountability = IN_regularity</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_f3sqgIMJEeWhJIXHrNBLtw" name="IN_regularity">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_f3sqgYMJEeWhJIXHrNBLtw" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_f3sqgoMJEeWhJIXHrNBLtw" name="is_compensated_by_other_means" isQuery="true" postcondition="_f3sqhIMJEeWhJIXHrNBLtw">
          <eAnnotations xmi:id="_f3sqg4MJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_f3sqhIMJEeWhJIXHrNBLtw" name="is_compensated_by_other_means" constrainedElement="_f3sqgoMJEeWhJIXHrNBLtw">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3sqhYMJEeWhJIXHrNBLtw">
              <language>OCL</language>
              <body>self.compensation_by_other_means = IN_compensated</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_f3sqhoMJEeWhJIXHrNBLtw" name="IN_compensated">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_f3sqh4MJEeWhJIXHrNBLtw" name="has_been_tax_payer_partner_in_business" isQuery="true" postcondition="_f3sqiYMJEeWhJIXHrNBLtw">
          <eAnnotations xmi:id="_f3sqiIMJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_f3sqiYMJEeWhJIXHrNBLtw" name="partner_in_business" constrainedElement="_f3sqh4MJEeWhJIXHrNBLtw">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3sqioMJEeWhJIXHrNBLtw">
              <language>OCL</language>
              <body>self.tax_payer_has_been_partner_in_business = IN_has_been_partner_in_business&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_f3sqi4MJEeWhJIXHrNBLtw" name="IN_has_been_partner_in_business">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_f3sqjIMJEeWhJIXHrNBLtw" name="has_tax_payer_inherited_business_ownership" isQuery="true" postcondition="_f3sqjoMJEeWhJIXHrNBLtw">
          <eAnnotations xmi:id="_f3sqjYMJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_f3sqjoMJEeWhJIXHrNBLtw" name="inherited_business_ownership" constrainedElement="_f3sqjIMJEeWhJIXHrNBLtw">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3sqj4MJEeWhJIXHrNBLtw">
              <language>OCL</language>
              <body>self.tax_payer_has_inherited_business_ownership = IN_inherited_business_ownership</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_f3sqkIMJEeWhJIXHrNBLtw" name="IN_inherited_business_ownership">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3sqkYMJEeWhJIXHrNBLtw" name="Spousal_Expense_AC">
        <generalization xmi:id="_f3sqkoMJEeWhJIXHrNBLtw" general="_f3sqs4MJEeWhJIXHrNBLtw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3sqk4MJEeWhJIXHrNBLtw" name="Extraordinary_Expense_CE">
        <generalization xmi:id="_f3sqlIMJEeWhJIXHrNBLtw" general="_f3sqs4MJEeWhJIXHrNBLtw"/>
        <ownedAttribute xmi:id="_f3sqlYMJEeWhJIXHrNBLtw" name="thresholded_deduction_percentage" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3sqloMJEeWhJIXHrNBLtw" name="ce_type" visibility="public" type="_f3sq_IMJEeWhJIXHrNBLtw"/>
        <ownedOperation xmi:id="_f3sql4MJEeWhJIXHrNBLtw" name="is_above_thresholded_deduction_percentage_for_CE" isQuery="true">
          <eAnnotations xmi:id="_f3sqmIMJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_f3sqmYMJEeWhJIXHrNBLtw" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_f3sqmoMJEeWhJIXHrNBLtw" name="compute_thresholded_deduction_percentage_for_CE" isQuery="true" postcondition="_f3sqnIMJEeWhJIXHrNBLtw">
          <eAnnotations xmi:id="_f3sqm4MJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_f3sqnIMJEeWhJIXHrNBLtw" name="thresholded_deduction_percentage" constrainedElement="_f3sqmoMJEeWhJIXHrNBLtw">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3sqnYMJEeWhJIXHrNBLtw">
              <language>OCL</language>
              <body>self.thresholded_deduction_percentage = IN_thresholded_deduction_percentage&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_f3sqnoMJEeWhJIXHrNBLtw" name="IN_thresholded_deduction_percentage">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3sqn4MJEeWhJIXHrNBLtw" name="Travel_Expense_FD">
        <generalization xmi:id="_f3sqoIMJEeWhJIXHrNBLtw" general="_f3sqo4MJEeWhJIXHrNBLtw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3sqoYMJEeWhJIXHrNBLtw" name="Miscellaneous_Expense_FO">
        <generalization xmi:id="_f3sqooMJEeWhJIXHrNBLtw" general="_f3sqo4MJEeWhJIXHrNBLtw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3sqo4MJEeWhJIXHrNBLtw" name="Professional_Expense">
        <generalization xmi:id="_f3sqpIMJEeWhJIXHrNBLtw" general="_f3sqs4MJEeWhJIXHrNBLtw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="_f3sqpYMJEeWhJIXHrNBLtw" name="Category_of_Permanent_Expense">
        <ownedLiteral xmi:id="_f3sqpoMJEeWhJIXHrNBLtw" name="MISCELLANEOUS_DEBT" classifier="_f3sqpYMJEeWhJIXHrNBLtw"/>
        <ownedLiteral xmi:id="_f3sqp4MJEeWhJIXHrNBLtw" name="ALIMONY" classifier="_f3sqpYMJEeWhJIXHrNBLtw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="_f3sqqIMJEeWhJIXHrNBLtw" name="Category_of_Private_Insurance_and_Plan">
        <ownedLiteral xmi:id="_f3sqqYMJEeWhJIXHrNBLtw" name="PRIVATE_INSURANCE" classifier="_f3sqqIMJEeWhJIXHrNBLtw"/>
        <ownedLiteral xmi:id="_f3sqqoMJEeWhJIXHrNBLtw" name="PRIVATE_LIFE_INSURANCE" classifier="_f3sqroMJEeWhJIXHrNBLtw"/>
        <ownedLiteral xmi:id="_f3sqq4MJEeWhJIXHrNBLtw" name="COMPANY_MEMBERS_PRIVATE_INSURANCE" classifier="_f3sqqIMJEeWhJIXHrNBLtw"/>
        <ownedLiteral xmi:id="_f3sqrIMJEeWhJIXHrNBLtw" name="HOUSING_SAVING_PLAN" classifier="_f3sqroMJEeWhJIXHrNBLtw"/>
        <ownedLiteral xmi:id="_f3sqrYMJEeWhJIXHrNBLtw" name="OLD_AGE_PENSION_PLAN" classifier="_f3sqroMJEeWhJIXHrNBLtw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="_f3sqroMJEeWhJIXHrNBLtw" name="Category_of_Health_and_Pension_Insurances">
        <ownedLiteral xmi:id="_f3sqr4MJEeWhJIXHrNBLtw" name="MANDATORY_HEALTH_AND_PENSION_INSURANCE" classifier="_f3sqroMJEeWhJIXHrNBLtw"/>
        <ownedLiteral xmi:id="_f3sqsIMJEeWhJIXHrNBLtw" name="ADDITIONAL_EMPLOYERS_PENSION_INSURANCE" classifier="_f3sqroMJEeWhJIXHrNBLtw"/>
        <ownedLiteral xmi:id="_f3sqsYMJEeWhJIXHrNBLtw" name="CONTINUED_HEALTH_AND_PENSION_INSURANCE" classifier="_f3sqroMJEeWhJIXHrNBLtw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_f3sqsoMJEeWhJIXHrNBLtw" name="influences" memberEnd="_f3sqvoMJEeWhJIXHrNBLtw _f3sqOYMJEeWhJIXHrNBLtw"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3sqs4MJEeWhJIXHrNBLtw" name="Expense">
        <ownedAttribute xmi:id="_f3sqtIMJEeWhJIXHrNBLtw" name="tax_Payer" visibility="private" type="_f3spkYMJEeWhJIXHrNBLtw" association="_f3sq-IMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3sqtYMJEeWhJIXHrNBLtw" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3sqtoMJEeWhJIXHrNBLtw" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3sqt4MJEeWhJIXHrNBLtw" name="declared_amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3squIMJEeWhJIXHrNBLtw" name="expense_purpose" visibility="public" type="_f3srAIMJEeWhJIXHrNBLtw">
          <defaultValue xmi:type="uml:InstanceValue" xmi:id="_f3squYMJEeWhJIXHrNBLtw" name="OTHER" type="_f3srAIMJEeWhJIXHrNBLtw" instance="_f3srBIMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3squoMJEeWhJIXHrNBLtw" name="dependent" visibility="private" type="_f3spJYMJEeWhJIXHrNBLtw" association="_f3sp84MJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3squ4MJEeWhJIXHrNBLtw" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3sqvIMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3sqvYMJEeWhJIXHrNBLtw" name="year_expense_was_incurred_in" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3sqvoMJEeWhJIXHrNBLtw" name="income" visibility="private" type="_f3sqJ4MJEeWhJIXHrNBLtw" association="_f3sqsoMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3sqv4MJEeWhJIXHrNBLtw" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3sqwIMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3sqwYMJEeWhJIXHrNBLtw" name="deduction" visibility="private" type="_f3tPbYMJEeWhJIXHrNBLtw" association="_f3tPfIMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3sqwoMJEeWhJIXHrNBLtw" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3sqw4MJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_f3sqxIMJEeWhJIXHrNBLtw" name="Grantor">
      <ownedLiteral xmi:id="_f3sqxYMJEeWhJIXHrNBLtw" name="ACD" classifier="_f3sqxIMJEeWhJIXHrNBLtw"/>
      <ownedLiteral xmi:id="_f3sqxoMJEeWhJIXHrNBLtw" name="Employer" classifier="_f3sqxIMJEeWhJIXHrNBLtw"/>
      <ownedLiteral xmi:id="_f3sqx4MJEeWhJIXHrNBLtw" name="CNPF" classifier="_f3sqxIMJEeWhJIXHrNBLtw"/>
      <ownedLiteral xmi:id="_f3sqyIMJEeWhJIXHrNBLtw" name="CEDIES" classifier="_f3sqxIMJEeWhJIXHrNBLtw"/>
      <ownedLiteral xmi:id="_f3sqyYMJEeWhJIXHrNBLtw" name="SNJ" classifier="_f3sqxIMJEeWhJIXHrNBLtw"/>
      <ownedLiteral xmi:id="_f3sqyoMJEeWhJIXHrNBLtw" name="CNAP" classifier="_f3sqxIMJEeWhJIXHrNBLtw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_f3sqy4MJEeWhJIXHrNBLtw" name="earns" memberEnd="_f3spv4MJEeWhJIXHrNBLtw _f3sqLIMJEeWhJIXHrNBLtw"/>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_f3sqzIMJEeWhJIXHrNBLtw" name="Country">
      <ownedLiteral xmi:id="_f3sqzYMJEeWhJIXHrNBLtw" name="LU" classifier="_f3sqzIMJEeWhJIXHrNBLtw"/>
      <ownedLiteral xmi:id="_f3sqzoMJEeWhJIXHrNBLtw" name="FR" classifier="_f3sqzIMJEeWhJIXHrNBLtw"/>
      <ownedLiteral xmi:id="_f3sqz4MJEeWhJIXHrNBLtw" name="BE" classifier="_f3sqzIMJEeWhJIXHrNBLtw"/>
      <ownedLiteral xmi:id="_f3sq0IMJEeWhJIXHrNBLtw" name="DE" classifier="_f3sqzIMJEeWhJIXHrNBLtw"/>
      <ownedLiteral xmi:id="_f3sq0YMJEeWhJIXHrNBLtw" name="NL" classifier="_f3sqzIMJEeWhJIXHrNBLtw"/>
      <ownedLiteral xmi:id="_f3sq0oMJEeWhJIXHrNBLtw" name="OTHER" classifier="_f3sqzIMJEeWhJIXHrNBLtw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_f3sq04MJEeWhJIXHrNBLtw" name="credited for" memberEnd="_f3spxYMJEeWhJIXHrNBLtw _f3tO-YMJEeWhJIXHrNBLtw"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_f3sq1IMJEeWhJIXHrNBLtw" name="Date">
      <ownedAttribute xmi:id="_f3sq1YMJEeWhJIXHrNBLtw" name="day" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3sq1oMJEeWhJIXHrNBLtw" value="*"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3sq14MJEeWhJIXHrNBLtw" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_f3sq2IMJEeWhJIXHrNBLtw" name="month" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_f3sq2YMJEeWhJIXHrNBLtw" name="year" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_f3sq2oMJEeWhJIXHrNBLtw" name="Job_Activity">
      <ownedLiteral xmi:id="_f3sq24MJEeWhJIXHrNBLtw" name="Salary" classifier="_f3sq2oMJEeWhJIXHrNBLtw"/>
      <ownedLiteral xmi:id="_f3sq3IMJEeWhJIXHrNBLtw" name="Pension" classifier="_f3sq2oMJEeWhJIXHrNBLtw"/>
      <ownedLiteral xmi:id="_f3sq3YMJEeWhJIXHrNBLtw" name="Annuity" classifier="_f3sq2oMJEeWhJIXHrNBLtw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_f3sq3oMJEeWhJIXHrNBLtw" name="Tax_Card_Type">
      <ownedLiteral xmi:id="_f3sq34MJEeWhJIXHrNBLtw" name="Principal" classifier="_f3sq3oMJEeWhJIXHrNBLtw"/>
      <ownedLiteral xmi:id="_f3sq4IMJEeWhJIXHrNBLtw" name="Additional" classifier="_f3sq3oMJEeWhJIXHrNBLtw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_f3sq4YMJEeWhJIXHrNBLtw" name="Tax_Office">
      <ownedLiteral xmi:id="_f3sq4oMJEeWhJIXHrNBLtw" name="RTS_2" classifier="_f3sq4YMJEeWhJIXHrNBLtw"/>
      <ownedLiteral xmi:id="_f3sq44MJEeWhJIXHrNBLtw" name="RTS_3" classifier="_f3sq4YMJEeWhJIXHrNBLtw"/>
      <ownedLiteral xmi:id="_f3sq5IMJEeWhJIXHrNBLtw" name="RTS_Esch" classifier="_f3sq4YMJEeWhJIXHrNBLtw"/>
      <ownedLiteral xmi:id="_f3sq5YMJEeWhJIXHrNBLtw" name="RTS_Ettelbruck" classifier="_f3sq4YMJEeWhJIXHrNBLtw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_f3sq5oMJEeWhJIXHrNBLtw" name="Tax_Class_Category">
      <ownedLiteral xmi:id="_f3sq54MJEeWhJIXHrNBLtw" name="One" classifier="_f3sq5oMJEeWhJIXHrNBLtw"/>
      <ownedLiteral xmi:id="_f3sq6IMJEeWhJIXHrNBLtw" name="One_A" classifier="_f3sq5oMJEeWhJIXHrNBLtw"/>
      <ownedLiteral xmi:id="_f3sq6YMJEeWhJIXHrNBLtw" name="Two" classifier="_f3sq5oMJEeWhJIXHrNBLtw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_f3sq6oMJEeWhJIXHrNBLtw" name="Town">
      <ownedLiteral xmi:id="_f3sq64MJEeWhJIXHrNBLtw" name="Luxembourg_city" classifier="_f3sq6oMJEeWhJIXHrNBLtw"/>
      <ownedLiteral xmi:id="_f3sq7IMJEeWhJIXHrNBLtw" name="Bertrange" classifier="_f3sq6oMJEeWhJIXHrNBLtw"/>
      <ownedLiteral xmi:id="_f3sq7YMJEeWhJIXHrNBLtw" name="Strassen" classifier="_f3sq6oMJEeWhJIXHrNBLtw"/>
      <ownedLiteral xmi:id="_f3sq7oMJEeWhJIXHrNBLtw" name="Bettembourg" classifier="_f3sq6oMJEeWhJIXHrNBLtw"/>
      <ownedLiteral xmi:id="_f3sq74MJEeWhJIXHrNBLtw" name="Beaufort" classifier="_f3sq6oMJEeWhJIXHrNBLtw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_f3sq8IMJEeWhJIXHrNBLtw" name="linked to" memberEnd="_f3sqM4MJEeWhJIXHrNBLtw _f3srSoMJEeWhJIXHrNBLtw"/>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_f3sq8YMJEeWhJIXHrNBLtw" name="Dependent_Type">
      <ownedLiteral xmi:id="_f3sq8oMJEeWhJIXHrNBLtw" name="CHILD" classifier="_f3sq8YMJEeWhJIXHrNBLtw"/>
      <ownedLiteral xmi:id="_f3sq84MJEeWhJIXHrNBLtw" name="SPOUSE" classifier="_f3sq8YMJEeWhJIXHrNBLtw"/>
      <ownedLiteral xmi:id="_f3sq9IMJEeWhJIXHrNBLtw" name="RELATIVE" classifier="_f3sq8YMJEeWhJIXHrNBLtw"/>
      <ownedLiteral xmi:id="_f3sq9YMJEeWhJIXHrNBLtw" name="OTHER_FAMILY_MEMBER" classifier="_f3sq8YMJEeWhJIXHrNBLtw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_f3sq9oMJEeWhJIXHrNBLtw" name="provides" memberEnd="_f3srTYMJEeWhJIXHrNBLtw _f3sp_IMJEeWhJIXHrNBLtw"/>
    <packagedElement xmi:type="uml:Association" xmi:id="_f3sq94MJEeWhJIXHrNBLtw" name="receives" memberEnd="_f3sp0YMJEeWhJIXHrNBLtw _f3tPcoMJEeWhJIXHrNBLtw"/>
    <packagedElement xmi:type="uml:Association" xmi:id="_f3sq-IMJEeWhJIXHrNBLtw" name="declares" memberEnd="_f3sp1YMJEeWhJIXHrNBLtw _f3sqtIMJEeWhJIXHrNBLtw"/>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_f3sq-YMJEeWhJIXHrNBLtw" name="Type_of_Rate">
      <ownedLiteral xmi:id="_f3sq-oMJEeWhJIXHrNBLtw" name="REGULAR" classifier="_f3sq-YMJEeWhJIXHrNBLtw"/>
      <ownedLiteral xmi:id="_f3sq-4MJEeWhJIXHrNBLtw" name="REAL_COST" classifier="_f3sq-YMJEeWhJIXHrNBLtw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_f3sq_IMJEeWhJIXHrNBLtw" name="CE_Type">
      <ownedLiteral xmi:id="_f3sq_YMJEeWhJIXHrNBLtw" name="INALIDITY_AND_INFIRMITY" classifier="_f3sq_IMJEeWhJIXHrNBLtw"/>
      <ownedLiteral xmi:id="_f3sq_oMJEeWhJIXHrNBLtw" name="DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD" classifier="_f3sq_IMJEeWhJIXHrNBLtw"/>
      <ownedLiteral xmi:id="_f3sq_4MJEeWhJIXHrNBLtw" name="CARE_FOR_CHILDREN_NOT_BEING_PART_OF_HOUSEHOLD" classifier="_f3sq_IMJEeWhJIXHrNBLtw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_f3srAIMJEeWhJIXHrNBLtw" name="Expense_Purpose">
      <ownedLiteral xmi:id="_f3srAYMJEeWhJIXHrNBLtw" name="HOUSE_CARE" classifier="_f3srAIMJEeWhJIXHrNBLtw"/>
      <ownedLiteral xmi:id="_f3srAoMJEeWhJIXHrNBLtw" name="CHILD_CARE" classifier="_f3srAIMJEeWhJIXHrNBLtw"/>
      <ownedLiteral xmi:id="_f3srA4MJEeWhJIXHrNBLtw" name="DEPENDENCE_CARE" classifier="_f3srAIMJEeWhJIXHrNBLtw"/>
      <ownedLiteral xmi:id="_f3srBIMJEeWhJIXHrNBLtw" name="OTHER" classifier="_f3srAIMJEeWhJIXHrNBLtw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_f3srBYMJEeWhJIXHrNBLtw" name="Constants">
      <ownedLiteral xmi:id="_f3srBoMJEeWhJIXHrNBLtw" name="MAXIMUM_CE_RATE_FOR_CHILD_NOT_BEING_PART_OF_HOUSEHOLD" classifier="_f3srBYMJEeWhJIXHrNBLtw">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_f3srB4MJEeWhJIXHrNBLtw" value="3480"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_f3srCIMJEeWhJIXHrNBLtw" name="MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE" classifier="_f3srBYMJEeWhJIXHrNBLtw">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_f3srCYMJEeWhJIXHrNBLtw" value="3600"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_f3srCoMJEeWhJIXHrNBLtw" name="MINIMUM_SALARY" classifier="_f3srBYMJEeWhJIXHrNBLtw">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_f3srC4MJEeWhJIXHrNBLtw" value="1500"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_f3srDIMJEeWhJIXHrNBLtw" name="FLAT_RATE_FOR_EXTRA_PROFESSIONAL_DEDUCTION" classifier="_f3srBYMJEeWhJIXHrNBLtw">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_f3srDYMJEeWhJIXHrNBLtw" value="4500"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_f3srDoMJEeWhJIXHrNBLtw" name="MAXIMUM_DEDUCTIBLE_PERCENTAGE_FOR_DONATIONS" classifier="_f3srBYMJEeWhJIXHrNBLtw">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_f3srD4MJEeWhJIXHrNBLtw" value="20"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_f3srEIMJEeWhJIXHrNBLtw" name="MINIMUM_DEDUCTIBLE_AMOUNT_FOR_DONATIONS" classifier="_f3srBYMJEeWhJIXHrNBLtw">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_f3srEYMJEeWhJIXHrNBLtw" value="120"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_f3srEoMJEeWhJIXHrNBLtw" name="MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ADDITIONAL_PENSION_AND_INSURANCE" classifier="_f3srBYMJEeWhJIXHrNBLtw">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_f3srE4MJEeWhJIXHrNBLtw"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_f3srFIMJEeWhJIXHrNBLtw" name="MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ALIMONY_EXPENSE" classifier="_f3srBYMJEeWhJIXHrNBLtw">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_f3srFYMJEeWhJIXHrNBLtw" value="24000"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_f3srFoMJEeWhJIXHrNBLtw" name="FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT" classifier="_f3srBYMJEeWhJIXHrNBLtw">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_f3srF4MJEeWhJIXHrNBLtw" value="99"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_f3srGIMJEeWhJIXHrNBLtw" name="MAXIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION" classifier="_f3srBYMJEeWhJIXHrNBLtw">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_f3srGYMJEeWhJIXHrNBLtw" value="26"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_f3srGoMJEeWhJIXHrNBLtw" name="MAXIMAL_FLAT_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION" classifier="_f3srBYMJEeWhJIXHrNBLtw">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_f3srG4MJEeWhJIXHrNBLtw" value="30"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_f3srHIMJEeWhJIXHrNBLtw" name="MINIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION" classifier="_f3srBYMJEeWhJIXHrNBLtw">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_f3srHYMJEeWhJIXHrNBLtw" value="4"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_f3srHoMJEeWhJIXHrNBLtw" name="FLAT_RATE_CIM_DAILY" classifier="_f3srBYMJEeWhJIXHrNBLtw">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_f3srH4MJEeWhJIXHrNBLtw" value="2"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_f3srIIMJEeWhJIXHrNBLtw" name="FLAT_RATE_CIM_MONTHLY" classifier="_f3srBYMJEeWhJIXHrNBLtw">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_f3srIYMJEeWhJIXHrNBLtw" value="62"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_f3srIoMJEeWhJIXHrNBLtw" name="FLAT_RATE_CIM_YEARLY" classifier="_f3srBYMJEeWhJIXHrNBLtw">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_f3srI4MJEeWhJIXHrNBLtw" value="750"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_f3srJIMJEeWhJIXHrNBLtw" name="FLAT_RATE_CIP_DAILY" classifier="_f3srBYMJEeWhJIXHrNBLtw">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_f3srJYMJEeWhJIXHrNBLtw" value="1"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_f3srJoMJEeWhJIXHrNBLtw" name="FLAT_RATE_CIP_MONTHLY" classifier="_f3srBYMJEeWhJIXHrNBLtw">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_f3srJ4MJEeWhJIXHrNBLtw" value="25"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_f3srKIMJEeWhJIXHrNBLtw" name="FLAT_RATE_CIP_YEARLY" classifier="_f3srBYMJEeWhJIXHrNBLtw">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_f3srKYMJEeWhJIXHrNBLtw" value="300"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_f3srKoMJEeWhJIXHrNBLtw" name="FLAT_RATE_CIS_DAILY" classifier="_f3srBYMJEeWhJIXHrNBLtw">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_f3srK4MJEeWhJIXHrNBLtw" value="1"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_f3srLIMJEeWhJIXHrNBLtw" name="FLAT_RATE_CIS_MONTHLY" classifier="_f3srBYMJEeWhJIXHrNBLtw">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_f3srLYMJEeWhJIXHrNBLtw" value="25"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_f3srLoMJEeWhJIXHrNBLtw" name="FLAT_RATE_CIS_YEARLY" classifier="_f3srBYMJEeWhJIXHrNBLtw">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_f3srL4MJEeWhJIXHrNBLtw" value="300"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_f3srMIMJEeWhJIXHrNBLtw" name="MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_DS" classifier="_f3srBYMJEeWhJIXHrNBLtw">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_f3srMYMJEeWhJIXHrNBLtw" value="480"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_f3srMoMJEeWhJIXHrNBLtw" name="FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE" classifier="_f3srBYMJEeWhJIXHrNBLtw"/>
      <ownedLiteral xmi:id="_f3srM4MJEeWhJIXHrNBLtw" name="DISABILITY_FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE" classifier="_f3srBYMJEeWhJIXHrNBLtw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_f3srNIMJEeWhJIXHrNBLtw" name="Tax_Card_Concepts">
      <packagedElement xmi:type="uml:Class" xmi:id="_f3srNYMJEeWhJIXHrNBLtw" name="Tax_Card">
        <ownedRule xmi:id="_f3srNoMJEeWhJIXHrNBLtw" name="SubjectToWithholdingTax-constraint" constrainedElement="_f3srNYMJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3srN4MJEeWhJIXHrNBLtw">
            <language>OCL</language>
            <body>not self.oclIsUndefined() &#xA;implies&#xA;(self.income.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or &#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) or&#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Capital_and_Investments_Income) or&#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Directors_Fee)&#xA;)&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_f3srOIMJEeWhJIXHrNBLtw" name="Tax_Credits-constraint" constrainedElement="_f3srNYMJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3srOYMJEeWhJIXHrNBLtw">
            <language>OCL</language>
            <body>self.tax_card_type = Tax_Card_Type::Principal &#xA;&#xA;implies&#xA;&#xA;let cim : Income_Tax_Credit_Concepts::CIM = self.income_Tax_Credit->select(c|c.oclIsTypeOf(Income_Tax_Credit_Concepts::CIM) and c.tax_year = self.valid_from_date)->any(true).oclAsType(Income_Tax_Credit_Concepts::CIM),&#xA;&#x9;cis : Income_Tax_Credit_Concepts::CIS = self.income_Tax_Credit->select(cis|cis.oclIsTypeOf(Income_Tax_Credit_Concepts::CIS) and cis.tax_year = self.valid_from_date)->any(true).oclAsType(Income_Tax_Credit_Concepts::CIS),&#xA;&#x9;cip : Income_Tax_Credit_Concepts::CIP = self.income_Tax_Credit->select(cip|cip.oclIsTypeOf(Income_Tax_Credit_Concepts::CIP) and cip.tax_year = self.valid_from_date)->any(true).oclAsType(Income_Tax_Credit_Concepts::CIP) in&#xA;&#x9;&#xA;(not cis.oclIsUndefined()) xor (not cip.oclIsUndefined()) = true&#xA;and&#xA;if not cim.oclIsUndefined() then &#xA;&#x9;self.credit_CIM_daily = cim.daily and&#xA;&#x9;self.credit_CIM_monthly = cim.monthly &#xA;else&#xA;&#x9;true&#xA;endif&#xA;and&#xA;if not cis.oclIsUndefined()then&#xA;&#x9;self.credit_CIS_daily = cis.daily and&#xA;&#x9;self.credit_CIS_monthly = cis.monthly &#xA;else&#xA;&#x9;true&#xA;endif&#xA;and&#xA;if not cip.oclIsUndefined()then&#xA;&#x9;self.credit_CIP_monthly = cip.monthly &#xA;else&#xA;&#x9;true&#xA;endif</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_f3srOoMJEeWhJIXHrNBLtw" name="Tax_Card_AC-constraint" constrainedElement="_f3srNYMJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3srO4MJEeWhJIXHrNBLtw">
            <language>OCL</language>
            <body>let set_ac : Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(deduction|deduction.oclIsTypeOf(Income_Tax_Deduction_Concepts::AC) and deduction.tax_year = self.valid_from_date),&#xA;&#x9;ac : Income_Tax_Deduction_Concepts::AC = set_ac->any(true).oclAsType(Income_Tax_Deduction_Concepts::AC),&#xA;&#x9;set_fo : Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(deduction|deduction.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO) and deduction.tax_year = self.valid_from_date),&#xA;&#x9;set_ds : Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(deduction|deduction.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS) and deduction.tax_year = self.valid_from_date) in&#xA;&#x9;&#xA;set_ac->size() = 1 &#xA;implies&#xA;&#xA;self.tax_card_type=Tax_Card_Type::Additional and&#xA;self.tax_Payer.taxed_jointly and&#xA;self.deduction_AC_yearly = ac.deductible_amount and&#xA;self.deduction_AC_monthly = ac.deductible_amount/12 and&#xA;self.deduction_AC_daily = self.deduction_AC_monthly/25 /**25 working days per month**/ and&#xA;&#xA;if(set_ds->size()>0) then&#xA;&#x9;set_ds->size() =1 and&#xA;&#x9;self.deduction_DS_yearly->notEmpty() and&#xA;&#x9;self.deduction_DS_yearly = set_ds.deductible_amount ->sum()&#xA;else&#xA;&#x9;true&#xA;endif&#xA;&#xA;and&#xA;&#xA;if(set_fo->size()>0) then&#xA;&#x9;set_fo->size() = 1 and&#xA;&#x9;self.deduction_FO_yearly->notEmpty() and&#xA;&#x9;self.deduction_FO_yearly = set_fo.deductible_amount ->sum()&#xA;else&#xA;&#x9;true&#xA;endif&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_f3srPIMJEeWhJIXHrNBLtw" name="Tax_Card_FD-constraint" constrainedElement="_f3srNYMJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3srPYMJEeWhJIXHrNBLtw">
            <language>OCL</language>
            <body>not self.oclIsUndefined()&#xA;implies&#xA;self.income.taxPayer.income_Tax_Deduction->select(d|d.oclIsTypeOf(Income_Tax_Deduction_Concepts::FD) and d.tax_year = self.valid_from_date)->size() = 1&#xA;&#xA;and &#xA;let fd : Income_Tax_Deduction_Concepts::FD = self.income_Tax_Deduction->select(d|d.oclIsTypeOf(Income_Tax_Deduction_Concepts::FD) and d.tax_year = self.valid_from_date)->any(true).oclAsType(Income_Tax_Deduction_Concepts::FD) in&#xA;self.deduction_FD_daily = fd.daily and&#xA;self.deduction_FD_monthly = fd.monthly and&#xA;self.deduction_FD_yearly = fd.yearly&#xA;&#xA;&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_f3srPoMJEeWhJIXHrNBLtw" name="Tax_Card_DS-constraint" constrainedElement="_f3srNYMJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3srP4MJEeWhJIXHrNBLtw">
            <language>OCL</language>
            <body>let set_ds : Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(d|d.oclIsTypeOf( Income_Tax_Deduction_Concepts::DS) and d.tax_year = self.valid_from_date),&#xA;&#x9;total_ds : Integer = set_ds.deductible_amount->sum()  in&#xA;set_ds->size()>0 and&#xA;self.tax_card_type = Tax_Card_Type::Principal&#xA;&#xA;implies&#xA;&#xA;if total_ds > Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_DS.oclAsType(Integer) then&#xA; &#x9;/**THE DIFFERENCE BETWEEN THE MINIMUM AND THE TOTAL DS AMOUNT IS WRITTEN ON THE TAX CARD**/&#xA; &#x9;self.deduction_DS_monthly = (total_ds - Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_DS.oclAsType(Integer))/self.income^^compute_duration_of_contract_within_taxation_year(self.valid_from_date)->first().result&#xA; else&#xA; &#x9;/**NO NEED TO PUT DETAILS ON THE TAX CARD**/&#xA; &#x9;false&#xA; endif</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_f3srQIMJEeWhJIXHrNBLtw" name="Tax_Card_CE-constraint" constrainedElement="_f3srNYMJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3srQYMJEeWhJIXHrNBLtw">
            <language>OCL</language>
            <body>let set_ce : Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(deduction|deduction.oclIsTypeOf(Income_Tax_Deduction_Concepts::CE) and deduction.tax_year = self.valid_from_date),&#xA;&#x9;ce : Income_Tax_Deduction_Concepts::CE = set_ce->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE) in&#xA;&#x9;&#xA;&#x9;set_ce->size() = 1 &#xA;implies&#xA;&#xA;self.tax_card_type=Tax_Card_Type::Principal and&#xA;self.deduction_CE_yearly = ce.deductible_amount and&#xA;self.deduction_CE_monthly = ce.deductible_amount/12 and&#xA;self.deduction_CE_daily = self.deduction_CE_monthly/25 /**25 working days per month**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_f3srQoMJEeWhJIXHrNBLtw" name="Tax_Card_FO-constraint" constrainedElement="_f3srNYMJEeWhJIXHrNBLtw">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3srQ4MJEeWhJIXHrNBLtw">
            <language>OCL</language>
            <body>not self.oclIsUndefined()&#xA;implies&#xA;self.income.taxPayer.income_Tax_Deduction->select(d|d.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO) and d.tax_year = self.valid_from_date)->size() = 1&#xA;&#xA;and &#xA;&#xA;let fo : Income_Tax_Deduction_Concepts::FO = self.income_Tax_Deduction->select(d|d.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO) and d.tax_year = self.valid_from_date)->any(true).oclAsType(Income_Tax_Deduction_Concepts::FO) in&#xA;self.deduction_FO_daily = fo.daily and&#xA;self.deduction_FO_monthly = fo.monthly and&#xA;self.deduction_FO_yearly = fo.yearly&#xA;</body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:id="_f3srRIMJEeWhJIXHrNBLtw" name="card_identifier" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3srRYMJEeWhJIXHrNBLtw" name="tax_card_type" visibility="public" type="_f3sq3oMJEeWhJIXHrNBLtw"/>
        <ownedAttribute xmi:id="_f3srRoMJEeWhJIXHrNBLtw" name="tax_office" visibility="public" type="_f3sq4YMJEeWhJIXHrNBLtw"/>
        <ownedAttribute xmi:id="_f3srR4MJEeWhJIXHrNBLtw" name="valid_from_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_f3ywTYMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3srSIMJEeWhJIXHrNBLtw" name="valid_until_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_f3ywTYMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3srSYMJEeWhJIXHrNBLtw" name="percentage_of_witholding" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3srSoMJEeWhJIXHrNBLtw" name="income" visibility="private" type="_f3sqJ4MJEeWhJIXHrNBLtw" association="_f3sq8IMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3srS4MJEeWhJIXHrNBLtw" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3srTIMJEeWhJIXHrNBLtw" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3srTYMJEeWhJIXHrNBLtw" name="tax_Class" visibility="private" type="_f3sp9YMJEeWhJIXHrNBLtw" association="_f3sq9oMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3srToMJEeWhJIXHrNBLtw" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3srT4MJEeWhJIXHrNBLtw" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3srUIMJEeWhJIXHrNBLtw" name="tax_payers_SSno" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3srUYMJEeWhJIXHrNBLtw" name="tax_payers_name_surname" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3tOwIMJEeWhJIXHrNBLtw" value="2"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3tOwYMJEeWhJIXHrNBLtw" value="2"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tOwoMJEeWhJIXHrNBLtw" name="tax_payers_partner_name_surname" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3tOw4MJEeWhJIXHrNBLtw" value="2"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3tOxIMJEeWhJIXHrNBLtw" value="2"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tOxYMJEeWhJIXHrNBLtw" name="tax_payers_address" visibility="public" type="_f3spHIMJEeWhJIXHrNBLtw" isDerived="true"/>
        <ownedAttribute xmi:id="_f3tOxoMJEeWhJIXHrNBLtw" name="jobs_Employer_SSNo" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tOx4MJEeWhJIXHrNBLtw" name="jobs_employers_name" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tOyIMJEeWhJIXHrNBLtw" name="jobs_activity_type" visibility="public" type="_f3sq2oMJEeWhJIXHrNBLtw" isDerived="true"/>
        <ownedAttribute xmi:id="_f3tOyYMJEeWhJIXHrNBLtw" name="jobs_place_of_work" visibility="public" type="_f3sq6oMJEeWhJIXHrNBLtw" isDerived="true"/>
        <ownedAttribute xmi:id="_f3tOyoMJEeWhJIXHrNBLtw" name="deduction_FD_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tOy4MJEeWhJIXHrNBLtw" name="deduction_FD_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tOzIMJEeWhJIXHrNBLtw" name="deduction_FD_yearly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tOzYMJEeWhJIXHrNBLtw" name="deduction_AC_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tOzoMJEeWhJIXHrNBLtw" name="deduction_AC_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tOz4MJEeWhJIXHrNBLtw" name="deduction_AC_yearly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tO0IMJEeWhJIXHrNBLtw" name="deduction_CE_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tO0YMJEeWhJIXHrNBLtw" name="deduction_CE_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tO0oMJEeWhJIXHrNBLtw" name="deduction_CE_yearly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tO04MJEeWhJIXHrNBLtw" name="deduction_DS_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tO1IMJEeWhJIXHrNBLtw" name="deduction_DS_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tO1YMJEeWhJIXHrNBLtw" name="deduction_DS_yearly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tO1oMJEeWhJIXHrNBLtw" name="deduction_FO_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tO14MJEeWhJIXHrNBLtw" name="deduction_FO_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tO2IMJEeWhJIXHrNBLtw" name="deduction_FO_yearly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tO2YMJEeWhJIXHrNBLtw" name="credit_CIS_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tO2oMJEeWhJIXHrNBLtw" name="credit_CIS_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tO24MJEeWhJIXHrNBLtw" name="credit_CIP_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tO3IMJEeWhJIXHrNBLtw" name="credit_CIM_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tO3YMJEeWhJIXHrNBLtw" name="credit_CIM_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tO3oMJEeWhJIXHrNBLtw" name="tax_Payer" visibility="private" type="_f3spkYMJEeWhJIXHrNBLtw" association="_f3sp6oMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3tO34MJEeWhJIXHrNBLtw" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3tO4IMJEeWhJIXHrNBLtw" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tO4YMJEeWhJIXHrNBLtw" name="income_Tax_Credit" visibility="private" type="_f3tO94MJEeWhJIXHrNBLtw" aggregation="shared" association="_f3tO7oMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3tO4oMJEeWhJIXHrNBLtw" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3tO44MJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tO5IMJEeWhJIXHrNBLtw" name="income_Tax_Deduction" visibility="private" type="_f3tPbYMJEeWhJIXHrNBLtw" aggregation="shared" association="_f3tPbIMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3tO5YMJEeWhJIXHrNBLtw" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3tO5oMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tO54MJEeWhJIXHrNBLtw" name="validity" visibility="protected">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tO6IMJEeWhJIXHrNBLtw" name="previous" visibility="private" type="_f3srNYMJEeWhJIXHrNBLtw" association="_f3tO74MJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3tO6YMJEeWhJIXHrNBLtw" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3tO6oMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tO64MJEeWhJIXHrNBLtw" name="current_tax_card" visibility="private" type="_f3srNYMJEeWhJIXHrNBLtw" association="_f3tO74MJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3tO7IMJEeWhJIXHrNBLtw" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3tO7YMJEeWhJIXHrNBLtw" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_f3tO7oMJEeWhJIXHrNBLtw" name="include" memberEnd="_f3tPA4MJEeWhJIXHrNBLtw _f3tO4YMJEeWhJIXHrNBLtw"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_f3tO74MJEeWhJIXHrNBLtw" name="invalidated by" memberEnd="_f3tO6IMJEeWhJIXHrNBLtw _f3tO64MJEeWhJIXHrNBLtw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_f3tO8IMJEeWhJIXHrNBLtw" name="Income_Tax_Credit_Concepts">
      <packagedElement xmi:type="uml:Class" xmi:id="_f3tO8YMJEeWhJIXHrNBLtw" name="CIM">
        <generalization xmi:id="_f3tO8oMJEeWhJIXHrNBLtw" general="_f3tO94MJEeWhJIXHrNBLtw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3tO84MJEeWhJIXHrNBLtw" name="CIP">
        <generalization xmi:id="_f3tO9IMJEeWhJIXHrNBLtw" general="_f3tO94MJEeWhJIXHrNBLtw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3tO9YMJEeWhJIXHrNBLtw" name="CIS">
        <generalization xmi:id="_f3tO9oMJEeWhJIXHrNBLtw" general="_f3tO94MJEeWhJIXHrNBLtw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3tO94MJEeWhJIXHrNBLtw" name="Income_Tax_Credit">
        <ownedAttribute xmi:id="_f3tO-IMJEeWhJIXHrNBLtw" name="grantedBy" visibility="public" type="_f3sqxIMJEeWhJIXHrNBLtw"/>
        <ownedAttribute xmi:id="_f3tO-YMJEeWhJIXHrNBLtw" name="taxPayer" visibility="private" type="_f3spkYMJEeWhJIXHrNBLtw" association="_f3sq04MJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3tO-oMJEeWhJIXHrNBLtw" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3tO-4MJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tO_IMJEeWhJIXHrNBLtw" name="tax_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tO_YMJEeWhJIXHrNBLtw" name="yearly" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_f3tO_oMJEeWhJIXHrNBLtw" value="300">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tO_4MJEeWhJIXHrNBLtw" name="monthly" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_f3tPAIMJEeWhJIXHrNBLtw" value="25">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tPAYMJEeWhJIXHrNBLtw" name="daily" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_f3tPAoMJEeWhJIXHrNBLtw" value="1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tPA4MJEeWhJIXHrNBLtw" name="taxation_Frame" visibility="private" type="_f3srNYMJEeWhJIXHrNBLtw" association="_f3tO7oMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3tPBIMJEeWhJIXHrNBLtw" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3tPBYMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_f3tPBoMJEeWhJIXHrNBLtw" name="Income_Tax_Deduction_Concepts">
      <packagedElement xmi:type="uml:Class" xmi:id="_f3tPB4MJEeWhJIXHrNBLtw" name="FD">
        <generalization xmi:id="_f3tPCIMJEeWhJIXHrNBLtw" general="_f3tPZ4MJEeWhJIXHrNBLtw"/>
        <ownedAttribute xmi:id="_f3tPCYMJEeWhJIXHrNBLtw" name="distance_declared_in_january" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tPCoMJEeWhJIXHrNBLtw" name="calculated_distance" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_f3tPC4MJEeWhJIXHrNBLtw" name="compute_distance_unit_between_home_and_workpalce" isQuery="true">
          <eAnnotations xmi:id="_f3tPDIMJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_f3tPDYMJEeWhJIXHrNBLtw" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3tPDoMJEeWhJIXHrNBLtw" name="FO">
        <generalization xmi:id="_f3tPD4MJEeWhJIXHrNBLtw" general="_f3tPZ4MJEeWhJIXHrNBLtw"/>
        <ownedAttribute xmi:id="_f3tPEIMJEeWhJIXHrNBLtw" name="rate_type_for_FO" visibility="public" type="_f3sq-YMJEeWhJIXHrNBLtw" isDerived="true"/>
        <ownedOperation xmi:id="_f3tPEYMJEeWhJIXHrNBLtw" name="compute_disability_flat_rate" isQuery="true">
          <eAnnotations xmi:id="_f3tPEoMJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_f3tPE4MJEeWhJIXHrNBLtw" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_f3tPFIMJEeWhJIXHrNBLtw" name="compute_regular_flat_rate" isQuery="true">
          <eAnnotations xmi:id="_f3tPFYMJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_f3tPFoMJEeWhJIXHrNBLtw" key="lookup"/>
          </eAnnotations>
          <ownedParameter xmi:id="_f3tPF4MJEeWhJIXHrNBLtw" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3tPGIMJEeWhJIXHrNBLtw" name="CE">
        <eAnnotations xmi:id="_f3tPGYMJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
        <generalization xmi:id="_f3tPGoMJEeWhJIXHrNBLtw" general="_f3tPbYMJEeWhJIXHrNBLtw"/>
        <ownedAttribute xmi:id="_f3tPG4MJEeWhJIXHrNBLtw" name="ce_deduction_type" visibility="public" type="_f3sq_IMJEeWhJIXHrNBLtw"/>
        <ownedAttribute xmi:id="_f3tPHIMJEeWhJIXHrNBLtw" name="dependent_relative_flat_rate" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tPHYMJEeWhJIXHrNBLtw" name="disability_flat_rate" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_f3tPHoMJEeWhJIXHrNBLtw" name="compute_disability_flat_rate_for_CE" isQuery="true" postcondition="_f3tPIIMJEeWhJIXHrNBLtw">
          <eAnnotations xmi:id="_f3tPH4MJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_f3tPIIMJEeWhJIXHrNBLtw" name="compute_disability_flat_rate" constrainedElement="_f3tPHoMJEeWhJIXHrNBLtw">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3tPIYMJEeWhJIXHrNBLtw">
              <language>OCL</language>
              <body>if self.ce_deduction_type = CE_Type::INALIDITY_AND_INFIRMITY then&#xA;&#x9;self.disability_flat_rate = IN_disability_flat_rate&#xA;else&#xA;&#x9;false&#xA;endif&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_f3tPIoMJEeWhJIXHrNBLtw" name="IN_disability_flat_rate">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_f3tPI4MJEeWhJIXHrNBLtw" name="compute_dependent_relative_flat_rate_for_CE" isQuery="true" postcondition="_f3tPJYMJEeWhJIXHrNBLtw">
          <eAnnotations xmi:id="_f3tPJIMJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_f3tPJYMJEeWhJIXHrNBLtw" name="dependent_relative_flat_rate" constrainedElement="_f3tPI4MJEeWhJIXHrNBLtw">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3tPJoMJEeWhJIXHrNBLtw">
              <language>OCL</language>
              <body>if self.ce_deduction_type = CE_Type::DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD then&#xA;&#x9;self.dependent_relative_flat_rate = IN_dependent_relative_flat_rate&#xA;else&#x9;&#xA;&#x9;false&#xA;endif&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_f3tPJ4MJEeWhJIXHrNBLtw" name="IN_dependent_relative_flat_rate">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3tPKIMJEeWhJIXHrNBLtw" name="AC">
        <generalization xmi:id="_f3tPKYMJEeWhJIXHrNBLtw" general="_f3tPbYMJEeWhJIXHrNBLtw"/>
        <ownedOperation xmi:id="_f3tPKoMJEeWhJIXHrNBLtw" name="is_eligible_income_for_AC" isQuery="true" postcondition="_f3tPLIMJEeWhJIXHrNBLtw">
          <eAnnotations xmi:id="_f3tPK4MJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_f3tPLIMJEeWhJIXHrNBLtw" name="is_eligible_income_for_AC" constrainedElement="_f3tPKoMJEeWhJIXHrNBLtw">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3tPLYMJEeWhJIXHrNBLtw">
              <language>OCL</language>
              <body>if IN_income.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or&#xA;&#x9;IN_income.income_type.oclIsTypeOf(Income_Concepts::Independent_Professional_Services_Income) or&#xA;&#x9;IN_income.income_type.oclIsTypeOf(Income_Concepts::Agriculture_and_Forestry_Income) or&#xA;&#x9;IN_income.income_type.oclIsTypeOf(Income_Concepts::Trade_and_Business_Income) then&#xA;&#x9;result = true&#xA;else&#xA;&#x9;result=false&#xA;endif&#xA; </body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_f3tPLoMJEeWhJIXHrNBLtw" name="IN_income" type="_f3sqJ4MJEeWhJIXHrNBLtw"/>
          <ownedParameter xmi:id="_f3tPL4MJEeWhJIXHrNBLtw" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_f3tPMIMJEeWhJIXHrNBLtw" name="is_eligible_income_for_AC_assisting_spouse" isQuery="true" postcondition="_f3tPMoMJEeWhJIXHrNBLtw">
          <eAnnotations xmi:id="_f3tPMYMJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_f3tPMoMJEeWhJIXHrNBLtw" name="is_eligible_income_for_AC_assisting_spouse" constrainedElement="_f3tPMIMJEeWhJIXHrNBLtw">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3tPM4MJEeWhJIXHrNBLtw">
              <language>OCL</language>
              <body>if  IN_income.income_type.oclIsTypeOf(Income_Concepts::Independent_Professional_Services_Income) or&#xA;&#x9;IN_income.income_type.oclIsTypeOf(Income_Concepts::Trade_and_Business_Income) then&#xA;&#x9;result = true&#xA;else&#xA;&#x9;result=false&#xA;endif&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_f3tPNIMJEeWhJIXHrNBLtw" name="IN_income" type="_f3sqJ4MJEeWhJIXHrNBLtw"/>
          <ownedParameter xmi:id="_f3tPNYMJEeWhJIXHrNBLtw" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3tPNoMJEeWhJIXHrNBLtw" name="DS_for_Permanent_Expense">
        <generalization xmi:id="_f3tPN4MJEeWhJIXHrNBLtw" general="_f3tPaYMJEeWhJIXHrNBLtw"/>
        <ownedAttribute xmi:id="_f3tPOIMJEeWhJIXHrNBLtw" name="permanent_expense_category" visibility="public" type="_f3sqpYMJEeWhJIXHrNBLtw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3tPOYMJEeWhJIXHrNBLtw" name="DS_for_Interest_Expense">
        <generalization xmi:id="_f3tPOoMJEeWhJIXHrNBLtw" general="_f3tPaYMJEeWhJIXHrNBLtw"/>
        <ownedOperation xmi:id="_f3tPO4MJEeWhJIXHrNBLtw" name="compute_maximum_deductible_amount" isQuery="true" postcondition="_f3tPPYMJEeWhJIXHrNBLtw">
          <eAnnotations xmi:id="_f3tPPIMJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_f3tPPYMJEeWhJIXHrNBLtw" name="maximum_deductible_amount" constrainedElement="_f3tPO4MJEeWhJIXHrNBLtw">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3tPPoMJEeWhJIXHrNBLtw">
              <language>OCL</language>
              <body>result = 1 and&#xA;self.maximum_deductible_amount = 1&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_f3tPP4MJEeWhJIXHrNBLtw" name="result" isOrdered="true" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_f3tPQIMJEeWhJIXHrNBLtw" name="IN_children_with_allowances" type="_f3spJYMJEeWhJIXHrNBLtw">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3tPQYMJEeWhJIXHrNBLtw" value="*"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3tPQoMJEeWhJIXHrNBLtw"/>
          </ownedParameter>
          <ownedParameter xmi:id="_f3tPQ4MJEeWhJIXHrNBLtw" name="IN_legal_union" type="_f3spWIMJEeWhJIXHrNBLtw">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3tPRIMJEeWhJIXHrNBLtw" value="*"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3tPRYMJEeWhJIXHrNBLtw"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3tPRoMJEeWhJIXHrNBLtw" name="DS_for_Health_and_Pension_Insurance">
        <generalization xmi:id="_f3tPR4MJEeWhJIXHrNBLtw" general="_f3tPaYMJEeWhJIXHrNBLtw"/>
        <ownedAttribute xmi:id="_f3tPSIMJEeWhJIXHrNBLtw" name="insurance_category" visibility="public" type="_f3sqroMJEeWhJIXHrNBLtw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3tPSYMJEeWhJIXHrNBLtw" name="DS_for_Private_Insurance_and_Plan">
        <generalization xmi:id="_f3tPSoMJEeWhJIXHrNBLtw" general="_f3tPaYMJEeWhJIXHrNBLtw"/>
        <ownedAttribute xmi:id="_f3tPS4MJEeWhJIXHrNBLtw" name="private_insurance_and_plan_category" visibility="public" type="_f3sqqIMJEeWhJIXHrNBLtw"/>
        <ownedAttribute xmi:id="_f3tPTIMJEeWhJIXHrNBLtw" name="increase_for_life_insurance" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tPTYMJEeWhJIXHrNBLtw" name="maximum_deductible_amount_for_private_insurance" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tPToMJEeWhJIXHrNBLtw" name="maximum_deductible_amount_for_old_age_pension_plan" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_f3tPT4MJEeWhJIXHrNBLtw" name="compute_increase_for_life_insurance" isQuery="true" postcondition="_f3tPUYMJEeWhJIXHrNBLtw">
          <eAnnotations xmi:id="_f3tPUIMJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_f3tPUYMJEeWhJIXHrNBLtw" name="get_increase_for_life_insurance" constrainedElement="_f3tPT4MJEeWhJIXHrNBLtw">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3tPUoMJEeWhJIXHrNBLtw">
              <language>OCL</language>
              <body>result = 1&#xA;and self.increase_for_life_insurance = 1&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_f3tPU4MJEeWhJIXHrNBLtw" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_f3tPVIMJEeWhJIXHrNBLtw" name="compute_maximum_deductible_amount_for_private_insruance" isQuery="true" postcondition="_f3tPVoMJEeWhJIXHrNBLtw">
          <eAnnotations xmi:id="_f3tPVYMJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_f3tPVoMJEeWhJIXHrNBLtw" name="get_maximum_deductible_amount_for_private_insurance" constrainedElement="_f3tPVIMJEeWhJIXHrNBLtw">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3tPV4MJEeWhJIXHrNBLtw">
              <language>OCL</language>
              <body>self.maximum_deductible_amount_for_private_insurance = 1&#xA;</body>
            </specification>
          </ownedRule>
        </ownedOperation>
        <ownedOperation xmi:id="_f3tPWIMJEeWhJIXHrNBLtw" name="compute_maximum_deductible_amount_for_old_age_pension_plan" isQuery="true" postcondition="_f3tPWoMJEeWhJIXHrNBLtw">
          <eAnnotations xmi:id="_f3tPWYMJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_f3tPWoMJEeWhJIXHrNBLtw" name="maximum_deductible_amount_for_old_age_pension_plan" constrainedElement="_f3tPWIMJEeWhJIXHrNBLtw">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3tPW4MJEeWhJIXHrNBLtw">
              <language>OCL</language>
              <body>maximum_deductible_amount_for_old_age_pension_plan = 1&#xA;</body>
            </specification>
          </ownedRule>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3tPXIMJEeWhJIXHrNBLtw" name="DS_for_Loss_Carryforward">
        <generalization xmi:id="_f3tPXYMJEeWhJIXHrNBLtw" general="_f3tPaYMJEeWhJIXHrNBLtw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3tPXoMJEeWhJIXHrNBLtw" name="DS_for_Donation">
        <generalization xmi:id="_f3tPX4MJEeWhJIXHrNBLtw" general="_f3tPaYMJEeWhJIXHrNBLtw"/>
        <ownedOperation xmi:id="_f3tPYIMJEeWhJIXHrNBLtw" name="compute_maximum_deductible_amount_for_donation" isQuery="true" postcondition="_f3tPYoMJEeWhJIXHrNBLtw">
          <eAnnotations xmi:id="_f3tPYYMJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_f3tPYoMJEeWhJIXHrNBLtw" name="maximum_deductible_amount" constrainedElement="_f3tPYIMJEeWhJIXHrNBLtw">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_f3tPY4MJEeWhJIXHrNBLtw">
              <language>OCL</language>
              <body>if IN_maximum_percentage = Constants::MAXIMUM_DEDUCTIBLE_PERCENTAGE_FOR_DONATIONS then&#xA;&#x9;self.maximum_deductible_amount = IN_maximum_percentage.oclAsType(Integer)/100 * IN_total_tax_payer_income&#xA;else&#xA;&#x9;false&#xA;endif&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_f3tPZIMJEeWhJIXHrNBLtw" name="IN_maximum_percentage" type="_f3srBYMJEeWhJIXHrNBLtw"/>
          <ownedParameter xmi:id="_f3tPZYMJEeWhJIXHrNBLtw" name="IN_total_tax_payer_income">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_f3tPZoMJEeWhJIXHrNBLtw" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3tPZ4MJEeWhJIXHrNBLtw" name="Professional_Expenses_Deduction">
        <generalization xmi:id="_f3tPaIMJEeWhJIXHrNBLtw" general="_f3tPbYMJEeWhJIXHrNBLtw"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3tPaYMJEeWhJIXHrNBLtw" name="DS">
        <generalization xmi:id="_f3tPaoMJEeWhJIXHrNBLtw" general="_f3tPbYMJEeWhJIXHrNBLtw"/>
        <ownedAttribute xmi:id="_f3tPa4MJEeWhJIXHrNBLtw" name="maximum_deductible_amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_f3tPbIMJEeWhJIXHrNBLtw" name="considers" memberEnd="_f3tPdoMJEeWhJIXHrNBLtw _f3tO5IMJEeWhJIXHrNBLtw"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_f3tPbYMJEeWhJIXHrNBLtw" name="Income_Tax_Deduction">
        <ownedAttribute xmi:id="_f3tPboMJEeWhJIXHrNBLtw" name="tax_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tPb4MJEeWhJIXHrNBLtw" name="daily" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tPcIMJEeWhJIXHrNBLtw" name="monthly" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tPcYMJEeWhJIXHrNBLtw" name="yearly" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tPcoMJEeWhJIXHrNBLtw" name="tax_Payer" visibility="private" type="_f3spkYMJEeWhJIXHrNBLtw" association="_f3sq94MJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3tPc4MJEeWhJIXHrNBLtw" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3tPdIMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tPdYMJEeWhJIXHrNBLtw" name="deductible_amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tPdoMJEeWhJIXHrNBLtw" name="tax_card" visibility="private" type="_f3srNYMJEeWhJIXHrNBLtw" association="_f3tPbIMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3tPd4MJEeWhJIXHrNBLtw" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3tPeIMJEeWhJIXHrNBLtw"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_f3tPeYMJEeWhJIXHrNBLtw" name="expenses" visibility="private" type="_f3sqs4MJEeWhJIXHrNBLtw" association="_f3tPfIMJEeWhJIXHrNBLtw">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_f3tPeoMJEeWhJIXHrNBLtw" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_f3tPe4MJEeWhJIXHrNBLtw" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_f3tPfIMJEeWhJIXHrNBLtw" name="is computed based on" memberEnd="_f3tPeYMJEeWhJIXHrNBLtw _f3sqwYMJEeWhJIXHrNBLtw"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="_f3tPfYMJEeWhJIXHrNBLtw" name="Interface1"/>
    <packagedElement xmi:type="uml:DataType" xmi:id="_f3tPfoMJEeWhJIXHrNBLtw" name="DataType1"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_f3tPf4MJEeWhJIXHrNBLtw" name="Class1"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_f3tPgIMJEeWhJIXHrNBLtw" name="Class2"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_f3tPgYMJEeWhJIXHrNBLtw" name="Class3"/>
    <profileApplication xmi:id="_f3tPgoMJEeWhJIXHrNBLtw">
      <eAnnotations xmi:id="_f3tPg4MJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://UML_PROFILES/Standard.profile.uml#_yzU58YinEdqtvbnfB2L_5w"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_PROFILES/Standard.profile.uml#_0"/>
    </profileApplication>
    <profileApplication xmi:id="_f3tPhIMJEeWhJIXHrNBLtw">
      <eAnnotations xmi:id="_f3tPhYMJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="Default.profile.uml#_f30k8oMJEeWhJIXHrNBLtw"/>
      </eAnnotations>
      <appliedProfile href="Default.profile.uml#_f30k8IMJEeWhJIXHrNBLtw"/>
    </profileApplication>
    <profileApplication xmi:id="_f3tPhoMJEeWhJIXHrNBLtw">
      <eAnnotations xmi:id="_f3tPh4MJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="Deployment.profile.uml#_f2ZoNoMJEeWhJIXHrNBLtw"/>
      </eAnnotations>
      <appliedProfile href="Deployment.profile.uml#_f2ZoNIMJEeWhJIXHrNBLtw"/>
    </profileApplication>
    <profileApplication xmi:id="_f3tPiIMJEeWhJIXHrNBLtw">
      <eAnnotations xmi:id="_f3tPiYMJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="MARTE_VSL.profile.uml#_f2a2RYMJEeWhJIXHrNBLtw"/>
      </eAnnotations>
      <appliedProfile href="MARTE_VSL.profile.uml#_f2a2Q4MJEeWhJIXHrNBLtw"/>
    </profileApplication>
    <profileApplication xmi:id="_f3tPioMJEeWhJIXHrNBLtw">
      <eAnnotations xmi:id="_f3tPi4MJEeWhJIXHrNBLtw" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="MARTE_Time.profile.uml#_f2csMIMJEeWhJIXHrNBLtw"/>
      </eAnnotations>
      <appliedProfile href="MARTE_Time.profile.uml#_f2csLoMJEeWhJIXHrNBLtw"/>
    </profileApplication>
  </uml:Package>
  <Default:Documentation xmi:id="_f3tPjIMJEeWhJIXHrNBLtw" base_Comment="_f3sqCoMJEeWhJIXHrNBLtw"/>
  <Default:Documentation xmi:id="_f3tPjYMJEeWhJIXHrNBLtw" base_Comment="_f3spWYMJEeWhJIXHrNBLtw"/>
</xmi:XMI>
