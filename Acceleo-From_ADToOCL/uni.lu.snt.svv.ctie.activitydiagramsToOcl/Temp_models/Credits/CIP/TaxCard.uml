<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.1" xmlns:xmi="http://schema.omg.org/spec/XMI/2.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:Default="http:///schemas/Default/_fNm3AAqoEd6-N_NOT9vsCA/2" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/3.0.0/UML" xsi:schemaLocation="http:///schemas/Default/_fNm3AAqoEd6-N_NOT9vsCA/2 Default.profile.uml#_S5vvsXMbEeWPJ7lHGUXAWg">
  <uml:Package xmi:id="_S5sFMHMbEeWPJ7lHGUXAWg" name="TaxCard">
    <packageImport xmi:id="_S5sFMXMbEeWPJ7lHGUXAWg">
      <importedPackage xmi:type="uml:Model" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#_0"/>
    </packageImport>
    <packageImport xmi:id="_S5sFMnMbEeWPJ7lHGUXAWg">
      <importedPackage xmi:type="uml:Model" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#_0"/>
    </packageImport>
    <packageImport xmi:id="_S5sFM3MbEeWPJ7lHGUXAWg">
      <importedPackage xmi:type="uml:Model" href="MARTELibrary.uml#_S8C18HMbEeWPJ7lHGUXAWg"/>
    </packageImport>
    <packagedElement xmi:type="uml:Package" xmi:id="_S5sFNHMbEeWPJ7lHGUXAWg" name="Tax_Card_Domain">
      <packageImport xmi:id="_S5sFNXMbEeWPJ7lHGUXAWg" importedPackage="_S5tTkXMbEeWPJ7lHGUXAWg"/>
      <packageImport xmi:id="_S5sFNnMbEeWPJ7lHGUXAWg" importedPackage="_S5sFO3MbEeWPJ7lHGUXAWg"/>
      <packageImport xmi:id="_S5sFN3MbEeWPJ7lHGUXAWg" importedPackage="_S5tTe3MbEeWPJ7lHGUXAWg"/>
      <packageImport xmi:id="_S5sFOHMbEeWPJ7lHGUXAWg" importedPackage="_S5ssdHMbEeWPJ7lHGUXAWg"/>
      <packageImport xmi:id="_S5sFOXMbEeWPJ7lHGUXAWg" importedPackage="_S5sstHMbEeWPJ7lHGUXAWg"/>
      <packageImport xmi:id="_S5sFOnMbEeWPJ7lHGUXAWg" importedPackage="_S5stonMbEeWPJ7lHGUXAWg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_S5sFO3MbEeWPJ7lHGUXAWg" name="Tax_Payer_Concepts">
      <packagedElement xmi:type="uml:Association" xmi:id="_S5sFPHMbEeWPJ7lHGUXAWg" name="taxed under" memberEnd="_S5sF73MbEeWPJ7lHGUXAWg _S5ssZXMbEeWPJ7lHGUXAWg"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5sFPXMbEeWPJ7lHGUXAWg" name="Income_Tax">
        <ownedAttribute xmi:id="_S5sFPnMbEeWPJ7lHGUXAWg" name="taxPayer" visibility="private" type="_S5sFuHMbEeWPJ7lHGUXAWg" association="_S5ssYnMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5sFP3MbEeWPJ7lHGUXAWg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5sFQHMbEeWPJ7lHGUXAWg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sFQXMbEeWPJ7lHGUXAWg" name="tax_amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sFQnMbEeWPJ7lHGUXAWg" name="tax_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_S8C2cXMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5sFQ3MbEeWPJ7lHGUXAWg" name="Address">
        <ownedAttribute xmi:id="_S5sFRHMbEeWPJ7lHGUXAWg" name="taxPayer" visibility="private" type="_S5sFkXMbEeWPJ7lHGUXAWg" association="_S5ssWXMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5sFRXMbEeWPJ7lHGUXAWg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5sFRnMbEeWPJ7lHGUXAWg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sFR3MbEeWPJ7lHGUXAWg" name="country" visibility="public" type="_S5stOnMbEeWPJ7lHGUXAWg">
          <defaultValue xmi:type="uml:InstanceValue" xmi:id="_S5sFSHMbEeWPJ7lHGUXAWg" name="LU" type="_S5stOnMbEeWPJ7lHGUXAWg" instance="_S5stO3MbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sFSXMbEeWPJ7lHGUXAWg" name="street" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sFSnMbEeWPJ7lHGUXAWg" name="zipCode" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sFS3MbEeWPJ7lHGUXAWg" name="city" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5sFTHMbEeWPJ7lHGUXAWg" name="Dependent">
        <generalization xmi:id="_S5sFTXMbEeWPJ7lHGUXAWg" general="_S5sFkXMbEeWPJ7lHGUXAWg"/>
        <ownedAttribute xmi:id="_S5sFTnMbEeWPJ7lHGUXAWg" name="dependent_type" visibility="public" type="_S5stX3MbEeWPJ7lHGUXAWg"/>
        <ownedAttribute xmi:id="_S5sFT3MbEeWPJ7lHGUXAWg" name="household" visibility="private" type="_S5sFeHMbEeWPJ7lHGUXAWg" association="_S5ssYHMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5sFUHMbEeWPJ7lHGUXAWg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5sFUXMbEeWPJ7lHGUXAWg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sFUnMbEeWPJ7lHGUXAWg" name="responsible_person" visibility="private" type="_S5sFuHMbEeWPJ7lHGUXAWg" association="_S5ssX3MbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5sFU3MbEeWPJ7lHGUXAWg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5sFVHMbEeWPJ7lHGUXAWg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sFVXMbEeWPJ7lHGUXAWg" name="continued_studies" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_S5sFVnMbEeWPJ7lHGUXAWg">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sFV3MbEeWPJ7lHGUXAWg" name="expense" visibility="private" type="_S5stIXMbEeWPJ7lHGUXAWg" association="_S5ssYXMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5sFWHMbEeWPJ7lHGUXAWg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5sFWXMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sFWnMbEeWPJ7lHGUXAWg" name="tax_Payer" visibility="private" type="_S5sFuHMbEeWPJ7lHGUXAWg" association="_S5ssXnMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5sFW3MbEeWPJ7lHGUXAWg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5sFXHMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_S5sFXXMbEeWPJ7lHGUXAWg" name="compute_if_dependent_receives_allowances_eligible_for_CIM" isQuery="true">
          <eAnnotations xmi:id="_S5sFXnMbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_S5sFX3MbEeWPJ7lHGUXAWg" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S5sFYHMbEeWPJ7lHGUXAWg" name="compute_if_dependent_receives_allowances_eligible_for_DS" isQuery="true">
          <eAnnotations xmi:id="_S5sFYXMbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_S5sFYnMbEeWPJ7lHGUXAWg" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S5sFY3MbEeWPJ7lHGUXAWg" name="compute_if_dependent_receives_allowances_eligible_for_CE_dependance_and_care" isQuery="true">
          <eAnnotations xmi:id="_S5sFZHMbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_S5sFZXMbEeWPJ7lHGUXAWg" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S5sFZnMbEeWPJ7lHGUXAWg" name="is_dependent_following_continued_studies" isQuery="true" postcondition="_S5sFaHMbEeWPJ7lHGUXAWg">
          <eAnnotations xmi:id="_S5sFZ3MbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_S5sFaHMbEeWPJ7lHGUXAWg" name="is_dependent_following_continued_studies" constrainedElement="_S5sFZnMbEeWPJ7lHGUXAWg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5sFaXMbEeWPJ7lHGUXAWg">
              <language>OCL</language>
              <body>self.continued_studies = IN_continued_studies&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_S5sFanMbEeWPJ7lHGUXAWg" name="IN_continued_studies">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S5sFa3MbEeWPJ7lHGUXAWg" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5sFbHMbEeWPJ7lHGUXAWg" name="External_Allowance">
        <ownedAttribute xmi:id="_S5sFbXMbEeWPJ7lHGUXAWg" name="amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sFbnMbEeWPJ7lHGUXAWg" name="grantor" visibility="public" type="_S5stMnMbEeWPJ7lHGUXAWg"/>
        <ownedAttribute xmi:id="_S5sFb3MbEeWPJ7lHGUXAWg" name="person" visibility="private" type="_S5sFkXMbEeWPJ7lHGUXAWg" association="_S5ssWnMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5sFcHMbEeWPJ7lHGUXAWg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5sFcXMbEeWPJ7lHGUXAWg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sFcnMbEeWPJ7lHGUXAWg" name="valid_from_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_S8C2cXMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sFc3MbEeWPJ7lHGUXAWg" name="valid_until_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_S8C2cXMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5sFdHMbEeWPJ7lHGUXAWg" name="Fiscal_Address">
        <generalization xmi:id="_S5sFdXMbEeWPJ7lHGUXAWg" general="_S5sFQ3MbEeWPJ7lHGUXAWg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5sFdnMbEeWPJ7lHGUXAWg" name="Habitual_Address">
        <generalization xmi:id="_S5sFd3MbEeWPJ7lHGUXAWg" general="_S5sFQ3MbEeWPJ7lHGUXAWg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5sFeHMbEeWPJ7lHGUXAWg" name="Household">
        <ownedAttribute xmi:id="_S5sFeXMbEeWPJ7lHGUXAWg" name="tax_Payer" visibility="private" type="_S5sFuHMbEeWPJ7lHGUXAWg" association="_S5ssXXMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5sFenMbEeWPJ7lHGUXAWg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5sFe3MbEeWPJ7lHGUXAWg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sFfHMbEeWPJ7lHGUXAWg" name="dependent" visibility="private" type="_S5sFTHMbEeWPJ7lHGUXAWg" association="_S5ssYHMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5sFfXMbEeWPJ7lHGUXAWg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5sFfnMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5sFf3MbEeWPJ7lHGUXAWg" name="Legal_Union_Record">
        <ownedComment xmi:id="_S5sFgHMbEeWPJ7lHGUXAWg" annotatedElement="_S5sFf3MbEeWPJ7lHGUXAWg">
          <body>&lt;p>&lt;span style=&quot;font-size:16pt;&quot;>When&amp;nbsp;a&amp;nbsp;decision&amp;nbsp;for&amp;nbsp;Dates&amp;nbsp;would&amp;nbsp;be&amp;nbsp;taken,&amp;nbsp;&lt;/span>&lt;/p>&lt;p>&lt;span style=&quot;font-size:16pt;&quot;>we&amp;nbsp;must&amp;nbsp;take&amp;nbsp;into&amp;nbsp;account&amp;nbsp;that&amp;nbsp;all&amp;nbsp;marriages&amp;nbsp;and&amp;nbsp;partnerships&amp;nbsp;are&amp;nbsp;mutually&amp;nbsp;exclusive.&lt;/span>&lt;/p></body>
        </ownedComment>
        <ownedRule xmi:id="_S5sFgXMbEeWPJ7lHGUXAWg" name="Legal_Union-different_people-constraint" constrainedElement="_S5sFf3MbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5sFgnMbEeWPJ7lHGUXAWg">
            <language>OCL</language>
            <body>if self.end_date.oclIsUndefined() then&#xA;/**LEGAL UNION IS VALID**/&#xA;self.individual_A.SSNo &lt;> self.individual_B.SSNo&#xA;and&#xA;self.individual_A->size()=1 and&#xA;self.individual_B->size()=1&#xA;else&#xA;/**LEGAL UNION IS AUTHORIZED WITH ONLY ONE PERSON**/&#xA;false&#xA;endif&#xA;</body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:id="_S5sFg3MbEeWPJ7lHGUXAWg" name="start_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_S8C2cXMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sFhHMbEeWPJ7lHGUXAWg" name="end_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_S8C2cXMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sFhXMbEeWPJ7lHGUXAWg" name="individual_A" visibility="private" type="_S5sFkXMbEeWPJ7lHGUXAWg" association="_S5ssXHMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5sFhnMbEeWPJ7lHGUXAWg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5sFh3MbEeWPJ7lHGUXAWg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sFiHMbEeWPJ7lHGUXAWg" name="individual_B" visibility="private" type="_S5sFkXMbEeWPJ7lHGUXAWg" association="_S5ssW3MbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5sFiXMbEeWPJ7lHGUXAWg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5sFinMbEeWPJ7lHGUXAWg" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5sFi3MbEeWPJ7lHGUXAWg" name="Marriage_Record">
        <generalization xmi:id="_S5sFjHMbEeWPJ7lHGUXAWg" general="_S5sFf3MbEeWPJ7lHGUXAWg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5sFjXMbEeWPJ7lHGUXAWg" name="Non_Resident_Tax_Payer">
        <generalization xmi:id="_S5sFjnMbEeWPJ7lHGUXAWg" general="_S5sFuHMbEeWPJ7lHGUXAWg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5sFj3MbEeWPJ7lHGUXAWg" name="Partnership_Record">
        <generalization xmi:id="_S5sFkHMbEeWPJ7lHGUXAWg" general="_S5sFf3MbEeWPJ7lHGUXAWg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5sFkXMbEeWPJ7lHGUXAWg" name="Physical_Person">
        <ownedAttribute xmi:id="_S5sFknMbEeWPJ7lHGUXAWg" name="name" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sFk3MbEeWPJ7lHGUXAWg" name="is_assisting_spouse" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sFlHMbEeWPJ7lHGUXAWg" name="SSNo" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sFlXMbEeWPJ7lHGUXAWg" name="allowances" visibility="private" type="_S5sFbHMbEeWPJ7lHGUXAWg" association="_S5ssWnMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5sFlnMbEeWPJ7lHGUXAWg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5sFl3MbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sFmHMbEeWPJ7lHGUXAWg" name="addresses" visibility="private" type="_S5sFQ3MbEeWPJ7lHGUXAWg" association="_S5ssWXMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5sFmXMbEeWPJ7lHGUXAWg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5sFmnMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sFm3MbEeWPJ7lHGUXAWg" name="legal_union_A" visibility="private" type="_S5sFf3MbEeWPJ7lHGUXAWg" association="_S5ssXHMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5sFnHMbEeWPJ7lHGUXAWg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5sFnXMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sFnnMbEeWPJ7lHGUXAWg" name="legal_union_B" visibility="private" type="_S5sFf3MbEeWPJ7lHGUXAWg" association="_S5ssW3MbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5sFn3MbEeWPJ7lHGUXAWg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5sFoHMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sFoXMbEeWPJ7lHGUXAWg" name="age" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sFonMbEeWPJ7lHGUXAWg" name="disability_percentage" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_S5sFo3MbEeWPJ7lHGUXAWg">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sFpHMbEeWPJ7lHGUXAWg" name="is_affiliated_personnaly_to_social_security" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_S5sFpXMbEeWPJ7lHGUXAWg" name="is_separated_from" isQuery="true">
          <eAnnotations xmi:id="_S5sFpnMbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_S5sFp3MbEeWPJ7lHGUXAWg" key="computaion"/>
          </eAnnotations>
          <ownedParameter xmi:id="_S5sFqHMbEeWPJ7lHGUXAWg" name="IN_person" type="_S5sFkXMbEeWPJ7lHGUXAWg"/>
          <ownedParameter xmi:id="_S5sFqXMbEeWPJ7lHGUXAWg" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S5sFqnMbEeWPJ7lHGUXAWg" name="is_person_assisting_spouse" isQuery="true" postcondition="_S5sFrHMbEeWPJ7lHGUXAWg">
          <eAnnotations xmi:id="_S5sFq3MbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_S5sFrHMbEeWPJ7lHGUXAWg" name="is_assisting_spouse" constrainedElement="_S5sFqnMbEeWPJ7lHGUXAWg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5sFrXMbEeWPJ7lHGUXAWg">
              <language>OCL</language>
              <body>self.is_assisting_spouse = IN_assisting_spouse&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_S5sFrnMbEeWPJ7lHGUXAWg" name="IN_assisting_spouse">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S5sFr3MbEeWPJ7lHGUXAWg" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S5sFsHMbEeWPJ7lHGUXAWg" name="is_person_affiliated_personnaly_to_social_security" isQuery="true" postcondition="_S5sFsnMbEeWPJ7lHGUXAWg">
          <eAnnotations xmi:id="_S5sFsXMbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_S5sFsnMbEeWPJ7lHGUXAWg" name="is_person_affiliated_personnaly_affiliated_to_social_security" constrainedElement="_S5sFsHMbEeWPJ7lHGUXAWg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5sFs3MbEeWPJ7lHGUXAWg">
              <language>OCL</language>
              <body>self.is_affiliated_personnaly_to_social_security = IN_personnaly_affiliated&#xA;&#xA;&#xA;&#xA;&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_S5sFtHMbEeWPJ7lHGUXAWg" name="IN_personnaly_affiliated">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S5sFtXMbEeWPJ7lHGUXAWg" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5sFtnMbEeWPJ7lHGUXAWg" name="Resident_Tax_Payer">
        <generalization xmi:id="_S5sFt3MbEeWPJ7lHGUXAWg" general="_S5sFuHMbEeWPJ7lHGUXAWg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5sFuHMbEeWPJ7lHGUXAWg" name="Tax_Payer">
        <ownedRule xmi:id="_S5sFuXMbEeWPJ7lHGUXAWg" name="NonResidentTaxPayer-constraint" constrainedElement="_S5sFjXMbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5sFunMbEeWPJ7lHGUXAWg">
            <language>OCL</language>
            <body>&#x9;self.addresses->exists( fiscal_add:Address | &#xA;&#x9;&#x9;fiscal_add.oclIsTypeOf(Fiscal_Address) and fiscal_add.country&lt;>Country::LU) and&#xA;&#x9;self.addresses->exists( hab_add:Address | &#xA;&#x9;&#x9;hab_add.oclIsTypeOf(Habitual_Address) and hab_add.country&lt;>Country::LU) and&#xA;&#x9;self.incomes->exists(inc:Income_Concepts::Income | inc.oclIsTypeOf(Income_Concepts::Local_Income))&#xA;implies&#xA;&#x9;self.oclIsTypeOf(Non_Resident_Tax_Payer)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_S5sFu3MbEeWPJ7lHGUXAWg" name="ResidentTaxPayer-constraint" constrainedElement="_S5sFtnMbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5sFvHMbEeWPJ7lHGUXAWg">
            <language>OCL</language>
            <body>&#x9;self.addresses->exists( fiscal_add:Address | &#xA;&#x9;&#x9;fiscal_add.oclIsTypeOf(Fiscal_Address) and fiscal_add.country=Country::LU) or&#xA;&#x9;self.addresses->exists( hab_add:Address | &#xA;&#x9;&#x9;hab_add.oclIsTypeOf(Habitual_Address) and hab_add.country=Country::LU) &#xA;implies&#xA;&#x9;self.oclIsTypeOf(Resident_Tax_Payer)</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_S5sFvXMbEeWPJ7lHGUXAWg" name="SubjectToIncomeTax-constraint" constrainedElement="_S5sFuHMbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5sFvnMbEeWPJ7lHGUXAWg" name="subjectToIncomeTax ">
            <language>OCL</language>
            <body>&#x9;self.incomes->exists(inc:Income_Concepts::Income |&#xA;&#x9;&#x9; inc.oclIsTypeOf(Income_Concepts::Local_Income) or inc.oclIsTypeOf(Income_Concepts::Foreign_Income))&#xA;implies&#xA;&#x9;not self.incomeTax->isEmpty()&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_S5sFv3MbEeWPJ7lHGUXAWg" name="TaxCredit-CIS-constraint" constrainedElement="_S5sFuHMbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5sFwHMbEeWPJ7lHGUXAWg">
            <language>OCL</language>
            <body>let   employement_income: Set(Income_Concepts::Income) = &#xA;      &#x9;self.incomes->select(inc|&#xA;      &#x9;&#x9;inc.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;not inc.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;   &#x9;   &#x9;&#x9;inc.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) and&#xA;       &#x9;&#x9;inc.start_date_within_taxation_year=self.incomeTax.tax_year),&#xA;       &#x9;total_income: Integer = employement_income.income_amount->sum(),&#xA;&#x9;&#x9;tax_liability :Integer = employement_income.tax_liability->sum() in&#xA;&#x9;&#x9;&#x9; &#x9;&#x9; &#xA;&#x9;&#x9;&#xA;&#x9;if(employement_income->size()>0) then&#xA;&#x9;&#x9; if (total_income>936*tax_liability) then&#xA;&#x9;&#x9; let set_of_CIS: Set(Income_Tax_Credit_Concepts::Income_Tax_Credit) = self.income_Tax_Credit->select(type|type.oclIsTypeOf(Income_Tax_Credit_Concepts::CIS) and type.tax_year=self.incomeTax.tax_year),&#xA;&#x9;&#x9;&#x9;size_set_of_CIS :Integer = set_of_CIS->size(),&#xA;&#x9;&#x9;&#x9; a_CIS: Income_Tax_Credit_Concepts::Income_Tax_Credit = set_of_CIS->any(true) in&#xA;&#x9; &#x9;    &#xA;&#x9; &#x9;    size_set_of_CIS = 1 and&#xA;&#x9;&#x9;&#x9;/**CIS IS CREDITED TO THE TAX PAYER**/&#xA;&#x9;&#x9;&#x9;a_CIS.yearly = Constants::FLAT_RATE_CIS_YEARLY.oclAsType(Integer)*tax_liability&#xA;      &#x9;else&#xA;      &#x9;&#x9;/**ERROR CIS CANNOT BE CREDITED**/&#xA;      &#x9;&#x9;false&#xA;      &#x9;endif&#x9;&#xA;     else&#xA;     &#x9;false&#xA;     endif&#xA;  &#xA;    </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_S5sFwXMbEeWPJ7lHGUXAWg" name="TaxCredit-CIP-constraint" constrainedElement="_S5sFuHMbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5sFwnMbEeWPJ7lHGUXAWg">
            <language>OCL</language>
            <body>let   employement_income: Set(Income_Concepts::Income) = &#xA;      &#x9;self.incomes->select(inc|&#xA;      &#x9;&#x9;inc.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;not inc.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;   &#x9;   &#x9;&#x9;inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) and&#xA;       &#x9;&#x9;inc.start_date_within_taxation_year=self.incomeTax.tax_year),&#xA;       &#x9;total_income: Integer = employement_income.income_amount->sum(),&#xA;&#x9;&#x9;tax_liability :Integer = employement_income.tax_liability->sum() in&#xA;&#x9;&#x9;&#x9; &#x9;&#x9; &#xA;&#x9;if(employement_income->size()>0) then&#xA;&#x9;&#x9; if (total_income>936*tax_liability) then&#xA;&#x9;&#x9; let set_of_CIP: Set(Income_Tax_Credit_Concepts::Income_Tax_Credit) = self.income_Tax_Credit->select(type|type.oclIsTypeOf(Income_Tax_Credit_Concepts::CIP) and type.tax_year=self.incomeTax.tax_year),&#xA;&#x9;&#x9;&#x9;size_set_of_CIP :Integer = set_of_CIP->size(),&#xA;&#x9;&#x9;&#x9; a_CIP: Income_Tax_Credit_Concepts::Income_Tax_Credit = set_of_CIP->any(true) in&#xA;&#x9; &#x9;    &#xA;&#x9; &#x9;    size_set_of_CIP = 1 and&#xA;&#x9;&#x9;&#x9;/**CIP IS CREDITED TO THE TAX PAYER**/&#xA;&#x9;&#x9;&#x9;a_CIP.yearly = Constants::FLAT_RATE_CIP_YEARLY.oclAsType(Integer) *tax_liability&#xA;      &#x9;else&#xA;      &#x9;&#x9;/**ERROR CIP CANNOT BE CREDITED**/&#xA;      &#x9;&#x9;false&#xA;      &#x9;endif&#x9;&#xA;     else&#xA;     &#x9;false&#xA;     endif&#xA;      &#x9;&#xA;      &#x9;&#xA;    </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_S5sFw3MbEeWPJ7lHGUXAWg" name="TaxCredit-CIM-constraint" constrainedElement="_S5sFuHMbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5sFxHMbEeWPJ7lHGUXAWg">
            <language>OCL</language>
            <body>let&#xA; a_CIM : Income_Tax_Credit_Concepts::CIM = self.income_Tax_Credit->select(c | c.oclIsTypeOf(Income_Tax_Credit_Concepts::CIM) and c.tax_year = self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Credit_Concepts::CIM),&#xA; current_employement_income: Set(Income_Concepts::Income) = self.incomes->select(inc|&#xA;      &#x9;&#x9;inc.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;(inc.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)) and&#xA;      &#x9;&#x9;inc.start_date_within_taxation_year=self.incomeTax.tax_year) ,&#xA;      &#x9;&#x9;&#xA;income_TaxClass1A: Set(Income_Concepts::Income) = &#xA;      &#x9;&#x9;current_employement_income->select(inc|&#xA;      &#x9;&#x9;      &#x9;&#x9;inc.oclAsType(Income_Concepts::Local_Income).tax_card->exists(tc|tc.tax_Class = Tax_Class_Category::One_A)),&#xA;tax_liability : Integer = income_TaxClass1A.tax_liability->sum()&#xA;      &#x9;&#x9;in&#xA;&#xA;       if (current_employement_income->size()>0) then&#xA;&#x9;&#x9;&#x9;if &#x9;(income_TaxClass1A->size()>0) then&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;let child_with_allowances : Set(Dependent) = self.dependents->select(dep:Dependent|dep.dependent_type=Dependent_Type::CHILD and dep.compute_if_dependent_receives_allowances_eligible_for_CIM()=true and&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;dep.allowances->exists(al|al.valid_from_date=self.incomeTax.tax_year and al.valid_until_date = self.incomeTax.tax_year)=true) in&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9; if  child_with_allowances ->size()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CIM ALLOWED**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;a_CIM.yearly= Constants::FLAT_RATE_CIM_YEARLY.oclAsType(Integer) * tax_liability&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9; else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CIM, MISSING CHILD ALLOWANCE**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9; endif&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CIM, NOT TAX CLASS 1A**/&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CIM, NOT ELIGIBLE INCOME*/&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#xA;&#xA;&#x9;&#xA;/**NAVIGATION&#xA;self.tax_class&#xA;self.income_Tax_Credit->&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;self.tax_class&#xA;self.incomeTax.tax_year&#xA;self.incomes&#xA;inc.oclAsType(Income_Concepts::Local_Income).tax_card&#xA;self.incomeTax.tax_year&#xA;self.dependents&#xA;dep.allowances&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;**/</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_S5sFxXMbEeWPJ7lHGUXAWg" name="Legal_Union-monogamus-constraint" constrainedElement="_S5sFuHMbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5sFxnMbEeWPJ7lHGUXAWg">
            <language>OCL</language>
            <body>let legal_union: Set(Legal_Union_Record) = self.legal_union_A->select(couple|couple.end_date->isEmpty()) in&#xA;if (legal_union->size()=1) then&#x9;&#xA;&#x9;/**YOU ARE IN LIGEL UNION WITH ONLY ONE PERSON**/&#xA;&#x9;true&#xA;else&#xA;&#x9;/**ERROR YOU CANNOT BE IN LEGAL UNION WITH MORE THAN ONE PERSON**/&#xA;&#x9;false&#xA;endif&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_S5sFx3MbEeWPJ7lHGUXAWg" name="TaxClass-unique-constraint" constrainedElement="_S5sFuHMbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5sFyHMbEeWPJ7lHGUXAWg">
            <language>OCL</language>
            <body>let tax_classes: Set(Tax_Class) = self.tax_class->select(tax_classe|tax_class.valid_until_date->isEmpty()) in&#xA;if tax_classes->size()=1 then&#x9;&#xA;&#x9;/**ONLY ONE TAX CLASS AT TIME**/&#xA;&#x9;true&#xA;else&#xA;&#x9;/**ERROR YOU CANNOT HAVE SEVERAL TAX CLASSES AT TIME**/&#xA;&#x9;false&#xA;endif</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_S5sFyXMbEeWPJ7lHGUXAWg" name="TaxDeduction-CE-constraint" constrainedElement="_S5sFuHMbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5sFynMbEeWPJ7lHGUXAWg">
            <language>OCL</language>
            <body>let set_of_CE: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::CE) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year),&#xA;&#x9; CE_invalidity:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::INALIDITY_AND_INFIRMITY),&#xA;&#x9; CE_dependence:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD),&#xA;&#x9; CE_child_not_part_of_household:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::CARE_FOR_CHILDREN_NOT_BEING_PART_OF_HOUSEHOLD),&#xA;&#x9; income_subject_to_witholding_tax : Set(Income_Concepts::Income) = self.incomes->select(income|income.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not income.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.start_date_within_taxation_year = self.incomeTax.tax_year),&#xA; &#x9; extraordinary_expenses : &#x9;Set(Expense_Concepts::Expense) = self.expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclIsTypeOf(Expense_Concepts::Extraordinary_Expense_CE)),&#x9;&#xA; &#x9; extraordinary_expense_invalidity_and_infirmity  : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::INALIDITY_AND_INFIRMITY),&#xA; &#x9; extraordinary_expense_dependence_and_care : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD), &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA; &#x9; extraordinary_expense_care_for_children_not_part_of_the_household : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::CARE_FOR_CHILDREN_NOT_BEING_PART_OF_HOUSEHOLD),  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#xA;&#x9; declared_expense:Integer=extraordinary_expenses.declared_amount->sum() in&#xA;&#x9; &#xA;&#x9;if (income_subject_to_witholding_tax->size()>0) then&#xA;&#x9;&#x9;if (extraordinary_expenses->any(true).oclAsType(Expense_Concepts::Extraordinary_Expense_CE).is_above_thresholded_deduction_percentage_for_CE()=true) then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if extraordinary_expense_invalidity_and_infirmity->size()>0 then &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if self.oclIsTypeOf(Resident_Tax_Payer) then&#xA;&#x9;&#x9;&#x9;&#x9;/**CE FOR INVALIDITY AND INFIRMITY ON THE TAX CARD**/&#xA;&#x9;&#x9;&#x9;&#x9;CE_invalidity->size() = 1&#x9;and&#xA;&#x9;&#x9;&#x9;&#x9;CE_invalidity->any(true).deductible_amount = CE_invalidity->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).disability_flat_rate&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if  extraordinary_expense_dependence_and_care ->size()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->size()=1 and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;let &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expenses_for_dependence_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::DEPENDENCE_CARE) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; expenses_for_house_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|expense.expense_purpose=Expense_Purpose::HOUSE_CARE) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; expenses_for_child_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::CHILD_CARE),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;amount_house_care: Integer = expenses_for_house_care.declared_amount->sum(),&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sum_of_expenses:Integer =  expenses_for_child_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.compute_if_dependent_receives_allowances_eligible_for_CE_dependance_and_care() =true and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.dependent_type=Dependent_Type::CHILD and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(expense.dependent.oclAsType(Physical_Person).age&lt;14) or&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.oclAsType(Physical_Person).disability_percentage>0).declared_amount->sum() in&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(expenses_for_child_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CHILD CARE, CHILDREN BEING PART OF THE HOUSHOLD**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(amount_house_care + sum_of_expenses)>Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(expenses_for_dependence_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CLOSE RELATIVE DEPENDENCE CARE**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount = Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer)+ CE_dependence->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).dependent_relative_flat_rate&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;CE_dependence->any(true).deductible_amount = Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(expenses_for_dependence_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CLOSE RELATIVE DEPENDENCE CARE**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount= amount_house_care + sum_of_expenses + CE_dependence->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).dependent_relative_flat_rate&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount= amount_house_care + sum_of_expenses&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif &#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if  CE_child_not_part_of_household->size()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; CE_child_not_part_of_household->size()= 1 and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CARE FOR CHILDREN NOT BEING PART OF THE HOUSEHOLD**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;let&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expenses_for_child_not_part_of_houselod_care: Set(Expense_Concepts::Expense) = self.expenses->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::CHILD_CARE),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;sum_expenses_for_children:Integer = expenses_for_child_not_part_of_houselod_care->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.compute_if_dependent_receives_allowances_eligible_for_CE_dependance_and_care() =false and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;((expense.dependent.age&lt;=21) or&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(expense.dependent.age>21 and expense.dependent.continued_studies=true and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.tax_Payer.incomes.income_amount->sum()&lt;0.6*Constants::MINIMUM_SALARY.oclAsType(Integer)))).declared_amount->sum() in&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(sum_expenses_for_children>Constants::MAXIMUM_CE_RATE_FOR_CHILD_NOT_BEING_PART_OF_HOUSEHOLD.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;CE_child_not_part_of_household->any(true).deductible_amount  = Constants::MAXIMUM_CE_RATE_FOR_CHILD_NOT_BEING_PART_OF_HOUSEHOLD.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_child_not_part_of_household->any(true).deductible_amount = sum_expenses_for_children&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;/*use it to fill the tax card, temporary until decision on how to model the tax card with respect to the tax payer&#xA;&#x9;&#x9;&#x9;CE_invalidity->any(true).deductible_amount +&#xA;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount + &#xA;&#x9;&#x9;&#x9;CE_child_not_part_of_household->any(true).deductible_amount */&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CE, NOT SUBJECT TO WITHOLDING**/&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#x9;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_S5sFy3MbEeWPJ7lHGUXAWg" name="TaxDeduction-AC-extra_professional-constraint" constrainedElement="_S5sFuHMbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5sFzHMbEeWPJ7lHGUXAWg">
            <language>OCL</language>
            <body>let set_of_AC: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::AC) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year),&#xA;&#x9;ac: Income_Tax_Deduction_Concepts::AC = set_of_AC->any(true).oclAsType(Income_Tax_Deduction_Concepts::AC),&#xA;&#x9;spouse: Physical_Person = self.legal_union_A->select(couple|couple.end_date->isEmpty())->any(true).individual_B,&#xA;&#x9;taxpayer_income_eligible_type : Boolean = self.incomes->exists(inc|ac.is_eligible_income_for_AC(inc)),&#xA;&#x9;spouse_income_eligible_type : Boolean = spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->exists(inc|ac.is_eligible_income_for_AC(inc)),&#xA;&#x9;&#xA;&#x9;taxpayer_income_eligible_type_assisting_spouse : Boolean = self.incomes->exists(inc|ac.is_eligible_income_for_AC_assisting_spouse(inc)),&#xA;&#x9;spouse_income_eligible_type_assisting_spouse : Boolean = spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->exists(inc|ac.is_eligible_income_for_AC_assisting_spouse(inc)),&#xA;&#x9;&#xA;&#x9;taxpayer_personnaly_affiliated_to_social_security : Boolean = self.is_affiliated_personnaly_to_social_security,&#xA;&#x9;taxpayer_assisting_spouse: Boolean = self.is_assisting_spouse,&#xA;&#x9;&#xA;&#x9;spouse_personnaly_affiliated_to_social_security : Boolean = spouse.is_affiliated_personnaly_to_social_security,&#xA;&#x9;spouse_assisting_spouse: Boolean =  spouse.is_assisting_spouse&#xA;&#x9;in&#xA;&#x9; &#xA;&#x9; if taxpayer_income_eligible_type=true and spouse_income_eligible_type=true then&#xA;&#x9; &#x9;if taxpayer_personnaly_affiliated_to_social_security=true  and spouse_personnaly_affiliated_to_social_security = true then&#xA;&#x9; &#x9;&#x9;ac.deductible_amount= Constants::FLAT_RATE_FOR_EXTRA_PROFESSIONAL_DEDUCTION&#xA;&#x9; &#x9;else&#xA;&#x9; &#x9;&#x9;false&#xA;&#x9; &#x9;endif&#xA;&#x9; else&#xA;&#x9; &#x9;&#x9;if taxpayer_income_eligible_type=true xor spouse_income_eligible_type=true then&#x9; &#x9;&#x9;&#xA;&#x9; &#x9;&#x9;&#x9;if  self.incomes->exists(inc|inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) and inc.compute_duration_of_contract() &lt;=36) xor&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exists(inc|inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)  and inc.compute_duration_of_contract() &lt;=36) then&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;true&#x9; &#x9;&#x9;&#x9;&#x9;&#xA;&#x9; &#x9;&#x9;&#x9;else&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;ac.deductible_amount=0 &#xA;&#x9; &#x9;&#x9;&#x9;endif&#x9;&#xA;&#x9; &#x9;&#x9;&#x9;&#xA;&#x9; &#x9;&#x9;else&#xA;&#x9; &#x9;&#x9;&#x9; if taxpayer_income_eligible_type_assisting_spouse=true xor taxpayer_income_eligible_type_assisting_spouse=true then&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;if (taxpayer_personnaly_affiliated_to_social_security=true and spouse_personnaly_affiliated_to_social_security = false)  xor &#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;(taxpayer_personnaly_affiliated_to_social_security=false and spouse_personnaly_affiliated_to_social_security = true) then&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;else&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;ac.deductible_amount=0&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9; else&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;ac.deductible_amount =0 &#xA;&#x9;&#x9;&#x9; endif&#xA;&#x9; &#x9;endif&#xA;&#x9; endif&#xA;/**NAVIGATIONS&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;self.income_Tax_Deduction->&#xA;self.incomeTax.tax_year&#xA;self.legal_union_A->select&#xA;self.incomes->exists&#xA;spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->exists&#xA;self.incomes->exists(i&#xA;spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->&#xA;self.incomes->exists(&#xA;inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)&#xA;spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->&#xA;inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)**/</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_S5sFzXMbEeWPJ7lHGUXAWg" name="TaxDeduction-DS-1-permanent_expense" constrainedElement="_S5sFuHMbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5sFznMbEeWPJ7lHGUXAWg">
            <language>OCL</language>
            <body>let &#xA;permanent_expense: Set(Expense_Concepts::Expense) = self.expenses->select(expense|expense.oclIsTypeOf(Expense_Concepts::Permanent_Expense) and expense.year_expense_was_incurred_in=self.incomeTax.tax_year),&#xA;alimony: Set(Expense_Concepts::Expense) = permanent_expense->select(alimony|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;alimony.oclAsType(Expense_Concepts::Permanent_Expense).category = Expense_Concepts::Category_of_Permanent_Expense::ALIMONY and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;alimony.oclAsType(Expense_Concepts::Permanent_Expense).is_eligible_for_deduction = true),&#xA;debt: Set(Expense_Concepts::Expense) = permanent_expense->select(debt|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;debt.oclAsType(Expense_Concepts::Permanent_Expense).category = Expense_Concepts::Category_of_Permanent_Expense::MISCELLANEOUS_DEBT),&#xA;ds_alimony: Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense).permanent_expense_category =  Expense_Concepts::Category_of_Permanent_Expense::ALIMONY and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense),&#xA;tax_liability : Integer = self.incomes.tax_liability->sum(),&#xA;ds_debt: Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense).permanent_expense_category =  Expense_Concepts::Category_of_Permanent_Expense::MISCELLANEOUS_DEBT and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense)&#xA;&#x9;   in&#x9;&#xA;&#xA;if permanent_expense->size()>0 then&#xA;&#x9;if debt->size()>0 then&#xA;&#x9;&#x9;ds_debt.deductible_amount = debt.declared_amount->sum()/2 * tax_liability&#xA;&#x9;else&#xA;&#x9;&#x9;false&#xA;&#x9;endif and&#xA;&#x9;if alimony->size()>0 then&#xA;&#x9;&#x9;alimony->forAll(al|self.is_separated_from(al.dependent)=true)&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;let sum_alimony: Integer = alimony.declared_amount->sum() * tax_liability in&#xA;&#x9;&#x9;if sum_alimony&lt;=Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ALIMONY_EXPENSE.oclAsType(Integer) then&#xA;&#x9;&#x9;&#x9;ds_alimony.deductible_amount = sum_alimony&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;ds_alimony.deductible_amount = Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ALIMONY_EXPENSE.oclAsType(Integer) &#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif&#xA;&#xA;/**NAVIGATION&#xA;self.expenses->select&#xA;self.incomeTax.tax_year&#xA;self.income_Tax_Deduction->select&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;al.dependent**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_S5sFz3MbEeWPJ7lHGUXAWg" name="TaxDeduction-DS-2-interest_expense" constrainedElement="_S5sFuHMbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5sF0HMbEeWPJ7lHGUXAWg">
            <language>OCL</language>
            <body>self.incomes->forAll(inc |&#xA;&#xA;if (inc.end_date_within_taxation_year = self.incomeTax.tax_year) then&#xA;&#xA;let &#xA;interest_expense: Set(Expense_Concepts::Expense) = inc.expenses->select(expense|expense.oclIsTypeOf(Expense_Concepts::Interest_Expense) and expense.year_expense_was_incurred_in=self.incomeTax.tax_year),&#xA;ds_interest_expense: Income_Tax_Deduction_Concepts::DS_for_Interest_Expense = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Interest_Expense) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.expenses->includesAll(interest_expense) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Interest_Expense),&#xA;dependent_children_with_allowances: Set(Dependent) = self.dependents->select(deps|deps.compute_if_dependent_receives_allowances_eligible_for_DS() =true),&#xA;tax_liability : Integer =inc.tax_liability in &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;if interest_expense->size()>0 then&#xA;&#x9;let sum_interest_expense: Integer = interest_expense.declared_amount->sum() in&#xA;&#x9;if sum_interest_expense&lt;=ds_interest_expense.maximum_deductible_amount then&#xA;&#x9;&#xA;&#x9;&#x9;ds_interest_expense.deductible_amount = sum_interest_expense * tax_liability&#xA;&#x9;else&#xA;&#x9;&#x9;ds_interest_expense.deductible_amount = ds_interest_expense.maximum_deductible_amount * tax_liability&#x9;&#x9;&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif&#xA;else&#xA;false&#xA;endif&#xA;)&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_S5sF0XMbEeWPJ7lHGUXAWg" name="TaxDeduction-DS-3-health_and_pension_insurance" constrainedElement="_S5sFuHMbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5sF0nMbEeWPJ7lHGUXAWg">
            <language>OCL</language>
            <body>self.incomes->forAll( inc | &#xA;&#xA;let &#xA;mandatory_health_and_pension_insurance: Set(Expense_Concepts::Expense) = inc.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Health_and_Pension_Insurance).category =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::MANDATORY_HEALTH_AND_PENSION_INSURANCE&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Health_and_Pension_Insurance).is_related_to_additional_salary=true),&#xA;additional_pension_insurance: Set(Expense_Concepts::Expense) = inc.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Health_and_Pension_Insurance).category =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::ADDITIONAL_EMPLOYERS_PENSION_INSURANCE),&#xA;continued_health_and_pension_insurance: Set(Expense_Concepts::Expense) = inc.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Health_and_Pension_Insurance).category =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::CONTINUED_HEALTH_AND_PENSION_INSURANCE),&#xA;ds_mandatory_health_and_pension : Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance).insurance_category = &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::MANDATORY_HEALTH_AND_PENSION_INSURANCE and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year and type.expenses->includesAll(mandatory_health_and_pension_insurance)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance),&#xA;ds_additional_pension_insurance : Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance).insurance_category = &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::ADDITIONAL_EMPLOYERS_PENSION_INSURANCE and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and type.expenses->includesAll(additional_pension_insurance)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance),&#xA;ds_continued_health_and_pension_insurance : Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance).insurance_category = &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::CONTINUED_HEALTH_AND_PENSION_INSURANCE and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and type.expenses->includesAll(continued_health_and_pension_insurance)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance),&#xA;tax_liability : Integer = inc.tax_liability  in &#xA;&#xA;if mandatory_health_and_pension_insurance->size()>0 then&#xA;&#x9;if inc.oclIsTypeOf(Income_Concepts::Employment_Income) then&#xA;&#x9;let sum_mandatory_health_and_pension_insurance : Integer = mandatory_health_and_pension_insurance.declared_amount->sum() in&#xA;&#x9;&#x9;ds_mandatory_health_and_pension.deductible_amount = sum_mandatory_health_and_pension_insurance&#xA;&#x9;else&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif &#xA;and&#xA;if additional_pension_insurance->size()>0 then&#xA;&#x9;if inc.oclIsTypeOf(Income_Concepts::Employment_Income) then&#xA;&#x9;let sum_additional_pension_insurance : Integer = additional_pension_insurance.declared_amount->sum() in&#xA;&#x9;&#x9;if&#x9;sum_additional_pension_insurance &lt;= Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ADDITIONAL_PENSION_AND_INSURANCE.oclAsType(Integer) then&#xA;&#x9;&#x9;&#x9;ds_additional_pension_insurance.deductible_amount = sum_additional_pension_insurance&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;ds_additional_pension_insurance.deductible_amount = Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ADDITIONAL_PENSION_AND_INSURANCE.oclAsType(Integer)&#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif and&#xA;if continued_health_and_pension_insurance->size()>0 then&#xA;&#x9;let sum_continued_health_and_pension_insurance : Integer = continued_health_and_pension_insurance.declared_amount->sum() in&#xA;&#x9;&#x9;ds_continued_health_and_pension_insurance.deductible_amount = tax_liability * sum_continued_health_and_pension_insurance&#xA;else&#xA;&#x9;false&#xA;endif&#xA;)&#xA;&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_S5sF03MbEeWPJ7lHGUXAWg" name="TaxDeduction-DS-4-private_insurance_and_plan" constrainedElement="_S5sFuHMbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5sF1HMbEeWPJ7lHGUXAWg">
            <language>OCL</language>
            <body>let &#xA;insurance_and_plan: Set(Expense_Concepts::Expense) = self.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).category &lt;>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::OLD_AGE_PENSION_PLAN&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).category &lt;>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::PRIVATE_LIFE_INSURANCE&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).is_private_insurance_and_plan_eligible_for_deduction=true),&#xA;life_insurance: Set(Expense_Concepts::Expense) = self.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).category =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::PRIVATE_LIFE_INSURANCE&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).is_private_insurance_and_plan_eligible_for_deduction=true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).duration_of_contract >=10),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;old_age_pension_plan: Set(Expense_Concepts::Expense) = self.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).category =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::OLD_AGE_PENSION_PLAN&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).is_private_insurance_and_plan_eligible_for_deduction=true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).duration_of_contract >=10),&#xA;ds_private_insurance_and_plan: Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan).private_insurance_and_plan_category &lt;> &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::OLD_AGE_PENSION_PLAN and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan),&#xA;ds_old_age_pension_plan: Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan).private_insurance_and_plan_category = &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::OLD_AGE_PENSION_PLAN and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan),&#xA;tax_liability : Integer = self.incomes.tax_liability->sum() in&#xA;&#xA;if insurance_and_plan->size()>0 then&#xA;&#xA;let sum_insurance_and_plan : Integer = insurance_and_plan.declared_amount->sum() + life_insurance.declared_amount->sum() + &#xA;      &#x9;&#x9;&#x9;ds_private_insurance_and_plan.increase_for_life_insurance in&#xA;&#x9;&#x9;&#xA;if&#x9;sum_insurance_and_plan &lt;= ds_private_insurance_and_plan.maximum_deductible_amount_for_private_insurance then&#xA;&#x9;&#x9;&#x9;ds_private_insurance_and_plan.deductible_amount = sum_insurance_and_plan&#xA;&#x9;else&#xA;&#x9;&#x9;&#x9;ds_private_insurance_and_plan.deductible_amount = ds_private_insurance_and_plan.maximum_deductible_amount_for_private_insurance&#x9;&#x9;&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif&#xA;&#xA;and&#xA;&#xA;if old_age_pension_plan->size()>0 then&#xA;let sum_old_age_pension_plan : Integer = old_age_pension_plan.declared_amount->sum() in&#xA;&#x9;if&#x9;sum_old_age_pension_plan &lt;= ds_old_age_pension_plan.maximum_deductible_amount_for_old_age_pension_plan then&#xA;&#x9;&#x9;&#x9;ds_old_age_pension_plan.deductible_amount = sum_old_age_pension_plan&#xA;&#x9;else&#xA;&#x9;&#x9;&#x9;ds_old_age_pension_plan.deductible_amount = ds_old_age_pension_plan.maximum_deductible_amount_for_private_insurance&#x9;&#x9;&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif&#xA;&#xA;/**NAVIGATIONS&#xA;self.expenses->&#xA;self.incomeTax.tax_year&#xA;self.expenses->&#xA;self.incomeTax.tax_year->&#xA;self.expenses->&#xA;self.incomeTax.tax_year&#xA;self.income_Tax_Deduction->select&#xA;self.incomeTax.tax_year&#xA;**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_S5sF1XMbEeWPJ7lHGUXAWg" name="TaxDeduction-DS-5-donation" constrainedElement="_S5sFuHMbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5sF1nMbEeWPJ7lHGUXAWg">
            <language>OCL</language>
            <body>let &#xA;donations: Set(Expense_Concepts::Expense) = self.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Donation)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;or expense.oclAsType(Expense_Concepts::Donation).is_donation_reported = true)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Donation).is_beneficiary_eligible=true),&#xA;ds_donation: Income_Tax_Deduction_Concepts::DS_for_Donation = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Donation) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Donation) in &#x9;&#x9;&#x9;&#x9;&#x9;&#xA;if donations->size()>0 then&#xA;&#x9;let sum_donation: Integer = donations.declared_amount->sum() in&#xA;&#x9;if sum_donation >= Constants::MINIMUM_DEDUCTIBLE_AMOUNT_FOR_DONATIONS.oclAsType(Integer) then&#xA;&#x9;&#x9;if sum_donation &lt;= ds_donation.maximum_deductible_amount then&#xA;&#x9;&#x9;ds_donation.deductible_amount = sum_donation&#xA;&#x9;else&#xA;&#x9;&#x9;ds_donation.deductible_amount = ds_donation.maximum_deductible_amount&#xA;&#x9;endif&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif&#xA;&#xA; </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_S5sF13MbEeWPJ7lHGUXAWg" name="TaxDeduction-DS-6-loss_carryforward" constrainedElement="_S5sFuHMbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5sF2HMbEeWPJ7lHGUXAWg">
            <language>OCL</language>
            <body>self.incomes->forAll( inc | &#xA;&#xA;                            if (&#xA;                            &#x9;&#x9;(inc.income_type.oclIsTypeOf(Income_Concepts::Agriculture_and_Forestry_Income) or&#xA;                            &#x9;&#x9;inc.income_type.oclIsTypeOf(Income_Concepts::Independent_Professional_Services_Income) or&#xA;                                inc.income_type.oclIsTypeOf(Income_Concepts::Trade_and_Business_Income))&#xA;                               and (inc.end_date_within_taxation_year = self.incomeTax.tax_year)) then /**PUT &lt;, when deciding how to model Date or how to use &quot;&lt;&quot; with the Marte Profile **/&#xA;                               let&#xA;                                 &#x9;losses: Set(Expense_Concepts::Expense) = inc.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Loss_Carryforward) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).regular_accountability = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).compensation_by_other_means=false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).tax_payer_has_been_partner_in_business = false),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;losses_successor: Set(Expense_Concepts::Expense) = inc.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Loss_Carryforward) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).regular_accountability = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).compensation_by_other_means=false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).tax_payer_has_been_partner_in_business = true &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).tax_payer_has_inherited_business_ownership = true),&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ds_loss: Income_Tax_Deduction_Concepts::DS_for_Loss_Carryforward = losses.deduction->select(type| &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Loss_Carryforward) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Loss_Carryforward) in &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(inc.end_date_within_taxation_year = 1990) then /**PUT &lt;, when deciding how to model Date or how to use &quot;&lt;&quot; with the Marte Profile **/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;if losses.declared_amount->sum()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ds_loss.deductible_amount =  losses.declared_amount->sum()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if losses_successor.declared_amount->sum() >0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ds_loss.deductible_amount = losses_successor.declared_amount->sum() &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ds_loss.deductible_amount = 0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; else &#xA;                                &#x9;&#x9; false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif)&#xA;&#xA;/**NAVIGATIONS:&#xA;self.incomes->&#xA;inc.expenses->&#xA;inc.expenses->&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;losses.deduction->&#xA;inc.income_type&#xA;inc.income_type&#xA;inc.income_type&#xA;**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_S5sF2XMbEeWPJ7lHGUXAWg" name="TaxCard-unique-constraint" constrainedElement="_S5sFuHMbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5sF2nMbEeWPJ7lHGUXAWg">
            <language>OCL</language>
            <body>self.incomes->forAll(income|income.tax_card->select(tc|tc.validity=true)->size() &lt;= 1)&#xA;/**THE INCOME CAN HAVE AT MOST ONE VALID TAX CARD, IF THE CONTRACT HAS ENDED THAN IT IS ZERO VALID**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_S5sF23MbEeWPJ7lHGUXAWg" name="TaxDeduction-FD-constraint" constrainedElement="_S5sFuHMbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5sF3HMbEeWPJ7lHGUXAWg">
            <language>OCL</language>
            <body>self.incomes->forAll(income|&#xA;&#xA;&#x9;let &#xA;&#x9;&#x9;fd_expenses : Set(Expense_Concepts::Expense)= self.expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Travel_Expense_FD) and&#xA;&#x9;&#x9;&#x9;exp.year_expense_was_incurred_in=self.incomeTax.tax_year),&#xA;&#x9;&#x9;declared_amount : Integer = fd_expenses.declared_amount->sum(),&#xA;&#x9;&#x9;a_FD:Income_Tax_Deduction_Concepts::FD= self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::FD) and type.tax_year=self.incomeTax.tax_year and&#xA;&#x9;&#x9;&#x9;type.expenses->includesAll(fd_expenses))->any(true).oclAsType(Income_Tax_Deduction_Concepts::FD) in&#xA;&#xA;if ((income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) or&#xA;income.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or&#xA;income.income_type.oclIsTypeOf(Income_Concepts::Rentals_and_Leases_Income)) and&#xA;income.start_date_within_taxation_year = self.incomeTax.tax_year) then&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#xA;&#x9;&#x9;if  (a_FD.calculated_distance>a_FD.distance_declared_in_january) then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if  (a_FD.calculated_distance>Constants::MINIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;if (a_FD.calculated_distance>Constants::MAXIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/**MAXIMAL FLAT DISTANCE FOR TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;a_FD.deductible_amount = Constants::FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT.oclAsType(Integer) * Constants::MAXIMAL_FLAT_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/**REAL DISTANCE FOR TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;a_FD.deductible_amount = Constants::FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT.oclAsType(Integer) * a_FD.calculated_distance&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;/**NO TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;a_FD.deductible_amount = 0&#xA;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/*NO CHANGES FOR FD, TRAVEL EXPENSE IS ALREADY DEDUCED FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;endif&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;a_FD.yearly=  a_FD.deductible_amount and&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;a_FD.monthly = a_FD.deductible_amount/12 and&#xA;&#x9;&#x9;a_FD.daily = a_FD.monthly/24&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE FD FOR TRAVEL EXPENSE, THERE IS NO INCOME TYPE ELIGIBLE FOR FD**/&#xA;&#x9;&#x9;a_FD.deductible_amount = 0&#xA;&#x9;endif&#xA;)&#xA;&#xA;&#xA;/** NAVIGATIONS&#xA;self.incomes&#xA;self.expenses&#xA;self.incomeTax&#xA;self.income_Tax_Deduction&#xA;type.expenses&#xA;income.income_type&#xA;income.income_type&#xA;income.income_type&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_S5sF3XMbEeWPJ7lHGUXAWg" name="TaxDeduction-FO-constraint" constrainedElement="_S5sFuHMbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5sF3nMbEeWPJ7lHGUXAWg">
            <language>OCL</language>
            <body>self.incomes->forAll(income| &#xA;let &#xA;&#x9; fo_expenses : Set(Expense_Concepts::Expense) = income.expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Miscellaneous_Expense_FO) and exp.year_expense_was_incurred_in = self.incomeTax.tax_year),&#xA;&#x9; declared_expense:Integer=fo_expenses.declared_amount->sum(),&#xA;&#x9; set_of_FO: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|type.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO) &#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and type.tax_year=self.incomeTax.tax_year&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and type.expenses->includesAll(fo_expenses)),&#xA;&#x9; size_set_of_FO:Integer = set_of_FO->size(),&#xA;&#x9; a_FO:Income_Tax_Deduction_Concepts::FO=set_of_FO->any(true).oclAsType(Income_Tax_Deduction_Concepts::FO),&#xA;&#x9; income_type_for_taxpayer_authorized_for_FO : Boolean = ((income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) or&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.income_type.oclIsTypeOf(Income_Concepts::Rentals_and_Leases_Income)) and&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.start_date_within_taxation_year = self.incomeTax.tax_year)&#x9; in&#xA;if size_set_of_FO>1 then&#xA;&#x9;/**TAX PAYER CANNOT RECEIVE MORE THAN ONE FO PER INCOME AND EXPENSES ATTACHED TO THE INCOME**/&#xA;&#x9;false&#xA;else&#xA;&#x9;if income_type_for_taxpayer_authorized_for_FO = true then&#xA;&#x9;&#x9;if(not self.taxed_jointly) then &#xA;&#x9;&#x9;&#x9;if(declared_expense> Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;a_FO.rate_type_for_FO = Type_of_Rate::REAL_COST&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;a_FO.rate_type_for_FO = Type_of_Rate::REGULAR&#xA;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/**FLAT RATE OR REAL COSTS DEFINED BY JOINT TAXATION**/&#xA;&#x9;&#x9;&#x9;/*do we want to care about this, or up to the agent to decide*/&#xA;&#x9;&#x9;&#x9;let spouse_FO: Income_Tax_Deduction_Concepts::FO =  self.legal_union_A.individual_B.oclAsType(Tax_Payer).income_Tax_Deduction->&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select(type|type.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO))->any(true).oclAsType(Income_Tax_Deduction_Concepts::FO),&#xA;&#x9;&#x9;&#x9;&#x9; spouse_declared_expense:Integer=self.legal_union_A.individual_B.oclAsType(Tax_Payer).expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Miscellaneous_Expense_FO))->any(true).declared_amount in&#xA;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;(a_FO.rate_type_for_FO = Type_of_Rate::REAL_COST and declared_expense> Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer) and spouse_FO.rate_type_for_FO = Type_of_Rate::REGULAR) xor&#xA;&#x9;&#x9;&#x9;(a_FO.rate_type_for_FO = Type_of_Rate::REGULAR and spouse_FO.rate_type_for_FO = Type_of_Rate::REAL_COST and  spouse_declared_expense>Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)) &#xA;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if (a_FO.rate_type_for_FO = Type_of_Rate::REGULAR) then&#xA;&#x9;&#x9;&#x9;/*FLAT RATE FOR FO EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;a_FO.oclAsType(Income_Tax_Deduction_Concepts::Income_Tax_Deduction).deductible_amount = Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)+Constants::DISABILITY_FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/**REAL COST FOR FO EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;a_FO.deductible_amount = declared_expense+Constants::DISABILITY_FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)&#xA;&#xA;&#x9;&#x9;endif&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;a_FO.yearly=  a_FO.deductible_amount and&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;a_FO.monthly = a_FO.deductible_amount/12 and&#xA;&#x9;&#x9;a_FO.daily = a_FO.monthly/24&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE FO, THERE IS NO INCOME TYPE ELIGIBLE FOR FO**/&#xA;&#x9;&#x9;a_FO.deductible_amount = 0&#xA;&#x9;endif&#xA;endif&#xA;)&#xA;&#xA;/**NAVIGATION &#xA;&#xA;self.income_Tax_Deduction->select(type|type.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO) and type.tax_year=self.incomeTax.tax_year),&#xA;self.incomeTax.tax_year&#xA;self.incomes->select(income&#xA;income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)&#xA;income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)&#xA;income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)&#xA;self.expenses->select(exp&#xA;self.legal_union_A.individual_B.oclAsType(Tax_Payer).income_Tax_Deduction->&#xA;self.legal_union_A.individual_B.oclAsType(Tax_Payer).expenses->selec&#xA;a_FO.oclAsType(Income_Tax_Deduction_Concepts::Income_Tax_Deduction).tax_year&#xA;&#xA;&#xA;**/</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_S5sF33MbEeWPJ7lHGUXAWg" name="NEW_TaxDeduction-CE-INVALIDITY" constrainedElement="_S5sFuHMbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5sF4HMbEeWPJ7lHGUXAWg">
            <language>OCL</language>
            <body>let set_of_CE: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::CE) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year),&#xA;&#x9; CE_invalidity:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::INALIDITY_AND_INFIRMITY),&#xA;&#x9;income_subject_to_witholding_tax : Set(Income_Concepts::Income) = self.incomes->select(income|income.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not income.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.start_date_within_taxation_year = self.incomeTax.tax_year),&#xA; &#x9; extraordinary_expenses : &#x9;Set(Expense_Concepts::Expense) = self.expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclIsTypeOf(Expense_Concepts::Extraordinary_Expense_CE)),&#x9;&#xA; &#x9; extraordinary_expense_invalidity_and_infirmity  : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::INALIDITY_AND_INFIRMITY),&#x9;&#xA;&#x9; declared_expense:Integer=extraordinary_expense_invalidity_and_infirmity.declared_amount->sum() in&#xA;&#x9;if (income_subject_to_witholding_tax->size()>0) then&#xA;&#x9;&#x9;if (extraordinary_expenses->any(true).oclAsType(Expense_Concepts::Extraordinary_Expense_CE).is_above_thresholded_deduction_percentage_for_CE()=true) then&#xA;&#x9;&#x9;&#x9;if extraordinary_expense_invalidity_and_infirmity->size()>0 then &#xA;&#x9;&#x9;&#x9;&#x9;if self.oclIsTypeOf(Resident_Tax_Payer) then&#xA;&#x9;&#x9;&#x9;&#x9;/**CE FOR INVALIDITY AND INFIRMITY ON THE TAX CARD**/&#xA;&#x9;&#x9;&#x9;&#x9;CE_invalidity->size() = 1&#x9;and&#xA;&#x9;&#x9;&#x9;&#x9;CE_invalidity->any(true).deductible_amount = CE_invalidity->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).disability_flat_rate&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;endif&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;false&#xA;&#x9;&#x9;endif&#x9;&#xA;else&#xA;false&#xA;endif&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_S5sF4XMbEeWPJ7lHGUXAWg" name="NEW_TaxDeduction-CE-DEPENDENCE-AND-CARE" constrainedElement="_S5sFuHMbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5sF4nMbEeWPJ7lHGUXAWg">
            <language>OCL</language>
            <body>let set_of_CE: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::CE) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year),&#xA;&#x9; CE_dependence:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD),&#xA;&#x9; income_subject_to_witholding_tax : Set(Income_Concepts::Income) = self.incomes->select(income|income.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not income.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.start_date_within_taxation_year = self.incomeTax.tax_year),&#xA; &#x9; extraordinary_expenses : &#x9;Set(Expense_Concepts::Expense) = self.expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclIsTypeOf(Expense_Concepts::Extraordinary_Expense_CE)),&#x9;&#xA; &#x9; extraordinary_expense_dependence_and_care : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD), &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9; declared_expense:Integer=extraordinary_expense_dependence_and_care.declared_amount->sum() in&#xA;&#x9; &#xA;&#x9;if (income_subject_to_witholding_tax->size()>0) then&#xA;&#x9;&#x9;if (extraordinary_expenses->any(true).oclAsType(Expense_Concepts::Extraordinary_Expense_CE).is_above_thresholded_deduction_percentage_for_CE()=true) then&#xA;&#x9;&#x9;&#x9;&#x9;if  extraordinary_expense_dependence_and_care ->size()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->size()=1 and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;let &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expenses_for_dependence_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::DEPENDENCE_CARE) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; expenses_for_house_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|expense.expense_purpose=Expense_Purpose::HOUSE_CARE) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; expenses_for_child_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::CHILD_CARE),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;amount_house_care: Integer = expenses_for_house_care.declared_amount->sum(),&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sum_of_expenses:Integer =  expenses_for_child_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.compute_if_dependent_receives_allowances_eligible_for_CE_dependance_and_care() =true and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.dependent_type=Dependent_Type::CHILD and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(expense.dependent.oclAsType(Physical_Person).age&lt;14) or&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.oclAsType(Physical_Person).disability_percentage>0).declared_amount->sum() in&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(expenses_for_child_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CHILD CARE, CHILDREN BEING PART OF THE HOUSHOLD**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(amount_house_care + sum_of_expenses)>Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(expenses_for_dependence_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CLOSE RELATIVE DEPENDENCE CARE**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount = Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer)+ CE_dependence->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).dependent_relative_flat_rate&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;CE_dependence->any(true).deductible_amount = Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(expenses_for_dependence_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CLOSE RELATIVE DEPENDENCE CARE**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount= amount_house_care + sum_of_expenses + CE_dependence->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).dependent_relative_flat_rate&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount= amount_house_care + sum_of_expenses&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   endif &#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;endif&#x9;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CE, NOT SUBJECT TO WITHOLDING**/&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#x9;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_S5sF43MbEeWPJ7lHGUXAWg" name="NEW_TaxDeduction-CE-DEPENDENCE-AND-CARE-CHILDREN-NOT-PART-OF-HOUSEHOLD" constrainedElement="_S5sFuHMbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5sF5HMbEeWPJ7lHGUXAWg">
            <language>OCL</language>
            <body>let set_of_CE: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::CE) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year),&#xA;&#x9; CE_child_not_part_of_household:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::CARE_FOR_CHILDREN_NOT_BEING_PART_OF_HOUSEHOLD),&#xA;&#x9; income_subject_to_witholding_tax : Set(Income_Concepts::Income) = self.incomes->select(income|income.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not income.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.start_date_within_taxation_year = self.incomeTax.tax_year),&#xA; &#x9; extraordinary_expenses : &#x9;Set(Expense_Concepts::Expense) = self.expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclIsTypeOf(Expense_Concepts::Extraordinary_Expense_CE)),&#x9;&#xA; &#x9; extraordinary_expense_care_for_children_not_part_of_the_household : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::CARE_FOR_CHILDREN_NOT_BEING_PART_OF_HOUSEHOLD),  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#xA;&#x9; declared_expense:Integer=extraordinary_expense_care_for_children_not_part_of_the_household.declared_amount->sum() in&#xA;&#x9; &#x9; &#xA;&#x9;if (income_subject_to_witholding_tax->size()>0) then&#xA;&#x9;&#x9;if (extraordinary_expenses->any(true).oclAsType(Expense_Concepts::Extraordinary_Expense_CE).is_above_thresholded_deduction_percentage_for_CE()=true) then&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;     if  CE_child_not_part_of_household->size()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; CE_child_not_part_of_household->size()= 1 and&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CARE FOR CHILDREN NOT BEING PART OF THE HOUSEHOLD**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;let&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expenses_for_child_not_part_of_houselod_care: Set(Expense_Concepts::Expense) = self.expenses->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::CHILD_CARE),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;sum_expenses_for_children:Integer = expenses_for_child_not_part_of_houselod_care->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.compute_if_dependent_receives_allowances_eligible_for_CE_dependance_and_care() =false and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;((expense.dependent.age&lt;=21) or&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(expense.dependent.age>21 and expense.dependent.continued_studies=true and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.tax_Payer.incomes.income_amount->sum()&lt;0.6*Constants::MINIMUM_SALARY.oclAsType(Integer)))).declared_amount->sum() in&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(sum_expenses_for_children>Constants::MAXIMUM_CE_RATE_FOR_CHILD_NOT_BEING_PART_OF_HOUSEHOLD.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;CE_child_not_part_of_household->any(true).deductible_amount  = Constants::MAXIMUM_CE_RATE_FOR_CHILD_NOT_BEING_PART_OF_HOUSEHOLD.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_child_not_part_of_household->any(true).deductible_amount = sum_expenses_for_children&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CE, NOT SUBJECT TO WITHOLDING**/&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#x9;</body>
          </specification>
        </ownedRule>
        <generalization xmi:id="_S5sF5XMbEeWPJ7lHGUXAWg" general="_S5sFkXMbEeWPJ7lHGUXAWg"/>
        <ownedAttribute xmi:id="_S5sF5nMbEeWPJ7lHGUXAWg" name="incomes" visibility="private" type="_S5sslXMbEeWPJ7lHGUXAWg" association="_S5stOXMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5sF53MbEeWPJ7lHGUXAWg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5sF6HMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sF6XMbEeWPJ7lHGUXAWg" name="incomeTax" visibility="private" type="_S5sFPXMbEeWPJ7lHGUXAWg" association="_S5ssYnMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5sF6nMbEeWPJ7lHGUXAWg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5sF63MbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sF7HMbEeWPJ7lHGUXAWg" name="income_Tax_Credit" visibility="private" type="_S5tTgnMbEeWPJ7lHGUXAWg" association="_S5stQXMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5sF7XMbEeWPJ7lHGUXAWg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5sF7nMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sF73MbEeWPJ7lHGUXAWg" name="tax_class" visibility="private" type="_S5ssY3MbEeWPJ7lHGUXAWg" association="_S5sFPHMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5sF8HMbEeWPJ7lHGUXAWg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5sF8XMbEeWPJ7lHGUXAWg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sF8nMbEeWPJ7lHGUXAWg" name="household" visibility="private" type="_S5sFeHMbEeWPJ7lHGUXAWg" association="_S5ssXXMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5sF83MbEeWPJ7lHGUXAWg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5sF9HMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sF9XMbEeWPJ7lHGUXAWg" name="dependents" visibility="private" type="_S5sFTHMbEeWPJ7lHGUXAWg" association="_S5ssX3MbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5sF9nMbEeWPJ7lHGUXAWg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5sF93MbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sF-HMbEeWPJ7lHGUXAWg" name="income_Tax_Deduction" visibility="private" type="_S5tT-HMbEeWPJ7lHGUXAWg" association="_S5stZXMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5ssQHMbEeWPJ7lHGUXAWg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5ssQXMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5ssQnMbEeWPJ7lHGUXAWg" name="taxed_jointly" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5ssQ3MbEeWPJ7lHGUXAWg" name="expenses" visibility="private" type="_S5stIXMbEeWPJ7lHGUXAWg" association="_S5stZnMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5ssRHMbEeWPJ7lHGUXAWg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5ssRXMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5ssRnMbEeWPJ7lHGUXAWg" name="dependent" visibility="private" type="_S5sFTHMbEeWPJ7lHGUXAWg" association="_S5ssXnMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5ssR3MbEeWPJ7lHGUXAWg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5ssSHMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5ssSXMbEeWPJ7lHGUXAWg" name="tax_Card" visibility="private" type="_S5sto3MbEeWPJ7lHGUXAWg" aggregation="shared" association="_S5ssWHMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5ssSnMbEeWPJ7lHGUXAWg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5ssS3MbEeWPJ7lHGUXAWg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5ssTHMbEeWPJ7lHGUXAWg" name="taxation_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_S8C2cXMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_S5ssTXMbEeWPJ7lHGUXAWg" name="is_dependent_part_of_the_household" isQuery="true" bodyCondition="_S5ssT3MbEeWPJ7lHGUXAWg">
          <eAnnotations xmi:id="_S5ssTnMbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_S5ssT3MbEeWPJ7lHGUXAWg" name="is_child_part_of_household" constrainedElement="_S5ssTXMbEeWPJ7lHGUXAWg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5ssUHMbEeWPJ7lHGUXAWg">
              <language>OCL</language>
              <body>let responsible_person: Tax_Payer = IN_dependent.responsible_person,&#xA;     household_tax_payer_same_as_respnsible: Boolean = IN_dependent.household.tax_Payer.oclAsType(Physical_Person).SSNo = responsible_person.oclAsType(Physical_Person).SSNo&#xA;in&#xA;if (responsible_person->notEmpty() and household_tax_payer_same_as_respnsible) then&#xA;&#x9;/**THE CHILD IS PART OF THE TAX PAYERS HOUSEHOLD**/&#xA;&#x9;result = true&#xA;else &#xA;&#x9;/**THE CHILD IS NOT PART OF THE TAX PAYERS HOUSEHOLD**/&#xA;&#x9;result = false&#xA;endif&#xA;&#xA;&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_S5ssUXMbEeWPJ7lHGUXAWg" name="IN_dependent" type="_S5sFTHMbEeWPJ7lHGUXAWg"/>
          <ownedParameter xmi:id="_S5ssUnMbEeWPJ7lHGUXAWg" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S5ssU3MbEeWPJ7lHGUXAWg" name="number_of_months_of_allowance" isQuery="true" postcondition="_S5ssVXMbEeWPJ7lHGUXAWg">
          <eAnnotations xmi:id="_S5ssVHMbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_S5ssVXMbEeWPJ7lHGUXAWg" name="number_od_months_of_allowance" constrainedElement="_S5ssU3MbEeWPJ7lHGUXAWg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5ssVnMbEeWPJ7lHGUXAWg">
              <language>OCL</language>
              <body>result = 1&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_S5ssV3MbEeWPJ7lHGUXAWg" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_S5ssWHMbEeWPJ7lHGUXAWg" name="" memberEnd="_S5ssSXMbEeWPJ7lHGUXAWg _S5tTaXMbEeWPJ7lHGUXAWg"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_S5ssWXMbEeWPJ7lHGUXAWg" name="located at" memberEnd="_S5sFmHMbEeWPJ7lHGUXAWg _S5sFRHMbEeWPJ7lHGUXAWg"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_S5ssWnMbEeWPJ7lHGUXAWg" name="receives" memberEnd="_S5sFlXMbEeWPJ7lHGUXAWg _S5sFb3MbEeWPJ7lHGUXAWg"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_S5ssW3MbEeWPJ7lHGUXAWg" name="person B" memberEnd="_S5sFiHMbEeWPJ7lHGUXAWg _S5sFnnMbEeWPJ7lHGUXAWg"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_S5ssXHMbEeWPJ7lHGUXAWg" name="person A" memberEnd="_S5sFhXMbEeWPJ7lHGUXAWg _S5sFm3MbEeWPJ7lHGUXAWg"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_S5ssXXMbEeWPJ7lHGUXAWg" name="maintains" memberEnd="_S5sF8nMbEeWPJ7lHGUXAWg _S5sFeXMbEeWPJ7lHGUXAWg"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_S5ssXnMbEeWPJ7lHGUXAWg" name="as tax payer" memberEnd="_S5sFWnMbEeWPJ7lHGUXAWg _S5ssRnMbEeWPJ7lHGUXAWg"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_S5ssX3MbEeWPJ7lHGUXAWg" name="supports" memberEnd="_S5sF9XMbEeWPJ7lHGUXAWg _S5sFUnMbEeWPJ7lHGUXAWg"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_S5ssYHMbEeWPJ7lHGUXAWg" name="is part of" memberEnd="_S5sFT3MbEeWPJ7lHGUXAWg _S5sFfHMbEeWPJ7lHGUXAWg"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_S5ssYXMbEeWPJ7lHGUXAWg" name="incurred over" memberEnd="_S5stKHMbEeWPJ7lHGUXAWg _S5sFV3MbEeWPJ7lHGUXAWg"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_S5ssYnMbEeWPJ7lHGUXAWg" name="is subject to" memberEnd="_S5sF6XMbEeWPJ7lHGUXAWg _S5sFPnMbEeWPJ7lHGUXAWg"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5ssY3MbEeWPJ7lHGUXAWg" name="Tax_Class">
        <ownedAttribute xmi:id="_S5ssZHMbEeWPJ7lHGUXAWg" name="tax_class" visibility="public" type="_S5stVHMbEeWPJ7lHGUXAWg"/>
        <ownedAttribute xmi:id="_S5ssZXMbEeWPJ7lHGUXAWg" name="tax_Payer" visibility="private" type="_S5sFuHMbEeWPJ7lHGUXAWg" association="_S5sFPHMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5ssZnMbEeWPJ7lHGUXAWg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5ssZ3MbEeWPJ7lHGUXAWg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5ssaHMbEeWPJ7lHGUXAWg" name="valid_from_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_S8C2cXMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5ssaXMbEeWPJ7lHGUXAWg" name="valid_until_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_S8C2cXMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5ssanMbEeWPJ7lHGUXAWg" name="tax_card" visibility="private" type="_S5sto3MbEeWPJ7lHGUXAWg" association="_S5stZHMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5ssa3MbEeWPJ7lHGUXAWg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5ssbHMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5ssbXMbEeWPJ7lHGUXAWg" name="current_tax_class" visibility="private" type="_S5ssY3MbEeWPJ7lHGUXAWg" association="_S5ssc3MbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5ssbnMbEeWPJ7lHGUXAWg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5ssb3MbEeWPJ7lHGUXAWg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sscHMbEeWPJ7lHGUXAWg" name="prev" visibility="private" type="_S5ssY3MbEeWPJ7lHGUXAWg" association="_S5ssc3MbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5sscXMbEeWPJ7lHGUXAWg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5sscnMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_S5ssc3MbEeWPJ7lHGUXAWg" name="replaced by" memberEnd="_S5ssbXMbEeWPJ7lHGUXAWg _S5sscHMbEeWPJ7lHGUXAWg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_S5ssdHMbEeWPJ7lHGUXAWg" name="Income_Concepts">
      <ownedComment xmi:id="_S5ssdXMbEeWPJ7lHGUXAWg" annotatedElement="_S5ssj3MbEeWPJ7lHGUXAWg">
        <body>&lt;p> Art.91, alinea 1, numero 2&lt;/p></body>
      </ownedComment>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5ssdnMbEeWPJ7lHGUXAWg" name="Income_Type">
        <ownedAttribute xmi:id="_S5ssd3MbEeWPJ7lHGUXAWg" name="subjectToWithholdingTax" visibility="private">
          <ownedComment xmi:id="_S5sseHMbEeWPJ7lHGUXAWg" annotatedElement="_S5ssd3MbEeWPJ7lHGUXAWg">
            <body>&lt;p>The&amp;nbsp;following&amp;nbsp;types&amp;nbsp;of&amp;nbsp;income&amp;nbsp;are&amp;nbsp;subject&amp;nbsp;to&amp;nbsp;withholding&amp;nbsp;tax:&lt;/p>&lt;p>Employment&lt;/p>&lt;p>Pensions&amp;nbsp;and&amp;nbsp;Annuities&lt;/p>&lt;p>Investments&amp;nbsp;(not&amp;nbsp;all&amp;nbsp;types&amp;nbsp;might&amp;nbsp;be&amp;nbsp;subject&amp;nbsp;to&amp;nbsp;withholding.&amp;nbsp;The&amp;nbsp;types&amp;nbsp;subject&amp;nbsp;to&amp;nbsp;withholding&amp;nbsp;have&amp;nbsp;been&amp;nbsp;elaborated&amp;nbsp;on&amp;nbsp;page&amp;nbsp;15&amp;nbsp;of&amp;nbsp;the&amp;nbsp;memento)&lt;/p>&lt;p>&lt;/p></body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/EcorePrimitiveTypes.library.uml#EBoolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sseXMbEeWPJ7lHGUXAWg" name="income" visibility="private" type="_S5sslXMbEeWPJ7lHGUXAWg" association="_S5sskHMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5ssenMbEeWPJ7lHGUXAWg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5sse3MbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5ssfHMbEeWPJ7lHGUXAWg" name="Trade_and_Business_Income">
        <generalization xmi:id="_S5ssfXMbEeWPJ7lHGUXAWg" general="_S5ssdnMbEeWPJ7lHGUXAWg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5ssfnMbEeWPJ7lHGUXAWg" name="Agriculture_and_Forestry_Income">
        <generalization xmi:id="_S5ssf3MbEeWPJ7lHGUXAWg" general="_S5ssdnMbEeWPJ7lHGUXAWg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5ssgHMbEeWPJ7lHGUXAWg" name="Independent_Professional_Services_Income">
        <generalization xmi:id="_S5ssgXMbEeWPJ7lHGUXAWg" general="_S5ssdnMbEeWPJ7lHGUXAWg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5ssgnMbEeWPJ7lHGUXAWg" name="Pensions_and_Annuities_Income">
        <generalization xmi:id="_S5ssg3MbEeWPJ7lHGUXAWg" general="_S5ssdnMbEeWPJ7lHGUXAWg"/>
        <ownedAttribute xmi:id="_S5sshHMbEeWPJ7lHGUXAWg" name="occasional_payement" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_S5sshXMbEeWPJ7lHGUXAWg">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5sshnMbEeWPJ7lHGUXAWg" name="Capital_and_Investments_Income">
        <generalization xmi:id="_S5ssh3MbEeWPJ7lHGUXAWg" general="_S5ssdnMbEeWPJ7lHGUXAWg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5ssiHMbEeWPJ7lHGUXAWg" name="Employment_Income">
        <generalization xmi:id="_S5ssiXMbEeWPJ7lHGUXAWg" general="_S5ssdnMbEeWPJ7lHGUXAWg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5ssinMbEeWPJ7lHGUXAWg" name="Rentals_and_Leases_Income">
        <generalization xmi:id="_S5ssi3MbEeWPJ7lHGUXAWg" general="_S5ssdnMbEeWPJ7lHGUXAWg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5ssjHMbEeWPJ7lHGUXAWg" name="Sundry_Income">
        <generalization xmi:id="_S5ssjXMbEeWPJ7lHGUXAWg" general="_S5ssdnMbEeWPJ7lHGUXAWg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5ssjnMbEeWPJ7lHGUXAWg" name="Directors_Fee">
        <generalization xmi:id="_S5ssj3MbEeWPJ7lHGUXAWg" general="_S5ssgHMbEeWPJ7lHGUXAWg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_S5sskHMbEeWPJ7lHGUXAWg" name="has as type" memberEnd="_S5sspHMbEeWPJ7lHGUXAWg _S5sseXMbEeWPJ7lHGUXAWg"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5sskXMbEeWPJ7lHGUXAWg" name="Foreign_Income">
        <generalization xmi:id="_S5ssknMbEeWPJ7lHGUXAWg" general="_S5sslXMbEeWPJ7lHGUXAWg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5ssk3MbEeWPJ7lHGUXAWg" name="Local_Income">
        <generalization xmi:id="_S5sslHMbEeWPJ7lHGUXAWg" general="_S5sslXMbEeWPJ7lHGUXAWg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5sslXMbEeWPJ7lHGUXAWg" name="Income">
        <ownedRule xmi:id="_S5sslnMbEeWPJ7lHGUXAWg" name="Tax_Deduction_FD-constraint" constrainedElement="_S5sslXMbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5ssl3MbEeWPJ7lHGUXAWg">
            <language>OCL</language>
            <body>(self .income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) or&#xA;self.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or&#xA;self.income_type.oclIsTypeOf(Income_Concepts::Rentals_and_Leases_Income)) = true&#xA;and&#xA;self.start_date_within_taxation_year = self.taxPayer.incomeTax.tax_year &#xA;and&#xA;let fd_expenses : Set(Expense_Concepts::Expense) = self.expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Travel_Expense_FD) and exp.year_expense_was_incurred_in = self.start_date_within_taxation_year) in&#xA;     fd_expenses->notEmpty()&#xA;     &#xA;implies&#xA;&#xA;&#x9; fd_expenses->forAll(a_FD|&#x9; &#xA;&#x9; if  (a_FD.deduction.oclAsType(Income_Tax_Deduction_Concepts::FD).calculated_distance>a_FD.deduction.oclAsType(Income_Tax_Deduction_Concepts::FD).distance_declared_in_january) then&#xA;&#x9;&#x9;if  (a_FD.deduction.oclAsType(Income_Tax_Deduction_Concepts::FD).calculated_distance>Constants::MINIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if (a_FD.deduction.oclAsType(Income_Tax_Deduction_Concepts::FD).calculated_distance>Constants::MAXIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/**MAXIMAL FLAT DISTANCE FOR TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;a_FD.deduction.deductible_amount = Constants::FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT.oclAsType(Integer) * Constants::MAXIMAL_FLAT_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/**REAL DISTANCE FOR TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;a_FD.deduction.deductible_amount = Constants::FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT.oclAsType(Integer) * a_FD.deduction.oclAsType(Income_Tax_Deduction_Concepts::FD).calculated_distance&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;/**MINIMAL FLAT DISTANCE FOR TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;a_FD.deduction.deductible_amount = Constants::FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT.oclAsType(Integer) * Constants::MINIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/*NO CHANGES FOR FD, TRAVEL EXPENSE IS ALREADY DEDUCED FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;endif&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;a_FD.deduction.yearly=  a_FD.deduction.deductible_amount and&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;a_FD.deduction.monthly = a_FD.deduction.deductible_amount/12 and&#xA;&#x9;&#x9;a_FD.deduction.daily = a_FD.deduction.monthly/25&#xA;)&#xA;&#x9; </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_S5ssmHMbEeWPJ7lHGUXAWg" name="Tax_Deduction_FO-constraint" constrainedElement="_S5sslXMbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5ssmXMbEeWPJ7lHGUXAWg">
            <language>OCL</language>
            <body>(self.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) or&#xA;self.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or&#xA;self.income_type.oclIsTypeOf(Income_Concepts::Rentals_and_Leases_Income)) = true&#xA;and&#xA;self.start_date_within_taxation_year = self.taxPayer.incomeTax.tax_year&#xA;and&#xA;let fo_expenses : Set(Expense_Concepts::Expense) = self.expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Miscellaneous_Expense_FO) and exp.year_expense_was_incurred_in = self.start_date_within_taxation_year),&#xA;&#x9;declared_expense : Integer = fo_expenses.declared_amount->sum() in&#xA;&#x9;&#xA;     fo_expenses->notEmpty()&#xA;&#xA;implies&#xA;&#xA;&#x9;fo_expenses->forAll(fo|&#xA;&#x9;&#x9;&#x9;/*do we want to care about this, or up to the agent to decide*/&#xA;&#x9;&#x9;&#x9;let spouse_FO: Income_Tax_Deduction_Concepts::FO =  self.taxPayer.legal_union_A.individual_B.oclAsType(Tax_Payer_Concepts::Tax_Payer).income_Tax_Deduction->&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select(type|type.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO))->any(true).oclAsType(Income_Tax_Deduction_Concepts::FO),&#xA;&#x9;&#x9;&#x9;&#x9; spouse_declared_expense:Integer=self.taxPayer.legal_union_A.individual_B.oclAsType(Tax_Payer_Concepts::Tax_Payer).expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Miscellaneous_Expense_FO))->any(true).declared_amount in&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if(fo.deduction.oclAsType(Income_Tax_Deduction_Concepts::FO) .rate_type_for_FO = Type_of_Rate::REAL_COST) then &#xA;&#x9;&#x9;&#x9;&#x9;if(self.taxPayer.taxed_jointly) then &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(spouse_FO.rate_type_for_FO= Type_of_Rate::REAL_COST) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;fo.deduction.oclAsType(Income_Tax_Deduction_Concepts::FO) .rate_type_for_FO = Type_of_Rate::REGULAR&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if(declared_expense>Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE= Type_of_Rate::REAL_COST&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;&#x9;endif&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if (Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE = Type_of_Rate::REGULAR) then&#xA;&#x9;&#x9;&#x9;/*FLAT RATE FOR FO EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;fo.deduction.deductible_amount =Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)+Constants::DISABILITY_FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/**REAL COST FOR FO EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;fo.deduction.deductible_amount = declared_expense+Constants::DISABILITY_FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)&#xA;&#x9;&#x9;endif&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;fo.deduction.oclAsType(Income_Tax_Deduction_Concepts::FO) .yearly=  fo.deduction.deductible_amount and&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;fo.deduction.oclAsType(Income_Tax_Deduction_Concepts::FO) .monthly = fo.deduction.deductible_amount/12 and&#xA;&#x9;&#x9;fo.deduction.oclAsType(Income_Tax_Deduction_Concepts::FO) .daily = fo.deduction.monthly/25 &#x9;&#xA;&#x9;) &#xA;&#x9;</body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:id="_S5ssmnMbEeWPJ7lHGUXAWg" name="taxPayer" visibility="private" type="_S5sFuHMbEeWPJ7lHGUXAWg" association="_S5stOXMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5ssm3MbEeWPJ7lHGUXAWg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5ssnHMbEeWPJ7lHGUXAWg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5ssnXMbEeWPJ7lHGUXAWg" name="income_amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5ssnnMbEeWPJ7lHGUXAWg" name="start_date_within_taxation_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_S8C2cXMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5ssn3MbEeWPJ7lHGUXAWg" name="start_date_of_contract" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_S8C2cXMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5ssoHMbEeWPJ7lHGUXAWg" name="end_date_within_taxation_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_S8C2cXMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5ssoXMbEeWPJ7lHGUXAWg" name="tax_card" visibility="private" type="_S5sto3MbEeWPJ7lHGUXAWg" association="_S5stXnMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5ssonMbEeWPJ7lHGUXAWg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5sso3MbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sspHMbEeWPJ7lHGUXAWg" name="income_type" visibility="private" type="_S5ssdnMbEeWPJ7lHGUXAWg" association="_S5sskHMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5sspXMbEeWPJ7lHGUXAWg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5sspnMbEeWPJ7lHGUXAWg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5ssp3MbEeWPJ7lHGUXAWg" name="expenses" visibility="private" type="_S5stIXMbEeWPJ7lHGUXAWg" association="_S5stIHMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5ssqHMbEeWPJ7lHGUXAWg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5ssqXMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5ssqnMbEeWPJ7lHGUXAWg" name="tax_liability" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_S5ssq3MbEeWPJ7lHGUXAWg" name="compute_duration_of_contract" isQuery="true" postcondition="_S5ssrXMbEeWPJ7lHGUXAWg">
          <eAnnotations xmi:id="_S5ssrHMbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_S5ssrXMbEeWPJ7lHGUXAWg" name="get_duration" constrainedElement="_S5ssq3MbEeWPJ7lHGUXAWg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5ssrnMbEeWPJ7lHGUXAWg">
              <language>OCL</language>
              <body>result=1&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_S5ssr3MbEeWPJ7lHGUXAWg" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S5sssHMbEeWPJ7lHGUXAWg" name="compute_duration_of_contract_within_taxation_year" isQuery="true">
          <eAnnotations xmi:id="_S5sssXMbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_S5sssnMbEeWPJ7lHGUXAWg" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S5sss3MbEeWPJ7lHGUXAWg" name="IN_date">
            <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_S8C2cXMbEeWPJ7lHGUXAWg"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_S5sstHMbEeWPJ7lHGUXAWg" name="Expense_Concepts">
      <packagedElement xmi:type="uml:Class" xmi:id="_S5sstXMbEeWPJ7lHGUXAWg" name="Permanent_Expense">
        <generalization xmi:id="_S5sstnMbEeWPJ7lHGUXAWg" general="_S5sswnMbEeWPJ7lHGUXAWg"/>
        <ownedAttribute xmi:id="_S5sst3MbEeWPJ7lHGUXAWg" name="category" visibility="public" type="_S5stE3MbEeWPJ7lHGUXAWg"/>
        <ownedAttribute xmi:id="_S5ssuHMbEeWPJ7lHGUXAWg" name="is_eligible_for_deduction" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_S5ssuXMbEeWPJ7lHGUXAWg">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedOperation xmi:id="_S5ssunMbEeWPJ7lHGUXAWg" name="is_expense_eligible_for_deduction" isQuery="true" postcondition="_S5ssvHMbEeWPJ7lHGUXAWg">
          <eAnnotations xmi:id="_S5ssu3MbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_S5ssvHMbEeWPJ7lHGUXAWg" name="is_eligible" constrainedElement="_S5ssunMbEeWPJ7lHGUXAWg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5ssvXMbEeWPJ7lHGUXAWg">
              <language>OCL</language>
              <body>self.is_eligible_for_deduction = IN_agent_response and&#xA;result = IN_agent_response&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_S5ssvnMbEeWPJ7lHGUXAWg" name="IN_agent_response">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S5ssv3MbEeWPJ7lHGUXAWg" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5sswHMbEeWPJ7lHGUXAWg" name="Interest_Expense">
        <generalization xmi:id="_S5sswXMbEeWPJ7lHGUXAWg" general="_S5sswnMbEeWPJ7lHGUXAWg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5sswnMbEeWPJ7lHGUXAWg" name="Special_Expense_DS">
        <generalization xmi:id="_S5ssw3MbEeWPJ7lHGUXAWg" general="_S5stIXMbEeWPJ7lHGUXAWg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5ssxHMbEeWPJ7lHGUXAWg" name="Private_Insurance_and_Plan">
        <generalization xmi:id="_S5ssxXMbEeWPJ7lHGUXAWg" general="_S5sswnMbEeWPJ7lHGUXAWg"/>
        <ownedAttribute xmi:id="_S5ssxnMbEeWPJ7lHGUXAWg" name="category" visibility="public" type="_S5stFnMbEeWPJ7lHGUXAWg"/>
        <ownedAttribute xmi:id="_S5ssx3MbEeWPJ7lHGUXAWg" name="duration_of_contract" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5ssyHMbEeWPJ7lHGUXAWg" name="is_private_insurance_and_plan_eligible_for_deduction" visibility="public" isDerived="true">
          <eAnnotations xmi:id="_S5ssyXMbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_S5ssynMbEeWPJ7lHGUXAWg">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedOperation xmi:id="_S5ssy3MbEeWPJ7lHGUXAWg" name="is_private_insurance_and_plan_eligible_for_deduction" isQuery="true" postcondition="_S5sszXMbEeWPJ7lHGUXAWg">
          <eAnnotations xmi:id="_S5sszHMbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_S5sszXMbEeWPJ7lHGUXAWg" name="is_private_insurance_and_plan_eligible_for_deduction" constrainedElement="_S5ssy3MbEeWPJ7lHGUXAWg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5ssznMbEeWPJ7lHGUXAWg">
              <language>OCL</language>
              <body>self.is_private_insurance_and_plan_eligible_for_deduction = IN_eligible_plan&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_S5ssz3MbEeWPJ7lHGUXAWg" name="IN_eligible_plan">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5ss0HMbEeWPJ7lHGUXAWg" name="Health_and_Pension_Insurance">
        <generalization xmi:id="_S5ss0XMbEeWPJ7lHGUXAWg" general="_S5sswnMbEeWPJ7lHGUXAWg"/>
        <ownedAttribute xmi:id="_S5ss0nMbEeWPJ7lHGUXAWg" name="category" visibility="public" type="_S5stHHMbEeWPJ7lHGUXAWg"/>
        <ownedAttribute xmi:id="_S5ss03MbEeWPJ7lHGUXAWg" name="is_related_to_additional_salary" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_S5ss1HMbEeWPJ7lHGUXAWg">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5ss1XMbEeWPJ7lHGUXAWg" name="Donation">
        <generalization xmi:id="_S5ss1nMbEeWPJ7lHGUXAWg" general="_S5sswnMbEeWPJ7lHGUXAWg"/>
        <ownedAttribute xmi:id="_S5ss13MbEeWPJ7lHGUXAWg" name="beneficiary" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5ss2HMbEeWPJ7lHGUXAWg" name="is_beneficiary_eligible" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_S5ss2XMbEeWPJ7lHGUXAWg">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5ss2nMbEeWPJ7lHGUXAWg" name="is_donation_reported" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_S5ss23MbEeWPJ7lHGUXAWg" name="get_beneficiary_eligibility_for_deduction" isQuery="true" postcondition="_S5ss3XMbEeWPJ7lHGUXAWg">
          <eAnnotations xmi:id="_S5ss3HMbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_S5ss3XMbEeWPJ7lHGUXAWg" name="is_leagaly_approved_beneficiary" constrainedElement="_S5ss23MbEeWPJ7lHGUXAWg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5ss3nMbEeWPJ7lHGUXAWg">
              <language>OCL</language>
              <body>is_beneficiary_eligible = IN_eligibility&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_S5ss33MbEeWPJ7lHGUXAWg" name="IN_eligibility">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5ss4HMbEeWPJ7lHGUXAWg" name="Loss_Carryforward">
        <ownedRule xmi:id="_S5ss4XMbEeWPJ7lHGUXAWg" name="ExpensePossibleOnlyIfCertainIncomeType-constraint" constrainedElement="_S5ss4HMbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5ss4nMbEeWPJ7lHGUXAWg">
            <language>OCL</language>
            <body>self.oclIsTypeOf(Loss_Carryforward) implies&#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Agriculture_and_Forestry_Income) or &#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Independent_Professional_Services_Income) or&#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Trade_and_Business_Income)&#xA;&#xA;</body>
          </specification>
        </ownedRule>
        <generalization xmi:id="_S5ss43MbEeWPJ7lHGUXAWg" general="_S5sswnMbEeWPJ7lHGUXAWg"/>
        <ownedAttribute xmi:id="_S5ss5HMbEeWPJ7lHGUXAWg" name="regular_accountability" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5ss5XMbEeWPJ7lHGUXAWg" name="compensation_by_other_means" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5ss5nMbEeWPJ7lHGUXAWg" name="tax_payer_has_inherited_business_ownership" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_S5ss53MbEeWPJ7lHGUXAWg">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5ss6HMbEeWPJ7lHGUXAWg" name="tax_payer_has_been_partner_in_business" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_S5ss6XMbEeWPJ7lHGUXAWg" value="true">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedOperation xmi:id="_S5ss6nMbEeWPJ7lHGUXAWg" name="is_accountability_regular" isQuery="true" postcondition="_S5ss7HMbEeWPJ7lHGUXAWg">
          <eAnnotations xmi:id="_S5ss63MbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_S5ss7HMbEeWPJ7lHGUXAWg" name="is_accounatbility_regular" constrainedElement="_S5ss6nMbEeWPJ7lHGUXAWg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5ss7XMbEeWPJ7lHGUXAWg">
              <language>OCL</language>
              <body>self.regular_accountability = IN_regularity</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_S5ss7nMbEeWPJ7lHGUXAWg" name="IN_regularity">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S5ss73MbEeWPJ7lHGUXAWg" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S5ss8HMbEeWPJ7lHGUXAWg" name="is_compensated_by_other_means" isQuery="true" postcondition="_S5ss8nMbEeWPJ7lHGUXAWg">
          <eAnnotations xmi:id="_S5ss8XMbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_S5ss8nMbEeWPJ7lHGUXAWg" name="is_compensated_by_other_means" constrainedElement="_S5ss8HMbEeWPJ7lHGUXAWg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5ss83MbEeWPJ7lHGUXAWg">
              <language>OCL</language>
              <body>self.compensation_by_other_means = IN_compensated</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_S5ss9HMbEeWPJ7lHGUXAWg" name="IN_compensated">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S5ss9XMbEeWPJ7lHGUXAWg" name="has_been_tax_payer_partner_in_business" isQuery="true" postcondition="_S5ss93MbEeWPJ7lHGUXAWg">
          <eAnnotations xmi:id="_S5ss9nMbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_S5ss93MbEeWPJ7lHGUXAWg" name="partner_in_business" constrainedElement="_S5ss9XMbEeWPJ7lHGUXAWg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5ss-HMbEeWPJ7lHGUXAWg">
              <language>OCL</language>
              <body>self.tax_payer_has_been_partner_in_business = IN_has_been_partner_in_business&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_S5ss-XMbEeWPJ7lHGUXAWg" name="IN_has_been_partner_in_business">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S5ss-nMbEeWPJ7lHGUXAWg" name="has_tax_payer_inherited_business_ownership" isQuery="true" postcondition="_S5ss_HMbEeWPJ7lHGUXAWg">
          <eAnnotations xmi:id="_S5ss-3MbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_S5ss_HMbEeWPJ7lHGUXAWg" name="inherited_business_ownership" constrainedElement="_S5ss-nMbEeWPJ7lHGUXAWg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5ss_XMbEeWPJ7lHGUXAWg">
              <language>OCL</language>
              <body>self.tax_payer_has_inherited_business_ownership = IN_inherited_business_ownership</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_S5ss_nMbEeWPJ7lHGUXAWg" name="IN_inherited_business_ownership">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5ss_3MbEeWPJ7lHGUXAWg" name="Spousal_Expense_AC">
        <generalization xmi:id="_S5stAHMbEeWPJ7lHGUXAWg" general="_S5stIXMbEeWPJ7lHGUXAWg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5stAXMbEeWPJ7lHGUXAWg" name="Extraordinary_Expense_CE">
        <generalization xmi:id="_S5stAnMbEeWPJ7lHGUXAWg" general="_S5stIXMbEeWPJ7lHGUXAWg"/>
        <ownedAttribute xmi:id="_S5stA3MbEeWPJ7lHGUXAWg" name="thresholded_deduction_percentage" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5stBHMbEeWPJ7lHGUXAWg" name="ce_type" visibility="public" type="_S5stanMbEeWPJ7lHGUXAWg"/>
        <ownedOperation xmi:id="_S5stBXMbEeWPJ7lHGUXAWg" name="is_above_thresholded_deduction_percentage_for_CE" isQuery="true">
          <eAnnotations xmi:id="_S5stBnMbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_S5stB3MbEeWPJ7lHGUXAWg" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S5stCHMbEeWPJ7lHGUXAWg" name="compute_thresholded_deduction_percentage_for_CE" isQuery="true" postcondition="_S5stCnMbEeWPJ7lHGUXAWg">
          <eAnnotations xmi:id="_S5stCXMbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_S5stCnMbEeWPJ7lHGUXAWg" name="thresholded_deduction_percentage" constrainedElement="_S5stCHMbEeWPJ7lHGUXAWg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5stC3MbEeWPJ7lHGUXAWg">
              <language>OCL</language>
              <body>self.thresholded_deduction_percentage = IN_thresholded_deduction_percentage&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_S5stDHMbEeWPJ7lHGUXAWg" name="IN_thresholded_deduction_percentage">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5stDXMbEeWPJ7lHGUXAWg" name="Travel_Expense_FD">
        <generalization xmi:id="_S5stDnMbEeWPJ7lHGUXAWg" general="_S5stEXMbEeWPJ7lHGUXAWg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5stD3MbEeWPJ7lHGUXAWg" name="Miscellaneous_Expense_FO">
        <generalization xmi:id="_S5stEHMbEeWPJ7lHGUXAWg" general="_S5stEXMbEeWPJ7lHGUXAWg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5stEXMbEeWPJ7lHGUXAWg" name="Professional_Expense">
        <generalization xmi:id="_S5stEnMbEeWPJ7lHGUXAWg" general="_S5stIXMbEeWPJ7lHGUXAWg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="_S5stE3MbEeWPJ7lHGUXAWg" name="Category_of_Permanent_Expense">
        <ownedLiteral xmi:id="_S5stFHMbEeWPJ7lHGUXAWg" name="MISCELLANEOUS_DEBT" classifier="_S5stE3MbEeWPJ7lHGUXAWg"/>
        <ownedLiteral xmi:id="_S5stFXMbEeWPJ7lHGUXAWg" name="ALIMONY" classifier="_S5stE3MbEeWPJ7lHGUXAWg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="_S5stFnMbEeWPJ7lHGUXAWg" name="Category_of_Private_Insurance_and_Plan">
        <ownedLiteral xmi:id="_S5stF3MbEeWPJ7lHGUXAWg" name="PRIVATE_INSURANCE" classifier="_S5stFnMbEeWPJ7lHGUXAWg"/>
        <ownedLiteral xmi:id="_S5stGHMbEeWPJ7lHGUXAWg" name="PRIVATE_LIFE_INSURANCE" classifier="_S5stHHMbEeWPJ7lHGUXAWg"/>
        <ownedLiteral xmi:id="_S5stGXMbEeWPJ7lHGUXAWg" name="COMPANY_MEMBERS_PRIVATE_INSURANCE" classifier="_S5stFnMbEeWPJ7lHGUXAWg"/>
        <ownedLiteral xmi:id="_S5stGnMbEeWPJ7lHGUXAWg" name="HOUSING_SAVING_PLAN" classifier="_S5stHHMbEeWPJ7lHGUXAWg"/>
        <ownedLiteral xmi:id="_S5stG3MbEeWPJ7lHGUXAWg" name="OLD_AGE_PENSION_PLAN" classifier="_S5stHHMbEeWPJ7lHGUXAWg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="_S5stHHMbEeWPJ7lHGUXAWg" name="Category_of_Health_and_Pension_Insurances">
        <ownedLiteral xmi:id="_S5stHXMbEeWPJ7lHGUXAWg" name="MANDATORY_HEALTH_AND_PENSION_INSURANCE" classifier="_S5stHHMbEeWPJ7lHGUXAWg"/>
        <ownedLiteral xmi:id="_S5stHnMbEeWPJ7lHGUXAWg" name="ADDITIONAL_EMPLOYERS_PENSION_INSURANCE" classifier="_S5stHHMbEeWPJ7lHGUXAWg"/>
        <ownedLiteral xmi:id="_S5stH3MbEeWPJ7lHGUXAWg" name="CONTINUED_HEALTH_AND_PENSION_INSURANCE" classifier="_S5stHHMbEeWPJ7lHGUXAWg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_S5stIHMbEeWPJ7lHGUXAWg" name="influences" memberEnd="_S5stLHMbEeWPJ7lHGUXAWg _S5ssp3MbEeWPJ7lHGUXAWg"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5stIXMbEeWPJ7lHGUXAWg" name="Expense">
        <ownedAttribute xmi:id="_S5stInMbEeWPJ7lHGUXAWg" name="tax_Payer" visibility="private" type="_S5sFuHMbEeWPJ7lHGUXAWg" association="_S5stZnMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5stI3MbEeWPJ7lHGUXAWg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5stJHMbEeWPJ7lHGUXAWg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5stJXMbEeWPJ7lHGUXAWg" name="declared_amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5stJnMbEeWPJ7lHGUXAWg" name="expense_purpose" visibility="public" type="_S5stbnMbEeWPJ7lHGUXAWg">
          <defaultValue xmi:type="uml:InstanceValue" xmi:id="_S5stJ3MbEeWPJ7lHGUXAWg" name="OTHER" type="_S5stbnMbEeWPJ7lHGUXAWg" instance="_S5stcnMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5stKHMbEeWPJ7lHGUXAWg" name="dependent" visibility="private" type="_S5sFTHMbEeWPJ7lHGUXAWg" association="_S5ssYXMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5stKXMbEeWPJ7lHGUXAWg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5stKnMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5stK3MbEeWPJ7lHGUXAWg" name="year_expense_was_incurred_in" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5stLHMbEeWPJ7lHGUXAWg" name="income" visibility="private" type="_S5sslXMbEeWPJ7lHGUXAWg" association="_S5stIHMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5stLXMbEeWPJ7lHGUXAWg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5stLnMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5stL3MbEeWPJ7lHGUXAWg" name="deduction" visibility="private" type="_S5tT-HMbEeWPJ7lHGUXAWg" association="_S5tUB3MbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5stMHMbEeWPJ7lHGUXAWg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5stMXMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_S5stMnMbEeWPJ7lHGUXAWg" name="Grantor">
      <ownedLiteral xmi:id="_S5stM3MbEeWPJ7lHGUXAWg" name="ACD" classifier="_S5stMnMbEeWPJ7lHGUXAWg"/>
      <ownedLiteral xmi:id="_S5stNHMbEeWPJ7lHGUXAWg" name="Employer" classifier="_S5stMnMbEeWPJ7lHGUXAWg"/>
      <ownedLiteral xmi:id="_S5stNXMbEeWPJ7lHGUXAWg" name="CNPF" classifier="_S5stMnMbEeWPJ7lHGUXAWg"/>
      <ownedLiteral xmi:id="_S5stNnMbEeWPJ7lHGUXAWg" name="CEDIES" classifier="_S5stMnMbEeWPJ7lHGUXAWg"/>
      <ownedLiteral xmi:id="_S5stN3MbEeWPJ7lHGUXAWg" name="SNJ" classifier="_S5stMnMbEeWPJ7lHGUXAWg"/>
      <ownedLiteral xmi:id="_S5stOHMbEeWPJ7lHGUXAWg" name="CNAP" classifier="_S5stMnMbEeWPJ7lHGUXAWg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_S5stOXMbEeWPJ7lHGUXAWg" name="earns" memberEnd="_S5sF5nMbEeWPJ7lHGUXAWg _S5ssmnMbEeWPJ7lHGUXAWg"/>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_S5stOnMbEeWPJ7lHGUXAWg" name="Country">
      <ownedLiteral xmi:id="_S5stO3MbEeWPJ7lHGUXAWg" name="LU" classifier="_S5stOnMbEeWPJ7lHGUXAWg"/>
      <ownedLiteral xmi:id="_S5stPHMbEeWPJ7lHGUXAWg" name="FR" classifier="_S5stOnMbEeWPJ7lHGUXAWg"/>
      <ownedLiteral xmi:id="_S5stPXMbEeWPJ7lHGUXAWg" name="BE" classifier="_S5stOnMbEeWPJ7lHGUXAWg"/>
      <ownedLiteral xmi:id="_S5stPnMbEeWPJ7lHGUXAWg" name="DE" classifier="_S5stOnMbEeWPJ7lHGUXAWg"/>
      <ownedLiteral xmi:id="_S5stP3MbEeWPJ7lHGUXAWg" name="NL" classifier="_S5stOnMbEeWPJ7lHGUXAWg"/>
      <ownedLiteral xmi:id="_S5stQHMbEeWPJ7lHGUXAWg" name="OTHER" classifier="_S5stOnMbEeWPJ7lHGUXAWg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_S5stQXMbEeWPJ7lHGUXAWg" name="credited for" memberEnd="_S5sF7HMbEeWPJ7lHGUXAWg _S5tThHMbEeWPJ7lHGUXAWg"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_S5stQnMbEeWPJ7lHGUXAWg" name="Date">
      <ownedAttribute xmi:id="_S5stQ3MbEeWPJ7lHGUXAWg" name="day" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5stRHMbEeWPJ7lHGUXAWg" value="*"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5stRXMbEeWPJ7lHGUXAWg" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_S5stRnMbEeWPJ7lHGUXAWg" name="month" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_S5stR3MbEeWPJ7lHGUXAWg" name="year" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_S5stSHMbEeWPJ7lHGUXAWg" name="Job_Activity">
      <ownedLiteral xmi:id="_S5stSXMbEeWPJ7lHGUXAWg" name="Salary" classifier="_S5stSHMbEeWPJ7lHGUXAWg"/>
      <ownedLiteral xmi:id="_S5stSnMbEeWPJ7lHGUXAWg" name="Pension" classifier="_S5stSHMbEeWPJ7lHGUXAWg"/>
      <ownedLiteral xmi:id="_S5stS3MbEeWPJ7lHGUXAWg" name="Annuity" classifier="_S5stSHMbEeWPJ7lHGUXAWg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_S5stTHMbEeWPJ7lHGUXAWg" name="Tax_Card_Type">
      <ownedLiteral xmi:id="_S5stTXMbEeWPJ7lHGUXAWg" name="Principal" classifier="_S5stTHMbEeWPJ7lHGUXAWg"/>
      <ownedLiteral xmi:id="_S5stTnMbEeWPJ7lHGUXAWg" name="Additional" classifier="_S5stTHMbEeWPJ7lHGUXAWg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_S5stT3MbEeWPJ7lHGUXAWg" name="Tax_Office">
      <ownedLiteral xmi:id="_S5stUHMbEeWPJ7lHGUXAWg" name="RTS_2" classifier="_S5stT3MbEeWPJ7lHGUXAWg"/>
      <ownedLiteral xmi:id="_S5stUXMbEeWPJ7lHGUXAWg" name="RTS_3" classifier="_S5stT3MbEeWPJ7lHGUXAWg"/>
      <ownedLiteral xmi:id="_S5stUnMbEeWPJ7lHGUXAWg" name="RTS_Esch" classifier="_S5stT3MbEeWPJ7lHGUXAWg"/>
      <ownedLiteral xmi:id="_S5stU3MbEeWPJ7lHGUXAWg" name="RTS_Ettelbruck" classifier="_S5stT3MbEeWPJ7lHGUXAWg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_S5stVHMbEeWPJ7lHGUXAWg" name="Tax_Class_Category">
      <ownedLiteral xmi:id="_S5stVXMbEeWPJ7lHGUXAWg" name="One" classifier="_S5stVHMbEeWPJ7lHGUXAWg"/>
      <ownedLiteral xmi:id="_S5stVnMbEeWPJ7lHGUXAWg" name="One_A" classifier="_S5stVHMbEeWPJ7lHGUXAWg"/>
      <ownedLiteral xmi:id="_S5stV3MbEeWPJ7lHGUXAWg" name="Two" classifier="_S5stVHMbEeWPJ7lHGUXAWg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_S5stWHMbEeWPJ7lHGUXAWg" name="Town">
      <ownedLiteral xmi:id="_S5stWXMbEeWPJ7lHGUXAWg" name="Luxembourg_city" classifier="_S5stWHMbEeWPJ7lHGUXAWg"/>
      <ownedLiteral xmi:id="_S5stWnMbEeWPJ7lHGUXAWg" name="Bertrange" classifier="_S5stWHMbEeWPJ7lHGUXAWg"/>
      <ownedLiteral xmi:id="_S5stW3MbEeWPJ7lHGUXAWg" name="Strassen" classifier="_S5stWHMbEeWPJ7lHGUXAWg"/>
      <ownedLiteral xmi:id="_S5stXHMbEeWPJ7lHGUXAWg" name="Bettembourg" classifier="_S5stWHMbEeWPJ7lHGUXAWg"/>
      <ownedLiteral xmi:id="_S5stXXMbEeWPJ7lHGUXAWg" name="Beaufort" classifier="_S5stWHMbEeWPJ7lHGUXAWg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_S5stXnMbEeWPJ7lHGUXAWg" name="linked to" memberEnd="_S5ssoXMbEeWPJ7lHGUXAWg _S5stuHMbEeWPJ7lHGUXAWg"/>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_S5stX3MbEeWPJ7lHGUXAWg" name="Dependent_Type">
      <ownedLiteral xmi:id="_S5stYHMbEeWPJ7lHGUXAWg" name="CHILD" classifier="_S5stX3MbEeWPJ7lHGUXAWg"/>
      <ownedLiteral xmi:id="_S5stYXMbEeWPJ7lHGUXAWg" name="SPOUSE" classifier="_S5stX3MbEeWPJ7lHGUXAWg"/>
      <ownedLiteral xmi:id="_S5stYnMbEeWPJ7lHGUXAWg" name="RELATIVE" classifier="_S5stX3MbEeWPJ7lHGUXAWg"/>
      <ownedLiteral xmi:id="_S5stY3MbEeWPJ7lHGUXAWg" name="OTHER_FAMILY_MEMBER" classifier="_S5stX3MbEeWPJ7lHGUXAWg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_S5stZHMbEeWPJ7lHGUXAWg" name="provides" memberEnd="_S5stu3MbEeWPJ7lHGUXAWg _S5ssanMbEeWPJ7lHGUXAWg"/>
    <packagedElement xmi:type="uml:Association" xmi:id="_S5stZXMbEeWPJ7lHGUXAWg" name="receives" memberEnd="_S5sF-HMbEeWPJ7lHGUXAWg _S5tT_XMbEeWPJ7lHGUXAWg"/>
    <packagedElement xmi:type="uml:Association" xmi:id="_S5stZnMbEeWPJ7lHGUXAWg" name="declares" memberEnd="_S5ssQ3MbEeWPJ7lHGUXAWg _S5stInMbEeWPJ7lHGUXAWg"/>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_S5stZ3MbEeWPJ7lHGUXAWg" name="Type_of_Rate">
      <ownedLiteral xmi:id="_S5staHMbEeWPJ7lHGUXAWg" name="REGULAR" classifier="_S5stZ3MbEeWPJ7lHGUXAWg"/>
      <ownedLiteral xmi:id="_S5staXMbEeWPJ7lHGUXAWg" name="REAL_COST" classifier="_S5stZ3MbEeWPJ7lHGUXAWg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_S5stanMbEeWPJ7lHGUXAWg" name="CE_Type">
      <ownedLiteral xmi:id="_S5sta3MbEeWPJ7lHGUXAWg" name="INALIDITY_AND_INFIRMITY" classifier="_S5stanMbEeWPJ7lHGUXAWg"/>
      <ownedLiteral xmi:id="_S5stbHMbEeWPJ7lHGUXAWg" name="DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD" classifier="_S5stanMbEeWPJ7lHGUXAWg"/>
      <ownedLiteral xmi:id="_S5stbXMbEeWPJ7lHGUXAWg" name="CARE_FOR_CHILDREN_NOT_BEING_PART_OF_HOUSEHOLD" classifier="_S5stanMbEeWPJ7lHGUXAWg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_S5stbnMbEeWPJ7lHGUXAWg" name="Expense_Purpose">
      <ownedLiteral xmi:id="_S5stb3MbEeWPJ7lHGUXAWg" name="HOUSE_CARE" classifier="_S5stbnMbEeWPJ7lHGUXAWg"/>
      <ownedLiteral xmi:id="_S5stcHMbEeWPJ7lHGUXAWg" name="CHILD_CARE" classifier="_S5stbnMbEeWPJ7lHGUXAWg"/>
      <ownedLiteral xmi:id="_S5stcXMbEeWPJ7lHGUXAWg" name="DEPENDENCE_CARE" classifier="_S5stbnMbEeWPJ7lHGUXAWg"/>
      <ownedLiteral xmi:id="_S5stcnMbEeWPJ7lHGUXAWg" name="OTHER" classifier="_S5stbnMbEeWPJ7lHGUXAWg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_S5stc3MbEeWPJ7lHGUXAWg" name="Constants">
      <ownedLiteral xmi:id="_S5stdHMbEeWPJ7lHGUXAWg" name="MAXIMUM_CE_RATE_FOR_CHILD_NOT_BEING_PART_OF_HOUSEHOLD" classifier="_S5stc3MbEeWPJ7lHGUXAWg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_S5stdXMbEeWPJ7lHGUXAWg" value="3480"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_S5stdnMbEeWPJ7lHGUXAWg" name="MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE" classifier="_S5stc3MbEeWPJ7lHGUXAWg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_S5std3MbEeWPJ7lHGUXAWg" value="3600"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_S5steHMbEeWPJ7lHGUXAWg" name="MINIMUM_SALARY" classifier="_S5stc3MbEeWPJ7lHGUXAWg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_S5steXMbEeWPJ7lHGUXAWg" value="1500"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_S5stenMbEeWPJ7lHGUXAWg" name="FLAT_RATE_FOR_EXTRA_PROFESSIONAL_DEDUCTION" classifier="_S5stc3MbEeWPJ7lHGUXAWg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_S5ste3MbEeWPJ7lHGUXAWg" value="4500"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_S5stfHMbEeWPJ7lHGUXAWg" name="MAXIMUM_DEDUCTIBLE_PERCENTAGE_FOR_DONATIONS" classifier="_S5stc3MbEeWPJ7lHGUXAWg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_S5stfXMbEeWPJ7lHGUXAWg" value="20"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_S5stfnMbEeWPJ7lHGUXAWg" name="MINIMUM_DEDUCTIBLE_AMOUNT_FOR_DONATIONS" classifier="_S5stc3MbEeWPJ7lHGUXAWg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_S5stf3MbEeWPJ7lHGUXAWg" value="120"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_S5stgHMbEeWPJ7lHGUXAWg" name="MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ADDITIONAL_PENSION_AND_INSURANCE" classifier="_S5stc3MbEeWPJ7lHGUXAWg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_S5stgXMbEeWPJ7lHGUXAWg"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_S5stgnMbEeWPJ7lHGUXAWg" name="MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ALIMONY_EXPENSE" classifier="_S5stc3MbEeWPJ7lHGUXAWg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_S5stg3MbEeWPJ7lHGUXAWg" value="24000"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_S5sthHMbEeWPJ7lHGUXAWg" name="FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT" classifier="_S5stc3MbEeWPJ7lHGUXAWg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_S5sthXMbEeWPJ7lHGUXAWg" value="99"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_S5sthnMbEeWPJ7lHGUXAWg" name="MAXIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION" classifier="_S5stc3MbEeWPJ7lHGUXAWg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_S5sth3MbEeWPJ7lHGUXAWg" value="26"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_S5stiHMbEeWPJ7lHGUXAWg" name="MAXIMAL_FLAT_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION" classifier="_S5stc3MbEeWPJ7lHGUXAWg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_S5stiXMbEeWPJ7lHGUXAWg" value="30"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_S5stinMbEeWPJ7lHGUXAWg" name="MINIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION" classifier="_S5stc3MbEeWPJ7lHGUXAWg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_S5sti3MbEeWPJ7lHGUXAWg" value="4"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_S5stjHMbEeWPJ7lHGUXAWg" name="FLAT_RATE_CIM_DAILY" classifier="_S5stc3MbEeWPJ7lHGUXAWg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_S5stjXMbEeWPJ7lHGUXAWg" value="2"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_S5stjnMbEeWPJ7lHGUXAWg" name="FLAT_RATE_CIM_MONTHLY" classifier="_S5stc3MbEeWPJ7lHGUXAWg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_S5stj3MbEeWPJ7lHGUXAWg" value="62"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_S5stkHMbEeWPJ7lHGUXAWg" name="FLAT_RATE_CIM_YEARLY" classifier="_S5stc3MbEeWPJ7lHGUXAWg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_S5stkXMbEeWPJ7lHGUXAWg" value="750"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_S5stknMbEeWPJ7lHGUXAWg" name="FLAT_RATE_CIP_DAILY" classifier="_S5stc3MbEeWPJ7lHGUXAWg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_S5stk3MbEeWPJ7lHGUXAWg" value="1"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_S5stlHMbEeWPJ7lHGUXAWg" name="FLAT_RATE_CIP_MONTHLY" classifier="_S5stc3MbEeWPJ7lHGUXAWg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_S5stlXMbEeWPJ7lHGUXAWg" value="25"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_S5stlnMbEeWPJ7lHGUXAWg" name="FLAT_RATE_CIP_YEARLY" classifier="_S5stc3MbEeWPJ7lHGUXAWg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_S5stl3MbEeWPJ7lHGUXAWg" value="300"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_S5stmHMbEeWPJ7lHGUXAWg" name="FLAT_RATE_CIS_DAILY" classifier="_S5stc3MbEeWPJ7lHGUXAWg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_S5stmXMbEeWPJ7lHGUXAWg" value="1"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_S5stmnMbEeWPJ7lHGUXAWg" name="FLAT_RATE_CIS_MONTHLY" classifier="_S5stc3MbEeWPJ7lHGUXAWg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_S5stm3MbEeWPJ7lHGUXAWg" value="25"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_S5stnHMbEeWPJ7lHGUXAWg" name="FLAT_RATE_CIS_YEARLY" classifier="_S5stc3MbEeWPJ7lHGUXAWg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_S5stnXMbEeWPJ7lHGUXAWg" value="300"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_S5stnnMbEeWPJ7lHGUXAWg" name="MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_DS" classifier="_S5stc3MbEeWPJ7lHGUXAWg">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_S5stn3MbEeWPJ7lHGUXAWg" value="480"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_S5stoHMbEeWPJ7lHGUXAWg" name="FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE" classifier="_S5stc3MbEeWPJ7lHGUXAWg"/>
      <ownedLiteral xmi:id="_S5stoXMbEeWPJ7lHGUXAWg" name="DISABILITY_FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE" classifier="_S5stc3MbEeWPJ7lHGUXAWg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_S5stonMbEeWPJ7lHGUXAWg" name="Tax_Card_Concepts">
      <packagedElement xmi:type="uml:Class" xmi:id="_S5sto3MbEeWPJ7lHGUXAWg" name="Tax_Card">
        <ownedRule xmi:id="_S5stpHMbEeWPJ7lHGUXAWg" name="SubjectToWithholdingTax-constraint" constrainedElement="_S5sto3MbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5stpXMbEeWPJ7lHGUXAWg">
            <language>OCL</language>
            <body>not self.oclIsUndefined() &#xA;implies&#xA;(self.income.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or &#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) or&#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Capital_and_Investments_Income) or&#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Directors_Fee)&#xA;)&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_S5stpnMbEeWPJ7lHGUXAWg" name="Tax_Credits-constraint" constrainedElement="_S5sto3MbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5stp3MbEeWPJ7lHGUXAWg">
            <language>OCL</language>
            <body>self.tax_card_type = Tax_Card_Type::Principal &#xA;&#xA;implies&#xA;&#xA;let cim : Income_Tax_Credit_Concepts::CIM = self.income_Tax_Credit->select(c|c.oclIsTypeOf(Income_Tax_Credit_Concepts::CIM) and c.tax_year = self.valid_from_date)->any(true).oclAsType(Income_Tax_Credit_Concepts::CIM),&#xA;&#x9;cis : Income_Tax_Credit_Concepts::CIS = self.income_Tax_Credit->select(cis|cis.oclIsTypeOf(Income_Tax_Credit_Concepts::CIS) and cis.tax_year = self.valid_from_date)->any(true).oclAsType(Income_Tax_Credit_Concepts::CIS),&#xA;&#x9;cip : Income_Tax_Credit_Concepts::CIP = self.income_Tax_Credit->select(cip|cip.oclIsTypeOf(Income_Tax_Credit_Concepts::CIP) and cip.tax_year = self.valid_from_date)->any(true).oclAsType(Income_Tax_Credit_Concepts::CIP) in&#xA;&#x9;&#xA;(not cis.oclIsUndefined()) xor (not cip.oclIsUndefined()) = true&#xA;and&#xA;if not cim.oclIsUndefined() then &#xA;&#x9;self.credit_CIM_daily = cim.daily and&#xA;&#x9;self.credit_CIM_monthly = cim.monthly &#xA;else&#xA;&#x9;true&#xA;endif&#xA;and&#xA;if not cis.oclIsUndefined()then&#xA;&#x9;self.credit_CIS_daily = cis.daily and&#xA;&#x9;self.credit_CIS_monthly = cis.monthly &#xA;else&#xA;&#x9;true&#xA;endif&#xA;and&#xA;if not cip.oclIsUndefined()then&#xA;&#x9;self.credit_CIP_monthly = cip.monthly &#xA;else&#xA;&#x9;true&#xA;endif</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_S5stqHMbEeWPJ7lHGUXAWg" name="Tax_Card_AC-constraint" constrainedElement="_S5sto3MbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5stqXMbEeWPJ7lHGUXAWg">
            <language>OCL</language>
            <body>let set_ac : Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(deduction|deduction.oclIsTypeOf(Income_Tax_Deduction_Concepts::AC) and deduction.tax_year = self.valid_from_date),&#xA;&#x9;ac : Income_Tax_Deduction_Concepts::AC = set_ac->any(true).oclAsType(Income_Tax_Deduction_Concepts::AC),&#xA;&#x9;set_fo : Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(deduction|deduction.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO) and deduction.tax_year = self.valid_from_date),&#xA;&#x9;set_ds : Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(deduction|deduction.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS) and deduction.tax_year = self.valid_from_date) in&#xA;&#x9;&#xA;set_ac->size() = 1 &#xA;implies&#xA;&#xA;self.tax_card_type=Tax_Card_Type::Additional and&#xA;self.tax_Payer.taxed_jointly and&#xA;self.deduction_AC_yearly = ac.deductible_amount and&#xA;self.deduction_AC_monthly = ac.deductible_amount/12 and&#xA;self.deduction_AC_daily = self.deduction_AC_monthly/25 /**25 working days per month**/ and&#xA;&#xA;if(set_ds->size()>0) then&#xA;&#x9;set_ds->size() =1 and&#xA;&#x9;self.deduction_DS_yearly->notEmpty() and&#xA;&#x9;self.deduction_DS_yearly = set_ds.deductible_amount ->sum()&#xA;else&#xA;&#x9;true&#xA;endif&#xA;&#xA;and&#xA;&#xA;if(set_fo->size()>0) then&#xA;&#x9;set_fo->size() = 1 and&#xA;&#x9;self.deduction_FO_yearly->notEmpty() and&#xA;&#x9;self.deduction_FO_yearly = set_fo.deductible_amount ->sum()&#xA;else&#xA;&#x9;true&#xA;endif&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_S5stqnMbEeWPJ7lHGUXAWg" name="Tax_Card_FD-constraint" constrainedElement="_S5sto3MbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5stq3MbEeWPJ7lHGUXAWg">
            <language>OCL</language>
            <body>not self.oclIsUndefined()&#xA;implies&#xA;self.income.taxPayer.income_Tax_Deduction->select(d|d.oclIsTypeOf(Income_Tax_Deduction_Concepts::FD) and d.tax_year = self.valid_from_date)->size() = 1&#xA;&#xA;and &#xA;let fd : Income_Tax_Deduction_Concepts::FD = self.income_Tax_Deduction->select(d|d.oclIsTypeOf(Income_Tax_Deduction_Concepts::FD) and d.tax_year = self.valid_from_date)->any(true).oclAsType(Income_Tax_Deduction_Concepts::FD) in&#xA;self.deduction_FD_daily = fd.daily and&#xA;self.deduction_FD_monthly = fd.monthly and&#xA;self.deduction_FD_yearly = fd.yearly&#xA;&#xA;&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_S5strHMbEeWPJ7lHGUXAWg" name="Tax_Card_DS-constraint" constrainedElement="_S5sto3MbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5strXMbEeWPJ7lHGUXAWg">
            <language>OCL</language>
            <body>let set_ds : Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(d|d.oclIsTypeOf( Income_Tax_Deduction_Concepts::DS) and d.tax_year = self.valid_from_date),&#xA;&#x9;total_ds : Integer = set_ds.deductible_amount->sum()  in&#xA;set_ds->size()>0 and&#xA;self.tax_card_type = Tax_Card_Type::Principal&#xA;&#xA;implies&#xA;&#xA;if total_ds > Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_DS.oclAsType(Integer) then&#xA; &#x9;/**THE DIFFERENCE BETWEEN THE MINIMUM AND THE TOTAL DS AMOUNT IS WRITTEN ON THE TAX CARD**/&#xA; &#x9;self.deduction_DS_monthly = (total_ds - Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_DS.oclAsType(Integer))/self.income^^compute_duration_of_contract_within_taxation_year(self.valid_from_date)->first().result&#xA; else&#xA; &#x9;/**NO NEED TO PUT DETAILS ON THE TAX CARD**/&#xA; &#x9;false&#xA; endif</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_S5strnMbEeWPJ7lHGUXAWg" name="Tax_Card_CE-constraint" constrainedElement="_S5sto3MbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5str3MbEeWPJ7lHGUXAWg">
            <language>OCL</language>
            <body>let set_ce : Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(deduction|deduction.oclIsTypeOf(Income_Tax_Deduction_Concepts::CE) and deduction.tax_year = self.valid_from_date),&#xA;&#x9;ce : Income_Tax_Deduction_Concepts::CE = set_ce->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE) in&#xA;&#x9;&#xA;&#x9;set_ce->size() = 1 &#xA;implies&#xA;&#xA;self.tax_card_type=Tax_Card_Type::Principal and&#xA;self.deduction_CE_yearly = ce.deductible_amount and&#xA;self.deduction_CE_monthly = ce.deductible_amount/12 and&#xA;self.deduction_CE_daily = self.deduction_CE_monthly/25 /**25 working days per month**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_S5stsHMbEeWPJ7lHGUXAWg" name="Tax_Card_FO-constraint" constrainedElement="_S5sto3MbEeWPJ7lHGUXAWg">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5stsXMbEeWPJ7lHGUXAWg">
            <language>OCL</language>
            <body>not self.oclIsUndefined()&#xA;implies&#xA;self.income.taxPayer.income_Tax_Deduction->select(d|d.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO) and d.tax_year = self.valid_from_date)->size() = 1&#xA;&#xA;and &#xA;&#xA;let fo : Income_Tax_Deduction_Concepts::FO = self.income_Tax_Deduction->select(d|d.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO) and d.tax_year = self.valid_from_date)->any(true).oclAsType(Income_Tax_Deduction_Concepts::FO) in&#xA;self.deduction_FO_daily = fo.daily and&#xA;self.deduction_FO_monthly = fo.monthly and&#xA;self.deduction_FO_yearly = fo.yearly&#xA;</body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:id="_S5stsnMbEeWPJ7lHGUXAWg" name="card_identifier" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sts3MbEeWPJ7lHGUXAWg" name="tax_card_type" visibility="public" type="_S5stTHMbEeWPJ7lHGUXAWg"/>
        <ownedAttribute xmi:id="_S5sttHMbEeWPJ7lHGUXAWg" name="tax_office" visibility="public" type="_S5stT3MbEeWPJ7lHGUXAWg"/>
        <ownedAttribute xmi:id="_S5sttXMbEeWPJ7lHGUXAWg" name="valid_from_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_S8C2cXMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5sttnMbEeWPJ7lHGUXAWg" name="valid_until_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_S8C2cXMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5stt3MbEeWPJ7lHGUXAWg" name="percentage_of_witholding" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5stuHMbEeWPJ7lHGUXAWg" name="income" visibility="private" type="_S5sslXMbEeWPJ7lHGUXAWg" association="_S5stXnMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5stuXMbEeWPJ7lHGUXAWg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5stunMbEeWPJ7lHGUXAWg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5stu3MbEeWPJ7lHGUXAWg" name="tax_Class" visibility="private" type="_S5ssY3MbEeWPJ7lHGUXAWg" association="_S5stZHMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5stvHMbEeWPJ7lHGUXAWg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5stvXMbEeWPJ7lHGUXAWg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5stvnMbEeWPJ7lHGUXAWg" name="tax_payers_SSno" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5stv3MbEeWPJ7lHGUXAWg" name="tax_payers_name_surname" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5stwHMbEeWPJ7lHGUXAWg" value="2"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5stwXMbEeWPJ7lHGUXAWg" value="2"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5stwnMbEeWPJ7lHGUXAWg" name="tax_payers_partner_name_surname" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5stw3MbEeWPJ7lHGUXAWg" value="2"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5stxHMbEeWPJ7lHGUXAWg" value="2"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTUHMbEeWPJ7lHGUXAWg" name="tax_payers_address" visibility="public" type="_S5sFQ3MbEeWPJ7lHGUXAWg" isDerived="true"/>
        <ownedAttribute xmi:id="_S5tTUXMbEeWPJ7lHGUXAWg" name="jobs_Employer_SSNo" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTUnMbEeWPJ7lHGUXAWg" name="jobs_employers_name" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTU3MbEeWPJ7lHGUXAWg" name="jobs_activity_type" visibility="public" type="_S5stSHMbEeWPJ7lHGUXAWg" isDerived="true"/>
        <ownedAttribute xmi:id="_S5tTVHMbEeWPJ7lHGUXAWg" name="jobs_place_of_work" visibility="public" type="_S5stWHMbEeWPJ7lHGUXAWg" isDerived="true"/>
        <ownedAttribute xmi:id="_S5tTVXMbEeWPJ7lHGUXAWg" name="deduction_FD_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTVnMbEeWPJ7lHGUXAWg" name="deduction_FD_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTV3MbEeWPJ7lHGUXAWg" name="deduction_FD_yearly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTWHMbEeWPJ7lHGUXAWg" name="deduction_AC_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTWXMbEeWPJ7lHGUXAWg" name="deduction_AC_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTWnMbEeWPJ7lHGUXAWg" name="deduction_AC_yearly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTW3MbEeWPJ7lHGUXAWg" name="deduction_CE_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTXHMbEeWPJ7lHGUXAWg" name="deduction_CE_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTXXMbEeWPJ7lHGUXAWg" name="deduction_CE_yearly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTXnMbEeWPJ7lHGUXAWg" name="deduction_DS_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTX3MbEeWPJ7lHGUXAWg" name="deduction_DS_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTYHMbEeWPJ7lHGUXAWg" name="deduction_DS_yearly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTYXMbEeWPJ7lHGUXAWg" name="deduction_FO_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTYnMbEeWPJ7lHGUXAWg" name="deduction_FO_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTY3MbEeWPJ7lHGUXAWg" name="deduction_FO_yearly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTZHMbEeWPJ7lHGUXAWg" name="credit_CIS_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTZXMbEeWPJ7lHGUXAWg" name="credit_CIS_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTZnMbEeWPJ7lHGUXAWg" name="credit_CIP_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTZ3MbEeWPJ7lHGUXAWg" name="credit_CIM_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTaHMbEeWPJ7lHGUXAWg" name="credit_CIM_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTaXMbEeWPJ7lHGUXAWg" name="tax_Payer" visibility="private" type="_S5sFuHMbEeWPJ7lHGUXAWg" association="_S5ssWHMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5tTanMbEeWPJ7lHGUXAWg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5tTa3MbEeWPJ7lHGUXAWg" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTbHMbEeWPJ7lHGUXAWg" name="income_Tax_Credit" visibility="private" type="_S5tTgnMbEeWPJ7lHGUXAWg" aggregation="shared" association="_S5tTeXMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5tTbXMbEeWPJ7lHGUXAWg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5tTbnMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTb3MbEeWPJ7lHGUXAWg" name="income_Tax_Deduction" visibility="private" type="_S5tT-HMbEeWPJ7lHGUXAWg" aggregation="shared" association="_S5tT93MbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5tTcHMbEeWPJ7lHGUXAWg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5tTcXMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTcnMbEeWPJ7lHGUXAWg" name="validity" visibility="protected">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTc3MbEeWPJ7lHGUXAWg" name="previous" visibility="private" type="_S5sto3MbEeWPJ7lHGUXAWg" association="_S5tTenMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5tTdHMbEeWPJ7lHGUXAWg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5tTdXMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTdnMbEeWPJ7lHGUXAWg" name="current_tax_card" visibility="private" type="_S5sto3MbEeWPJ7lHGUXAWg" association="_S5tTenMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5tTd3MbEeWPJ7lHGUXAWg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5tTeHMbEeWPJ7lHGUXAWg" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_S5tTeXMbEeWPJ7lHGUXAWg" name="include" memberEnd="_S5tTjnMbEeWPJ7lHGUXAWg _S5tTbHMbEeWPJ7lHGUXAWg"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_S5tTenMbEeWPJ7lHGUXAWg" name="invalidated by" memberEnd="_S5tTc3MbEeWPJ7lHGUXAWg _S5tTdnMbEeWPJ7lHGUXAWg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_S5tTe3MbEeWPJ7lHGUXAWg" name="Income_Tax_Credit_Concepts">
      <packagedElement xmi:type="uml:Class" xmi:id="_S5tTfHMbEeWPJ7lHGUXAWg" name="CIM">
        <generalization xmi:id="_S5tTfXMbEeWPJ7lHGUXAWg" general="_S5tTgnMbEeWPJ7lHGUXAWg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5tTfnMbEeWPJ7lHGUXAWg" name="CIP">
        <generalization xmi:id="_S5tTf3MbEeWPJ7lHGUXAWg" general="_S5tTgnMbEeWPJ7lHGUXAWg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5tTgHMbEeWPJ7lHGUXAWg" name="CIS">
        <generalization xmi:id="_S5tTgXMbEeWPJ7lHGUXAWg" general="_S5tTgnMbEeWPJ7lHGUXAWg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5tTgnMbEeWPJ7lHGUXAWg" name="Income_Tax_Credit">
        <ownedAttribute xmi:id="_S5tTg3MbEeWPJ7lHGUXAWg" name="grantedBy" visibility="public" type="_S5stMnMbEeWPJ7lHGUXAWg"/>
        <ownedAttribute xmi:id="_S5tThHMbEeWPJ7lHGUXAWg" name="taxPayer" visibility="private" type="_S5sFuHMbEeWPJ7lHGUXAWg" association="_S5stQXMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5tThXMbEeWPJ7lHGUXAWg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5tThnMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTh3MbEeWPJ7lHGUXAWg" name="tax_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTiHMbEeWPJ7lHGUXAWg" name="yearly" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_S5tTiXMbEeWPJ7lHGUXAWg" value="300">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTinMbEeWPJ7lHGUXAWg" name="monthly" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_S5tTi3MbEeWPJ7lHGUXAWg" value="25">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTjHMbEeWPJ7lHGUXAWg" name="daily" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_S5tTjXMbEeWPJ7lHGUXAWg" value="1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTjnMbEeWPJ7lHGUXAWg" name="taxation_Frame" visibility="private" type="_S5sto3MbEeWPJ7lHGUXAWg" association="_S5tTeXMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5tTj3MbEeWPJ7lHGUXAWg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5tTkHMbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_S5tTkXMbEeWPJ7lHGUXAWg" name="Income_Tax_Deduction_Concepts">
      <packagedElement xmi:type="uml:Class" xmi:id="_S5tTknMbEeWPJ7lHGUXAWg" name="FD">
        <generalization xmi:id="_S5tTk3MbEeWPJ7lHGUXAWg" general="_S5tT8nMbEeWPJ7lHGUXAWg"/>
        <ownedAttribute xmi:id="_S5tTlHMbEeWPJ7lHGUXAWg" name="distance_declared_in_january" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTlXMbEeWPJ7lHGUXAWg" name="calculated_distance" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_S5tTlnMbEeWPJ7lHGUXAWg" name="compute_distance_unit_between_home_and_workpalce" isQuery="true">
          <eAnnotations xmi:id="_S5tTl3MbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_S5tTmHMbEeWPJ7lHGUXAWg" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5tTmXMbEeWPJ7lHGUXAWg" name="FO">
        <generalization xmi:id="_S5tTmnMbEeWPJ7lHGUXAWg" general="_S5tT8nMbEeWPJ7lHGUXAWg"/>
        <ownedAttribute xmi:id="_S5tTm3MbEeWPJ7lHGUXAWg" name="rate_type_for_FO" visibility="public" type="_S5stZ3MbEeWPJ7lHGUXAWg" isDerived="true"/>
        <ownedOperation xmi:id="_S5tTnHMbEeWPJ7lHGUXAWg" name="compute_disability_flat_rate" isQuery="true">
          <eAnnotations xmi:id="_S5tTnXMbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_S5tTnnMbEeWPJ7lHGUXAWg" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S5tTn3MbEeWPJ7lHGUXAWg" name="compute_regular_flat_rate" isQuery="true">
          <eAnnotations xmi:id="_S5tToHMbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_S5tToXMbEeWPJ7lHGUXAWg" key="lookup"/>
          </eAnnotations>
          <ownedParameter xmi:id="_S5tTonMbEeWPJ7lHGUXAWg" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5tTo3MbEeWPJ7lHGUXAWg" name="CE">
        <eAnnotations xmi:id="_S5tTpHMbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
        <generalization xmi:id="_S5tTpXMbEeWPJ7lHGUXAWg" general="_S5tT-HMbEeWPJ7lHGUXAWg"/>
        <ownedAttribute xmi:id="_S5tTpnMbEeWPJ7lHGUXAWg" name="ce_deduction_type" visibility="public" type="_S5stanMbEeWPJ7lHGUXAWg"/>
        <ownedAttribute xmi:id="_S5tTp3MbEeWPJ7lHGUXAWg" name="dependent_relative_flat_rate" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tTqHMbEeWPJ7lHGUXAWg" name="disability_flat_rate" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_S5tTqXMbEeWPJ7lHGUXAWg" name="compute_disability_flat_rate_for_CE" isQuery="true" postcondition="_S5tTq3MbEeWPJ7lHGUXAWg">
          <eAnnotations xmi:id="_S5tTqnMbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_S5tTq3MbEeWPJ7lHGUXAWg" name="compute_disability_flat_rate" constrainedElement="_S5tTqXMbEeWPJ7lHGUXAWg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5tTrHMbEeWPJ7lHGUXAWg">
              <language>OCL</language>
              <body>if self.ce_deduction_type = CE_Type::INALIDITY_AND_INFIRMITY then&#xA;&#x9;self.disability_flat_rate = IN_disability_flat_rate&#xA;else&#xA;&#x9;false&#xA;endif&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_S5tTrXMbEeWPJ7lHGUXAWg" name="IN_disability_flat_rate">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S5tTrnMbEeWPJ7lHGUXAWg" name="compute_dependent_relative_flat_rate_for_CE" isQuery="true" postcondition="_S5tTsHMbEeWPJ7lHGUXAWg">
          <eAnnotations xmi:id="_S5tTr3MbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_S5tTsHMbEeWPJ7lHGUXAWg" name="dependent_relative_flat_rate" constrainedElement="_S5tTrnMbEeWPJ7lHGUXAWg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5tTsXMbEeWPJ7lHGUXAWg">
              <language>OCL</language>
              <body>if self.ce_deduction_type = CE_Type::DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD then&#xA;&#x9;self.dependent_relative_flat_rate = IN_dependent_relative_flat_rate&#xA;else&#x9;&#xA;&#x9;false&#xA;endif&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_S5tTsnMbEeWPJ7lHGUXAWg" name="IN_dependent_relative_flat_rate">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5tTs3MbEeWPJ7lHGUXAWg" name="AC">
        <generalization xmi:id="_S5tTtHMbEeWPJ7lHGUXAWg" general="_S5tT-HMbEeWPJ7lHGUXAWg"/>
        <ownedOperation xmi:id="_S5tTtXMbEeWPJ7lHGUXAWg" name="is_eligible_income_for_AC" isQuery="true" postcondition="_S5tTt3MbEeWPJ7lHGUXAWg">
          <eAnnotations xmi:id="_S5tTtnMbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_S5tTt3MbEeWPJ7lHGUXAWg" name="is_eligible_income_for_AC" constrainedElement="_S5tTtXMbEeWPJ7lHGUXAWg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5tTuHMbEeWPJ7lHGUXAWg">
              <language>OCL</language>
              <body>if IN_income.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or&#xA;&#x9;IN_income.income_type.oclIsTypeOf(Income_Concepts::Independent_Professional_Services_Income) or&#xA;&#x9;IN_income.income_type.oclIsTypeOf(Income_Concepts::Agriculture_and_Forestry_Income) or&#xA;&#x9;IN_income.income_type.oclIsTypeOf(Income_Concepts::Trade_and_Business_Income) then&#xA;&#x9;result = true&#xA;else&#xA;&#x9;result=false&#xA;endif&#xA; </body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_S5tTuXMbEeWPJ7lHGUXAWg" name="IN_income" type="_S5sslXMbEeWPJ7lHGUXAWg"/>
          <ownedParameter xmi:id="_S5tTunMbEeWPJ7lHGUXAWg" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S5tTu3MbEeWPJ7lHGUXAWg" name="is_eligible_income_for_AC_assisting_spouse" isQuery="true" postcondition="_S5tTvXMbEeWPJ7lHGUXAWg">
          <eAnnotations xmi:id="_S5tTvHMbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_S5tTvXMbEeWPJ7lHGUXAWg" name="is_eligible_income_for_AC_assisting_spouse" constrainedElement="_S5tTu3MbEeWPJ7lHGUXAWg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5tTvnMbEeWPJ7lHGUXAWg">
              <language>OCL</language>
              <body>if  IN_income.income_type.oclIsTypeOf(Income_Concepts::Independent_Professional_Services_Income) or&#xA;&#x9;IN_income.income_type.oclIsTypeOf(Income_Concepts::Trade_and_Business_Income) then&#xA;&#x9;result = true&#xA;else&#xA;&#x9;result=false&#xA;endif&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_S5tTv3MbEeWPJ7lHGUXAWg" name="IN_income" type="_S5sslXMbEeWPJ7lHGUXAWg"/>
          <ownedParameter xmi:id="_S5tTwHMbEeWPJ7lHGUXAWg" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5tTwXMbEeWPJ7lHGUXAWg" name="DS_for_Permanent_Expense">
        <generalization xmi:id="_S5tTwnMbEeWPJ7lHGUXAWg" general="_S5tT9HMbEeWPJ7lHGUXAWg"/>
        <ownedAttribute xmi:id="_S5tTw3MbEeWPJ7lHGUXAWg" name="permanent_expense_category" visibility="public" type="_S5stE3MbEeWPJ7lHGUXAWg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5tTxHMbEeWPJ7lHGUXAWg" name="DS_for_Interest_Expense">
        <generalization xmi:id="_S5tTxXMbEeWPJ7lHGUXAWg" general="_S5tT9HMbEeWPJ7lHGUXAWg"/>
        <ownedOperation xmi:id="_S5tTxnMbEeWPJ7lHGUXAWg" name="compute_maximum_deductible_amount" isQuery="true" postcondition="_S5tTyHMbEeWPJ7lHGUXAWg">
          <eAnnotations xmi:id="_S5tTx3MbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_S5tTyHMbEeWPJ7lHGUXAWg" name="maximum_deductible_amount" constrainedElement="_S5tTxnMbEeWPJ7lHGUXAWg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5tTyXMbEeWPJ7lHGUXAWg">
              <language>OCL</language>
              <body>result = 1 and&#xA;self.maximum_deductible_amount = 1&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_S5tTynMbEeWPJ7lHGUXAWg" name="result" isOrdered="true" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S5tTy3MbEeWPJ7lHGUXAWg" name="IN_children_with_allowances" type="_S5sFTHMbEeWPJ7lHGUXAWg">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5tTzHMbEeWPJ7lHGUXAWg" value="*"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5tTzXMbEeWPJ7lHGUXAWg"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S5tTznMbEeWPJ7lHGUXAWg" name="IN_legal_union" type="_S5sFf3MbEeWPJ7lHGUXAWg">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5tTz3MbEeWPJ7lHGUXAWg" value="*"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5tT0HMbEeWPJ7lHGUXAWg"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5tT0XMbEeWPJ7lHGUXAWg" name="DS_for_Health_and_Pension_Insurance">
        <generalization xmi:id="_S5tT0nMbEeWPJ7lHGUXAWg" general="_S5tT9HMbEeWPJ7lHGUXAWg"/>
        <ownedAttribute xmi:id="_S5tT03MbEeWPJ7lHGUXAWg" name="insurance_category" visibility="public" type="_S5stHHMbEeWPJ7lHGUXAWg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5tT1HMbEeWPJ7lHGUXAWg" name="DS_for_Private_Insurance_and_Plan">
        <generalization xmi:id="_S5tT1XMbEeWPJ7lHGUXAWg" general="_S5tT9HMbEeWPJ7lHGUXAWg"/>
        <ownedAttribute xmi:id="_S5tT1nMbEeWPJ7lHGUXAWg" name="private_insurance_and_plan_category" visibility="public" type="_S5stFnMbEeWPJ7lHGUXAWg"/>
        <ownedAttribute xmi:id="_S5tT13MbEeWPJ7lHGUXAWg" name="increase_for_life_insurance" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tT2HMbEeWPJ7lHGUXAWg" name="maximum_deductible_amount_for_private_insurance" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tT2XMbEeWPJ7lHGUXAWg" name="maximum_deductible_amount_for_old_age_pension_plan" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_S5tT2nMbEeWPJ7lHGUXAWg" name="compute_increase_for_life_insurance" isQuery="true" postcondition="_S5tT3HMbEeWPJ7lHGUXAWg">
          <eAnnotations xmi:id="_S5tT23MbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_S5tT3HMbEeWPJ7lHGUXAWg" name="get_increase_for_life_insurance" constrainedElement="_S5tT2nMbEeWPJ7lHGUXAWg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5tT3XMbEeWPJ7lHGUXAWg">
              <language>OCL</language>
              <body>result = 1&#xA;and self.increase_for_life_insurance = 1&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_S5tT3nMbEeWPJ7lHGUXAWg" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_S5tT33MbEeWPJ7lHGUXAWg" name="compute_maximum_deductible_amount_for_private_insruance" isQuery="true" postcondition="_S5tT4XMbEeWPJ7lHGUXAWg">
          <eAnnotations xmi:id="_S5tT4HMbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_S5tT4XMbEeWPJ7lHGUXAWg" name="get_maximum_deductible_amount_for_private_insurance" constrainedElement="_S5tT33MbEeWPJ7lHGUXAWg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5tT4nMbEeWPJ7lHGUXAWg">
              <language>OCL</language>
              <body>self.maximum_deductible_amount_for_private_insurance = 1&#xA;</body>
            </specification>
          </ownedRule>
        </ownedOperation>
        <ownedOperation xmi:id="_S5tT43MbEeWPJ7lHGUXAWg" name="compute_maximum_deductible_amount_for_old_age_pension_plan" isQuery="true" postcondition="_S5tT5XMbEeWPJ7lHGUXAWg">
          <eAnnotations xmi:id="_S5tT5HMbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_S5tT5XMbEeWPJ7lHGUXAWg" name="maximum_deductible_amount_for_old_age_pension_plan" constrainedElement="_S5tT43MbEeWPJ7lHGUXAWg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5tT5nMbEeWPJ7lHGUXAWg">
              <language>OCL</language>
              <body>maximum_deductible_amount_for_old_age_pension_plan = 1&#xA;</body>
            </specification>
          </ownedRule>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5tT53MbEeWPJ7lHGUXAWg" name="DS_for_Loss_Carryforward">
        <generalization xmi:id="_S5tT6HMbEeWPJ7lHGUXAWg" general="_S5tT9HMbEeWPJ7lHGUXAWg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5tT6XMbEeWPJ7lHGUXAWg" name="DS_for_Donation">
        <generalization xmi:id="_S5tT6nMbEeWPJ7lHGUXAWg" general="_S5tT9HMbEeWPJ7lHGUXAWg"/>
        <ownedOperation xmi:id="_S5tT63MbEeWPJ7lHGUXAWg" name="compute_maximum_deductible_amount_for_donation" isQuery="true" postcondition="_S5tT7XMbEeWPJ7lHGUXAWg">
          <eAnnotations xmi:id="_S5tT7HMbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_S5tT7XMbEeWPJ7lHGUXAWg" name="maximum_deductible_amount" constrainedElement="_S5tT63MbEeWPJ7lHGUXAWg">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_S5tT7nMbEeWPJ7lHGUXAWg">
              <language>OCL</language>
              <body>if IN_maximum_percentage = Constants::MAXIMUM_DEDUCTIBLE_PERCENTAGE_FOR_DONATIONS then&#xA;&#x9;self.maximum_deductible_amount = IN_maximum_percentage.oclAsType(Integer)/100 * IN_total_tax_payer_income&#xA;else&#xA;&#x9;false&#xA;endif&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_S5tT73MbEeWPJ7lHGUXAWg" name="IN_maximum_percentage" type="_S5stc3MbEeWPJ7lHGUXAWg"/>
          <ownedParameter xmi:id="_S5tT8HMbEeWPJ7lHGUXAWg" name="IN_total_tax_payer_income">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_S5tT8XMbEeWPJ7lHGUXAWg" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5tT8nMbEeWPJ7lHGUXAWg" name="Professional_Expenses_Deduction">
        <generalization xmi:id="_S5tT83MbEeWPJ7lHGUXAWg" general="_S5tT-HMbEeWPJ7lHGUXAWg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5tT9HMbEeWPJ7lHGUXAWg" name="DS">
        <generalization xmi:id="_S5tT9XMbEeWPJ7lHGUXAWg" general="_S5tT-HMbEeWPJ7lHGUXAWg"/>
        <ownedAttribute xmi:id="_S5tT9nMbEeWPJ7lHGUXAWg" name="maximum_deductible_amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_S5tT93MbEeWPJ7lHGUXAWg" name="considers" memberEnd="_S5tUAXMbEeWPJ7lHGUXAWg _S5tTb3MbEeWPJ7lHGUXAWg"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_S5tT-HMbEeWPJ7lHGUXAWg" name="Income_Tax_Deduction">
        <ownedAttribute xmi:id="_S5tT-XMbEeWPJ7lHGUXAWg" name="tax_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tT-nMbEeWPJ7lHGUXAWg" name="daily" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tT-3MbEeWPJ7lHGUXAWg" name="monthly" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tT_HMbEeWPJ7lHGUXAWg" name="yearly" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tT_XMbEeWPJ7lHGUXAWg" name="tax_Payer" visibility="private" type="_S5sFuHMbEeWPJ7lHGUXAWg" association="_S5stZXMbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5tT_nMbEeWPJ7lHGUXAWg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5tT_3MbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tUAHMbEeWPJ7lHGUXAWg" name="deductible_amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tUAXMbEeWPJ7lHGUXAWg" name="tax_card" visibility="private" type="_S5sto3MbEeWPJ7lHGUXAWg" association="_S5tT93MbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5tUAnMbEeWPJ7lHGUXAWg" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5tUA3MbEeWPJ7lHGUXAWg"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_S5tUBHMbEeWPJ7lHGUXAWg" name="expenses" visibility="private" type="_S5stIXMbEeWPJ7lHGUXAWg" association="_S5tUB3MbEeWPJ7lHGUXAWg">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_S5tUBXMbEeWPJ7lHGUXAWg" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_S5tUBnMbEeWPJ7lHGUXAWg" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_S5tUB3MbEeWPJ7lHGUXAWg" name="is computed based on" memberEnd="_S5tUBHMbEeWPJ7lHGUXAWg _S5stL3MbEeWPJ7lHGUXAWg"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="_S5tUCHMbEeWPJ7lHGUXAWg" name="Interface1"/>
    <packagedElement xmi:type="uml:DataType" xmi:id="_S5tUCXMbEeWPJ7lHGUXAWg" name="DataType1"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_S5tUCnMbEeWPJ7lHGUXAWg" name="Class1"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_S5tUC3MbEeWPJ7lHGUXAWg" name="Class2"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_S5tUDHMbEeWPJ7lHGUXAWg" name="Class3"/>
    <profileApplication xmi:id="_S5tUDXMbEeWPJ7lHGUXAWg">
      <eAnnotations xmi:id="_S5tUDnMbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://UML_PROFILES/Standard.profile.uml#_yzU58YinEdqtvbnfB2L_5w"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_PROFILES/Standard.profile.uml#_0"/>
    </profileApplication>
    <profileApplication xmi:id="_S5tUD3MbEeWPJ7lHGUXAWg">
      <eAnnotations xmi:id="_S5tUEHMbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="Default.profile.uml#_S5vvsXMbEeWPJ7lHGUXAWg"/>
      </eAnnotations>
      <appliedProfile href="Default.profile.uml#_S5vvr3MbEeWPJ7lHGUXAWg"/>
    </profileApplication>
    <profileApplication xmi:id="_S5tUEXMbEeWPJ7lHGUXAWg">
      <eAnnotations xmi:id="_S5tUEnMbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="Deployment.profile.uml#_S8IWgXMbEeWPJ7lHGUXAWg"/>
      </eAnnotations>
      <appliedProfile href="Deployment.profile.uml#_S8IWf3MbEeWPJ7lHGUXAWg"/>
    </profileApplication>
    <profileApplication xmi:id="_S5tUE3MbEeWPJ7lHGUXAWg">
      <eAnnotations xmi:id="_S5tUFHMbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="MARTE_VSL.profile.uml#_S8BAoXMbEeWPJ7lHGUXAWg"/>
      </eAnnotations>
      <appliedProfile href="MARTE_VSL.profile.uml#_S8BAn3MbEeWPJ7lHGUXAWg"/>
    </profileApplication>
    <profileApplication xmi:id="_S5tUFXMbEeWPJ7lHGUXAWg">
      <eAnnotations xmi:id="_S5tUFnMbEeWPJ7lHGUXAWg" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="MARTE_Time.profile.uml#_S7_N4nMbEeWPJ7lHGUXAWg"/>
      </eAnnotations>
      <appliedProfile href="MARTE_Time.profile.uml#_S7_N4HMbEeWPJ7lHGUXAWg"/>
    </profileApplication>
  </uml:Package>
  <Default:Documentation xmi:id="_S5tUF3MbEeWPJ7lHGUXAWg" base_Comment="_S5sseHMbEeWPJ7lHGUXAWg"/>
  <Default:Documentation xmi:id="_S5tUGHMbEeWPJ7lHGUXAWg" base_Comment="_S5sFgHMbEeWPJ7lHGUXAWg"/>
</xmi:XMI>
