<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.1" xmlns:xmi="http://schema.omg.org/spec/XMI/2.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:Default="http:///schemas/Default/_fNm3AAqoEd6-N_NOT9vsCA/2" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/3.0.0/UML" xsi:schemaLocation="http:///schemas/Default/_fNm3AAqoEd6-N_NOT9vsCA/2 Default.profile.uml#_X-ZiK5Q8EeSd4Lrb6aNbyQ">
  <uml:Package xmi:id="_X-j77pQ8EeSd4Lrb6aNbyQ" name="TaxCard">
    <packageImport xmi:id="_X-j775Q8EeSd4Lrb6aNbyQ">
      <importedPackage xmi:type="uml:Model" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#_0"/>
    </packageImport>
    <packageImport xmi:id="_X-j78JQ8EeSd4Lrb6aNbyQ">
      <importedPackage xmi:type="uml:Model" href="pathmap://UML_LIBRARIES/JavaPrimitiveTypes.library.uml#_0"/>
    </packageImport>
    <packageImport xmi:id="_X-j78ZQ8EeSd4Lrb6aNbyQ">
      <importedPackage xmi:type="uml:Model" href="MARTELibrary.uml#_X-dM2JQ8EeSd4Lrb6aNbyQ"/>
    </packageImport>
    <packagedElement xmi:type="uml:Package" xmi:id="_X-j78pQ8EeSd4Lrb6aNbyQ" name="Tax_Card_Domain">
      <packageImport xmi:id="_X-j785Q8EeSd4Lrb6aNbyQ" importedPackage="_X-kjR5Q8EeSd4Lrb6aNbyQ"/>
      <packageImport xmi:id="_X-j79JQ8EeSd4Lrb6aNbyQ" importedPackage="_X-j7-ZQ8EeSd4Lrb6aNbyQ"/>
      <packageImport xmi:id="_X-j79ZQ8EeSd4Lrb6aNbyQ" importedPackage="_X-kjMZQ8EeSd4Lrb6aNbyQ"/>
      <packageImport xmi:id="_X-j79pQ8EeSd4Lrb6aNbyQ" importedPackage="_X-khtZQ8EeSd4Lrb6aNbyQ"/>
      <packageImport xmi:id="_X-j795Q8EeSd4Lrb6aNbyQ" importedPackage="_X-kh9ZQ8EeSd4Lrb6aNbyQ"/>
      <packageImport xmi:id="_X-j7-JQ8EeSd4Lrb6aNbyQ" importedPackage="_X-ki45Q8EeSd4Lrb6aNbyQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_X-j7-ZQ8EeSd4Lrb6aNbyQ" name="Tax_Payer_Concepts">
      <packagedElement xmi:type="uml:Association" xmi:id="_X-j7-pQ8EeSd4Lrb6aNbyQ" name="taxed under" memberEnd="_X-khd5Q8EeSd4Lrb6aNbyQ _X-khppQ8EeSd4Lrb6aNbyQ"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-j7-5Q8EeSd4Lrb6aNbyQ" name="Income_Tax">
        <ownedAttribute xmi:id="_X-j7_JQ8EeSd4Lrb6aNbyQ" name="taxPayer" visibility="private" type="_X-khQJQ8EeSd4Lrb6aNbyQ" association="_X-kho5Q8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-j7_ZQ8EeSd4Lrb6aNbyQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-j7_pQ8EeSd4Lrb6aNbyQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-j7_5Q8EeSd4Lrb6aNbyQ" name="tax_amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-j8AJQ8EeSd4Lrb6aNbyQ" name="tax_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_X-dzwZQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-j8AZQ8EeSd4Lrb6aNbyQ" name="Address">
        <ownedAttribute xmi:id="_X-j8ApQ8EeSd4Lrb6aNbyQ" name="taxPayer" visibility="private" type="_X-j8T5Q8EeSd4Lrb6aNbyQ" association="_X-khmpQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-j8A5Q8EeSd4Lrb6aNbyQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-j8BJQ8EeSd4Lrb6aNbyQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-j8BZQ8EeSd4Lrb6aNbyQ" name="country" visibility="public" type="_X-kie5Q8EeSd4Lrb6aNbyQ">
          <defaultValue xmi:type="uml:InstanceValue" xmi:id="_X-j8BpQ8EeSd4Lrb6aNbyQ" name="LU" type="_X-kie5Q8EeSd4Lrb6aNbyQ" instance="_X-kifJQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-j8B5Q8EeSd4Lrb6aNbyQ" name="street" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-j8CJQ8EeSd4Lrb6aNbyQ" name="zipCode" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-j8CZQ8EeSd4Lrb6aNbyQ" name="city" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-j8CpQ8EeSd4Lrb6aNbyQ" name="Dependent">
        <generalization xmi:id="_X-j8C5Q8EeSd4Lrb6aNbyQ" general="_X-j8T5Q8EeSd4Lrb6aNbyQ"/>
        <ownedAttribute xmi:id="_X-j8DJQ8EeSd4Lrb6aNbyQ" name="dependent_type" visibility="public" type="_X-kioJQ8EeSd4Lrb6aNbyQ"/>
        <ownedAttribute xmi:id="_X-j8DZQ8EeSd4Lrb6aNbyQ" name="household" visibility="private" type="_X-j8NpQ8EeSd4Lrb6aNbyQ" association="_X-khoZQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-j8DpQ8EeSd4Lrb6aNbyQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-j8D5Q8EeSd4Lrb6aNbyQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-j8EJQ8EeSd4Lrb6aNbyQ" name="responsible_person" visibility="private" type="_X-khQJQ8EeSd4Lrb6aNbyQ" association="_X-khoJQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-j8EZQ8EeSd4Lrb6aNbyQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-j8EpQ8EeSd4Lrb6aNbyQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-j8E5Q8EeSd4Lrb6aNbyQ" name="continued_studies" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_X-j8FJQ8EeSd4Lrb6aNbyQ">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-j8FZQ8EeSd4Lrb6aNbyQ" name="expense" visibility="private" type="_X-kiYpQ8EeSd4Lrb6aNbyQ" association="_X-khopQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-j8FpQ8EeSd4Lrb6aNbyQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-j8F5Q8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-j8GJQ8EeSd4Lrb6aNbyQ" name="tax_Payer" visibility="private" type="_X-khQJQ8EeSd4Lrb6aNbyQ" association="_X-khn5Q8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-j8GZQ8EeSd4Lrb6aNbyQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-j8GpQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_X-j8G5Q8EeSd4Lrb6aNbyQ" name="compute_if_dependent_receives_allowances_eligible_for_CIM" isQuery="true">
          <eAnnotations xmi:id="_X-j8HJQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_X-j8HZQ8EeSd4Lrb6aNbyQ" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_X-j8HpQ8EeSd4Lrb6aNbyQ" name="compute_if_dependent_receives_allowances_eligible_for_DS" isQuery="true">
          <eAnnotations xmi:id="_X-j8H5Q8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_X-j8IJQ8EeSd4Lrb6aNbyQ" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_X-j8IZQ8EeSd4Lrb6aNbyQ" name="compute_if_dependent_receives_allowances_eligible_for_CE_dependance_and_care" isQuery="true">
          <eAnnotations xmi:id="_X-j8IpQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_X-j8I5Q8EeSd4Lrb6aNbyQ" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_X-j8JJQ8EeSd4Lrb6aNbyQ" name="is_dependent_following_continued_studies" isQuery="true" postcondition="_X-j8JpQ8EeSd4Lrb6aNbyQ">
          <eAnnotations xmi:id="_X-j8JZQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_X-j8JpQ8EeSd4Lrb6aNbyQ" name="is_dependent_following_continued_studies" constrainedElement="_X-j8JJQ8EeSd4Lrb6aNbyQ">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-j8J5Q8EeSd4Lrb6aNbyQ">
              <language>OCL</language>
              <body>self.continued_studies = IN_continued_studies&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_X-j8KJQ8EeSd4Lrb6aNbyQ" name="IN_continued_studies">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_X-j8KZQ8EeSd4Lrb6aNbyQ" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-j8KpQ8EeSd4Lrb6aNbyQ" name="External_Allowance">
        <ownedAttribute xmi:id="_X-j8K5Q8EeSd4Lrb6aNbyQ" name="amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-j8LJQ8EeSd4Lrb6aNbyQ" name="grantor" visibility="public" type="_X-kic5Q8EeSd4Lrb6aNbyQ"/>
        <ownedAttribute xmi:id="_X-j8LZQ8EeSd4Lrb6aNbyQ" name="person" visibility="private" type="_X-j8T5Q8EeSd4Lrb6aNbyQ" association="_X-khm5Q8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-j8LpQ8EeSd4Lrb6aNbyQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-j8L5Q8EeSd4Lrb6aNbyQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-j8MJQ8EeSd4Lrb6aNbyQ" name="valid_from_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_X-dzwZQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-j8MZQ8EeSd4Lrb6aNbyQ" name="valid_until_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_X-dzwZQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-j8MpQ8EeSd4Lrb6aNbyQ" name="Fiscal_Address">
        <generalization xmi:id="_X-j8M5Q8EeSd4Lrb6aNbyQ" general="_X-j8AZQ8EeSd4Lrb6aNbyQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-j8NJQ8EeSd4Lrb6aNbyQ" name="Habitual_Address">
        <generalization xmi:id="_X-j8NZQ8EeSd4Lrb6aNbyQ" general="_X-j8AZQ8EeSd4Lrb6aNbyQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-j8NpQ8EeSd4Lrb6aNbyQ" name="Household">
        <ownedAttribute xmi:id="_X-j8N5Q8EeSd4Lrb6aNbyQ" name="tax_Payer" visibility="private" type="_X-khQJQ8EeSd4Lrb6aNbyQ" association="_X-khnpQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-j8OJQ8EeSd4Lrb6aNbyQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-j8OZQ8EeSd4Lrb6aNbyQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-j8OpQ8EeSd4Lrb6aNbyQ" name="dependent" visibility="private" type="_X-j8CpQ8EeSd4Lrb6aNbyQ" association="_X-khoZQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-j8O5Q8EeSd4Lrb6aNbyQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-j8PJQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-j8PZQ8EeSd4Lrb6aNbyQ" name="Legal_Union_Record">
        <ownedComment xmi:id="_X-j8PpQ8EeSd4Lrb6aNbyQ" annotatedElement="_X-j8PZQ8EeSd4Lrb6aNbyQ">
          <body>&lt;p>&lt;span style=&quot;font-size:16pt;&quot;>When&amp;nbsp;a&amp;nbsp;decision&amp;nbsp;for&amp;nbsp;Dates&amp;nbsp;would&amp;nbsp;be&amp;nbsp;taken,&amp;nbsp;&lt;/span>&lt;/p>&lt;p>&lt;span style=&quot;font-size:16pt;&quot;>we&amp;nbsp;must&amp;nbsp;take&amp;nbsp;into&amp;nbsp;account&amp;nbsp;that&amp;nbsp;all&amp;nbsp;marriages&amp;nbsp;and&amp;nbsp;partnerships&amp;nbsp;are&amp;nbsp;mutually&amp;nbsp;exclusive.&lt;/span>&lt;/p></body>
        </ownedComment>
        <ownedRule xmi:id="_X-j8P5Q8EeSd4Lrb6aNbyQ" name="Legal_Union-different_people-constraint" constrainedElement="_X-j8PZQ8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-j8QJQ8EeSd4Lrb6aNbyQ">
            <language>OCL</language>
            <body>if self.end_date.oclIsUndefined() then&#xA;/**LEGAL UNION IS VALID**/&#xA;self.individual_A.SSNo &lt;> self.individual_B.SSNo&#xA;and&#xA;self.individual_A->size()=1 and&#xA;self.individual_B->size()=1&#xA;else&#xA;/**LEGAL UNION IS AUTHORIZED WITH ONLY ONE PERSON**/&#xA;false&#xA;endif&#xA;</body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:id="_X-j8QZQ8EeSd4Lrb6aNbyQ" name="start_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_X-dzwZQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-j8QpQ8EeSd4Lrb6aNbyQ" name="end_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_X-dzwZQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-j8Q5Q8EeSd4Lrb6aNbyQ" name="individual_A" visibility="private" type="_X-j8T5Q8EeSd4Lrb6aNbyQ" association="_X-khnZQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-j8RJQ8EeSd4Lrb6aNbyQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-j8RZQ8EeSd4Lrb6aNbyQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-j8RpQ8EeSd4Lrb6aNbyQ" name="individual_B" visibility="private" type="_X-j8T5Q8EeSd4Lrb6aNbyQ" association="_X-khnJQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-j8R5Q8EeSd4Lrb6aNbyQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-j8SJQ8EeSd4Lrb6aNbyQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-j8SZQ8EeSd4Lrb6aNbyQ" name="Marriage_Record">
        <generalization xmi:id="_X-j8SpQ8EeSd4Lrb6aNbyQ" general="_X-j8PZQ8EeSd4Lrb6aNbyQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-j8S5Q8EeSd4Lrb6aNbyQ" name="Non_Resident_Tax_Payer">
        <generalization xmi:id="_X-j8TJQ8EeSd4Lrb6aNbyQ" general="_X-khQJQ8EeSd4Lrb6aNbyQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-j8TZQ8EeSd4Lrb6aNbyQ" name="Partnership_Record">
        <generalization xmi:id="_X-j8TpQ8EeSd4Lrb6aNbyQ" general="_X-j8PZQ8EeSd4Lrb6aNbyQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-j8T5Q8EeSd4Lrb6aNbyQ" name="Physical_Person">
        <ownedAttribute xmi:id="_X-j8UJQ8EeSd4Lrb6aNbyQ" name="name" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-j8UZQ8EeSd4Lrb6aNbyQ" name="is_assisting_spouse" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-j8UpQ8EeSd4Lrb6aNbyQ" name="SSNo" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-j8U5Q8EeSd4Lrb6aNbyQ" name="allowances" visibility="private" type="_X-j8KpQ8EeSd4Lrb6aNbyQ" association="_X-khm5Q8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-j8VJQ8EeSd4Lrb6aNbyQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-j8VZQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-khIJQ8EeSd4Lrb6aNbyQ" name="addresses" visibility="private" type="_X-j8AZQ8EeSd4Lrb6aNbyQ" association="_X-khmpQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-khIZQ8EeSd4Lrb6aNbyQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-khIpQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-khI5Q8EeSd4Lrb6aNbyQ" name="legal_union_A" visibility="private" type="_X-j8PZQ8EeSd4Lrb6aNbyQ" association="_X-khnZQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-khJJQ8EeSd4Lrb6aNbyQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-khJZQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-khJpQ8EeSd4Lrb6aNbyQ" name="legal_union_B" visibility="private" type="_X-j8PZQ8EeSd4Lrb6aNbyQ" association="_X-khnJQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-khJ5Q8EeSd4Lrb6aNbyQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-khKJQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-khKZQ8EeSd4Lrb6aNbyQ" name="age" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-khKpQ8EeSd4Lrb6aNbyQ" name="disability_percentage" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_X-khK5Q8EeSd4Lrb6aNbyQ">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-khLJQ8EeSd4Lrb6aNbyQ" name="is_affiliated_personnaly_to_social_security" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_X-khLZQ8EeSd4Lrb6aNbyQ" name="is_separated_from" isQuery="true">
          <eAnnotations xmi:id="_X-khLpQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_X-khL5Q8EeSd4Lrb6aNbyQ" key="computaion"/>
          </eAnnotations>
          <ownedParameter xmi:id="_X-khMJQ8EeSd4Lrb6aNbyQ" name="IN_person" type="_X-j8T5Q8EeSd4Lrb6aNbyQ"/>
          <ownedParameter xmi:id="_X-khMZQ8EeSd4Lrb6aNbyQ" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_X-khMpQ8EeSd4Lrb6aNbyQ" name="is_person_assisting_spouse" isQuery="true" postcondition="_X-khNJQ8EeSd4Lrb6aNbyQ">
          <eAnnotations xmi:id="_X-khM5Q8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_X-khNJQ8EeSd4Lrb6aNbyQ" name="is_assisting_spouse" constrainedElement="_X-khMpQ8EeSd4Lrb6aNbyQ">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-khNZQ8EeSd4Lrb6aNbyQ">
              <language>OCL</language>
              <body>self.is_assisting_spouse = IN_assisting_spouse&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_X-khNpQ8EeSd4Lrb6aNbyQ" name="IN_assisting_spouse">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_X-khN5Q8EeSd4Lrb6aNbyQ" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_X-khOJQ8EeSd4Lrb6aNbyQ" name="is_person_affiliated_personnaly_to_social_security" isQuery="true" postcondition="_X-khOpQ8EeSd4Lrb6aNbyQ">
          <eAnnotations xmi:id="_X-khOZQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_X-khOpQ8EeSd4Lrb6aNbyQ" name="is_person_affiliated_personnaly_affiliated_to_social_security" constrainedElement="_X-khOJQ8EeSd4Lrb6aNbyQ">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-khO5Q8EeSd4Lrb6aNbyQ">
              <language>OCL</language>
              <body>self.is_affiliated_personnaly_to_social_security = IN_personnaly_affiliated&#xA;&#xA;&#xA;&#xA;&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_X-khPJQ8EeSd4Lrb6aNbyQ" name="IN_personnaly_affiliated">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_X-khPZQ8EeSd4Lrb6aNbyQ" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-khPpQ8EeSd4Lrb6aNbyQ" name="Resident_Tax_Payer">
        <generalization xmi:id="_X-khP5Q8EeSd4Lrb6aNbyQ" general="_X-khQJQ8EeSd4Lrb6aNbyQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-khQJQ8EeSd4Lrb6aNbyQ" name="Tax_Payer">
        <ownedRule xmi:id="_X-khQZQ8EeSd4Lrb6aNbyQ" name="NonResidentTaxPayer-constraint" constrainedElement="_X-j8S5Q8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-khQpQ8EeSd4Lrb6aNbyQ">
            <language>OCL</language>
            <body>&#x9;self.addresses->exists( fiscal_add:Address | &#xA;&#x9;&#x9;fiscal_add.oclIsTypeOf(Fiscal_Address) and fiscal_add.country&lt;>Country::LU) and&#xA;&#x9;self.addresses->exists( hab_add:Address | &#xA;&#x9;&#x9;hab_add.oclIsTypeOf(Habitual_Address) and hab_add.country&lt;>Country::LU) and&#xA;&#x9;self.incomes->exists(inc:Income_Concepts::Income | inc.oclIsTypeOf(Income_Concepts::Local_Income))&#xA;implies&#xA;&#x9;self.oclIsTypeOf(Non_Resident_Tax_Payer)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_X-khQ5Q8EeSd4Lrb6aNbyQ" name="ResidentTaxPayer-constraint" constrainedElement="_X-khPpQ8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-khRJQ8EeSd4Lrb6aNbyQ">
            <language>OCL</language>
            <body>&#x9;self.addresses->exists( fiscal_add:Address | &#xA;&#x9;&#x9;fiscal_add.oclIsTypeOf(Fiscal_Address) and fiscal_add.country=Country::LU) or&#xA;&#x9;self.addresses->exists( hab_add:Address | &#xA;&#x9;&#x9;hab_add.oclIsTypeOf(Habitual_Address) and hab_add.country=Country::LU) &#xA;implies&#xA;&#x9;self.oclIsTypeOf(Resident_Tax_Payer)</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_X-khRZQ8EeSd4Lrb6aNbyQ" name="SubjectToIncomeTax-constraint" constrainedElement="_X-khQJQ8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-khRpQ8EeSd4Lrb6aNbyQ" name="subjectToIncomeTax ">
            <language>OCL</language>
            <body>&#x9;self.incomes->exists(inc:Income_Concepts::Income |&#xA;&#x9;&#x9; inc.oclIsTypeOf(Income_Concepts::Local_Income) or inc.oclIsTypeOf(Income_Concepts::Foreign_Income))&#xA;implies&#xA;&#x9;not self.incomeTax->isEmpty()&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_X-khR5Q8EeSd4Lrb6aNbyQ" name="TaxCredit-CIS-constraint" constrainedElement="_X-khQJQ8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-khSJQ8EeSd4Lrb6aNbyQ">
            <language>OCL</language>
            <body>let   employement_income: Set(Income_Concepts::Income) = &#xA;      &#x9;self.incomes->select(inc|&#xA;      &#x9;&#x9;inc.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;not inc.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;   &#x9;   &#x9;&#x9;inc.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) and&#xA;       &#x9;&#x9;inc.start_date_within_taxation_year=self.incomeTax.tax_year),&#xA;       &#x9;total_income: Integer = employement_income.income_amount->sum(),&#xA;&#x9;&#x9;tax_liability :Integer = employement_income.tax_liability->sum() in&#xA;&#x9;&#x9;&#x9; &#x9;&#x9; &#xA;&#x9;&#x9;&#xA;&#x9;if(employement_income->size()>0) then&#xA;&#x9;&#x9; if (total_income>936*tax_liability) then&#xA;&#x9;&#x9; let set_of_CIS: Set(Income_Tax_Credit_Concepts::Income_Tax_Credit) = self.income_Tax_Credit->select(type|type.oclIsTypeOf(Income_Tax_Credit_Concepts::CIS) and type.tax_year=self.incomeTax.tax_year),&#xA;&#x9;&#x9;&#x9;size_set_of_CIS :Integer = set_of_CIS->size(),&#xA;&#x9;&#x9;&#x9; a_CIS: Income_Tax_Credit_Concepts::Income_Tax_Credit = set_of_CIS->any(true) in&#xA;&#x9; &#x9;    &#xA;&#x9; &#x9;    size_set_of_CIS = 1 and&#xA;&#x9;&#x9;&#x9;/**CIS IS CREDITED TO THE TAX PAYER**/&#xA;&#x9;&#x9;&#x9;a_CIS.yearly = Constants::FLAT_RATE_CIS_YEARLY.oclAsType(Integer)*tax_liability&#xA;      &#x9;else&#xA;      &#x9;&#x9;/**ERROR CIS CANNOT BE CREDITED**/&#xA;      &#x9;&#x9;false&#xA;      &#x9;endif&#x9;&#xA;     else&#xA;     &#x9;false&#xA;     endif&#xA;  &#xA;    </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_X-khSZQ8EeSd4Lrb6aNbyQ" name="TaxCredit-CIP-constraint" constrainedElement="_X-khQJQ8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-khSpQ8EeSd4Lrb6aNbyQ">
            <language>OCL</language>
            <body>let   employement_income: Set(Income_Concepts::Income) = &#xA;      &#x9;self.incomes->select(inc|&#xA;      &#x9;&#x9;inc.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;not inc.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;   &#x9;   &#x9;&#x9;inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) and&#xA;       &#x9;&#x9;inc.start_date_within_taxation_year=self.incomeTax.tax_year),&#xA;       &#x9;total_income: Integer = employement_income.income_amount->sum(),&#xA;&#x9;&#x9;tax_liability :Integer = employement_income.tax_liability->sum() in&#xA;&#x9;&#x9;&#x9; &#x9;&#x9; &#xA;&#x9;if(employement_income->size()>0) then&#xA;&#x9;&#x9; if (total_income>936*tax_liability) then&#xA;&#x9;&#x9; let set_of_CIP: Set(Income_Tax_Credit_Concepts::Income_Tax_Credit) = self.income_Tax_Credit->select(type|type.oclIsTypeOf(Income_Tax_Credit_Concepts::CIP) and type.tax_year=self.incomeTax.tax_year),&#xA;&#x9;&#x9;&#x9;size_set_of_CIP :Integer = set_of_CIP->size(),&#xA;&#x9;&#x9;&#x9; a_CIP: Income_Tax_Credit_Concepts::Income_Tax_Credit = set_of_CIP->any(true) in&#xA;&#x9; &#x9;    &#xA;&#x9; &#x9;    size_set_of_CIP = 1 and&#xA;&#x9;&#x9;&#x9;/**CIP IS CREDITED TO THE TAX PAYER**/&#xA;&#x9;&#x9;&#x9;a_CIP.yearly = Constants::FLAT_RATE_CIP_YEARLY.oclAsType(Integer) *tax_liability&#xA;      &#x9;else&#xA;      &#x9;&#x9;/**ERROR CIP CANNOT BE CREDITED**/&#xA;      &#x9;&#x9;false&#xA;      &#x9;endif&#x9;&#xA;     else&#xA;     &#x9;false&#xA;     endif&#xA;      &#x9;&#xA;      &#x9;&#xA;    </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_X-khS5Q8EeSd4Lrb6aNbyQ" name="TaxCredit-CIM-constraint" constrainedElement="_X-khQJQ8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-khTJQ8EeSd4Lrb6aNbyQ">
            <language>OCL</language>
            <body>let&#xA; a_CIM : Income_Tax_Credit_Concepts::CIM = self.income_Tax_Credit->select(c | c.oclIsTypeOf(Income_Tax_Credit_Concepts::CIM) and c.tax_year = self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Credit_Concepts::CIM),&#xA; current_employement_income: Set(Income_Concepts::Income) = self.incomes->select(inc|&#xA;      &#x9;&#x9;inc.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;(inc.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)) and&#xA;      &#x9;&#x9;inc.start_date_within_taxation_year=self.incomeTax.tax_year) ,&#xA;      &#x9;&#x9;&#xA;income_TaxClass1A: Set(Income_Concepts::Income) = &#xA;      &#x9;&#x9;current_employement_income->select(inc|&#xA;      &#x9;&#x9;      &#x9;&#x9;inc.oclAsType(Income_Concepts::Local_Income).tax_card->exists(tc|tc.tax_Class = Tax_Class_Category::One_A)),&#xA;tax_liability : Integer = income_TaxClass1A.tax_liability->sum()&#xA;      &#x9;&#x9;in&#xA;&#xA;       if (current_employement_income->size()>0) then&#xA;&#x9;&#x9;&#x9;if &#x9;(income_TaxClass1A->size()>0) then&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;let child_with_allowances : Set(Dependent) = self.dependents->select(dep:Dependent|dep.dependent_type=Dependent_Type::CHILD and dep.compute_if_dependent_receives_allowances_eligible_for_CIM()=true and&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;dep.allowances->exists(al|al.valid_from_date=self.incomeTax.tax_year and al.valid_until_date = self.incomeTax.tax_year)=true) in&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9; if  child_with_allowances ->size()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CIM ALLOWED**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;a_CIM.yearly= Constants::FLAT_RATE_CIM_YEARLY.oclAsType(Integer) * tax_liability&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9; else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CIM, MISSING CHILD ALLOWANCE**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9; endif&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CIM, NOT TAX CLASS 1A**/&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CIM, NOT ELIGIBLE INCOME*/&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#xA;&#xA;&#x9;&#xA;/**NAVIGATION&#xA;self.tax_class&#xA;self.income_Tax_Credit->&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;self.tax_class&#xA;self.incomeTax.tax_year&#xA;self.incomes&#xA;inc.oclAsType(Income_Concepts::Local_Income).tax_card&#xA;self.incomeTax.tax_year&#xA;self.dependents&#xA;dep.allowances&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;**/</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_X-khTZQ8EeSd4Lrb6aNbyQ" name="Legal_Union-monogamus-constraint" constrainedElement="_X-khQJQ8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-khTpQ8EeSd4Lrb6aNbyQ">
            <language>OCL</language>
            <body>let legal_union: Set(Legal_Union_Record) = self.legal_union_A->select(couple|couple.end_date->isEmpty()) in&#xA;if (legal_union->size()=1) then&#x9;&#xA;&#x9;/**YOU ARE IN LIGEL UNION WITH ONLY ONE PERSON**/&#xA;&#x9;true&#xA;else&#xA;&#x9;/**ERROR YOU CANNOT BE IN LEGAL UNION WITH MORE THAN ONE PERSON**/&#xA;&#x9;false&#xA;endif&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_X-khT5Q8EeSd4Lrb6aNbyQ" name="TaxClass-unique-constraint" constrainedElement="_X-khQJQ8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-khUJQ8EeSd4Lrb6aNbyQ">
            <language>OCL</language>
            <body>let tax_classes: Set(Tax_Class) = self.tax_class->select(tax_classe|tax_class.valid_until_date->isEmpty()) in&#xA;if tax_classes->size()=1 then&#x9;&#xA;&#x9;/**ONLY ONE TAX CLASS AT TIME**/&#xA;&#x9;true&#xA;else&#xA;&#x9;/**ERROR YOU CANNOT HAVE SEVERAL TAX CLASSES AT TIME**/&#xA;&#x9;false&#xA;endif</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_X-khUZQ8EeSd4Lrb6aNbyQ" name="TaxDeduction-CE-constraint" constrainedElement="_X-khQJQ8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-khUpQ8EeSd4Lrb6aNbyQ">
            <language>OCL</language>
            <body>let set_of_CE: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::CE) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year),&#xA;&#x9; CE_invalidity:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::INALIDITY_AND_INFIRMITY),&#xA;&#x9; CE_dependence:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD),&#xA;&#x9; CE_child_not_part_of_household:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::CARE_FOR_CHILDREN_NOT_BEING_PART_OF_HOUSEHOLD),&#xA;&#x9; income_subject_to_witholding_tax : Set(Income_Concepts::Income) = self.incomes->select(income|income.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not income.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.start_date_within_taxation_year = self.incomeTax.tax_year),&#xA; &#x9; extraordinary_expenses : &#x9;Set(Expense_Concepts::Expense) = self.expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclIsTypeOf(Expense_Concepts::Extraordinary_Expense_CE)),&#x9;&#xA; &#x9; extraordinary_expense_invalidity_and_infirmity  : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::INALIDITY_AND_INFIRMITY),&#xA; &#x9; extraordinary_expense_dependence_and_care : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD), &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA; &#x9; extraordinary_expense_care_for_children_not_part_of_the_household : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::CARE_FOR_CHILDREN_NOT_BEING_PART_OF_HOUSEHOLD),  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#xA;&#x9; declared_expense:Integer=extraordinary_expenses.declared_amount->sum() in&#xA;&#x9; &#xA;&#x9;if (income_subject_to_witholding_tax->size()>0) then&#xA;&#x9;&#x9;if (extraordinary_expenses->any(true).oclAsType(Expense_Concepts::Extraordinary_Expense_CE).is_above_thresholded_deduction_percentage_for_CE()=true) then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if extraordinary_expense_invalidity_and_infirmity->size()>0 then &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if self.oclIsTypeOf(Resident_Tax_Payer) then&#xA;&#x9;&#x9;&#x9;&#x9;/**CE FOR INVALIDITY AND INFIRMITY ON THE TAX CARD**/&#xA;&#x9;&#x9;&#x9;&#x9;CE_invalidity->size() = 1&#x9;and&#xA;&#x9;&#x9;&#x9;&#x9;CE_invalidity->any(true).deductible_amount = CE_invalidity->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).disability_flat_rate&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if  extraordinary_expense_dependence_and_care ->size()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->size()=1 and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;let &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expenses_for_dependence_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::DEPENDENCE_CARE) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; expenses_for_house_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|expense.expense_purpose=Expense_Purpose::HOUSE_CARE) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; expenses_for_child_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::CHILD_CARE),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;amount_house_care: Integer = expenses_for_house_care.declared_amount->sum(),&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sum_of_expenses:Integer =  expenses_for_child_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.compute_if_dependent_receives_allowances_eligible_for_CE_dependance_and_care() =true and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.dependent_type=Dependent_Type::CHILD and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(expense.dependent.oclAsType(Physical_Person).age&lt;14) or&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.oclAsType(Physical_Person).disability_percentage>0).declared_amount->sum() in&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(expenses_for_child_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CHILD CARE, CHILDREN BEING PART OF THE HOUSHOLD**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(amount_house_care + sum_of_expenses)>Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(expenses_for_dependence_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CLOSE RELATIVE DEPENDENCE CARE**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount = Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer)+ CE_dependence->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).dependent_relative_flat_rate&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;CE_dependence->any(true).deductible_amount = Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(expenses_for_dependence_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CLOSE RELATIVE DEPENDENCE CARE**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount= amount_house_care + sum_of_expenses + CE_dependence->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).dependent_relative_flat_rate&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount= amount_house_care + sum_of_expenses&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif &#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if  CE_child_not_part_of_household->size()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; CE_child_not_part_of_household->size()= 1 and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CARE FOR CHILDREN NOT BEING PART OF THE HOUSEHOLD**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;let&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expenses_for_child_not_part_of_houselod_care: Set(Expense_Concepts::Expense) = self.expenses->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::CHILD_CARE),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;sum_expenses_for_children:Integer = expenses_for_child_not_part_of_houselod_care->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.compute_if_dependent_receives_allowances_eligible_for_CE_dependance_and_care() =false and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;((expense.dependent.age&lt;=21) or&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(expense.dependent.age>21 and expense.dependent.continued_studies=true and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.tax_Payer.incomes.income_amount->sum()&lt;0.6*Constants::MINIMUM_SALARY.oclAsType(Integer)))).declared_amount->sum() in&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(sum_expenses_for_children>Constants::MAXIMUM_CE_RATE_FOR_CHILD_NOT_BEING_PART_OF_HOUSEHOLD.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;CE_child_not_part_of_household->any(true).deductible_amount  = Constants::MAXIMUM_CE_RATE_FOR_CHILD_NOT_BEING_PART_OF_HOUSEHOLD.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_child_not_part_of_household->any(true).deductible_amount = sum_expenses_for_children&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;/*use it to fill the tax card, temporary until decision on how to model the tax card with respect to the tax payer&#xA;&#x9;&#x9;&#x9;CE_invalidity->any(true).deductible_amount +&#xA;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount + &#xA;&#x9;&#x9;&#x9;CE_child_not_part_of_household->any(true).deductible_amount */&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CE, NOT SUBJECT TO WITHOLDING**/&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#x9;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_X-khU5Q8EeSd4Lrb6aNbyQ" name="TaxDeduction-AC-extra_professional-constraint" constrainedElement="_X-khQJQ8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-khVJQ8EeSd4Lrb6aNbyQ">
            <language>OCL</language>
            <body>let set_of_AC: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::AC) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year),&#xA;&#x9;ac: Income_Tax_Deduction_Concepts::AC = set_of_AC->any(true).oclAsType(Income_Tax_Deduction_Concepts::AC),&#xA;&#x9;spouse: Physical_Person = self.legal_union_A->select(couple|couple.end_date->isEmpty())->any(true).individual_B,&#xA;&#x9;taxpayer_income_eligible_type : Boolean = self.incomes->exists(inc|ac.is_eligible_income_for_AC(inc)),&#xA;&#x9;spouse_income_eligible_type : Boolean = spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->exists(inc|ac.is_eligible_income_for_AC(inc)),&#xA;&#x9;&#xA;&#x9;taxpayer_income_eligible_type_assisting_spouse : Boolean = self.incomes->exists(inc|ac.is_eligible_income_for_AC_assisting_spouse(inc)),&#xA;&#x9;spouse_income_eligible_type_assisting_spouse : Boolean = spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->exists(inc|ac.is_eligible_income_for_AC_assisting_spouse(inc)),&#xA;&#x9;&#xA;&#x9;taxpayer_personnaly_affiliated_to_social_security : Boolean = self.is_affiliated_personnaly_to_social_security,&#xA;&#x9;taxpayer_assisting_spouse: Boolean = self.is_assisting_spouse,&#xA;&#x9;&#xA;&#x9;spouse_personnaly_affiliated_to_social_security : Boolean = spouse.is_affiliated_personnaly_to_social_security,&#xA;&#x9;spouse_assisting_spouse: Boolean =  spouse.is_assisting_spouse&#xA;&#x9;in&#xA;&#x9; &#xA;&#x9; if taxpayer_income_eligible_type=true and spouse_income_eligible_type=true then&#xA;&#x9; &#x9;if taxpayer_personnaly_affiliated_to_social_security=true  and spouse_personnaly_affiliated_to_social_security = true then&#xA;&#x9; &#x9;&#x9;ac.deductible_amount= Constants::FLAT_RATE_FOR_EXTRA_PROFESSIONAL_DEDUCTION&#xA;&#x9; &#x9;else&#xA;&#x9; &#x9;&#x9;false&#xA;&#x9; &#x9;endif&#xA;&#x9; else&#xA;&#x9; &#x9;&#x9;if taxpayer_income_eligible_type=true xor spouse_income_eligible_type=true then&#x9; &#x9;&#x9;&#xA;&#x9; &#x9;&#x9;&#x9;if  self.incomes->exists(inc|inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) and inc.compute_duration_of_contract() &lt;=36) xor&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exists(inc|inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)  and inc.compute_duration_of_contract() &lt;=36) then&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;true&#x9; &#x9;&#x9;&#x9;&#x9;&#xA;&#x9; &#x9;&#x9;&#x9;else&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;ac.deductible_amount=0 &#xA;&#x9; &#x9;&#x9;&#x9;endif&#x9;&#xA;&#x9; &#x9;&#x9;&#x9;&#xA;&#x9; &#x9;&#x9;else&#xA;&#x9; &#x9;&#x9;&#x9; if taxpayer_income_eligible_type_assisting_spouse=true xor taxpayer_income_eligible_type_assisting_spouse=true then&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;if (taxpayer_personnaly_affiliated_to_social_security=true and spouse_personnaly_affiliated_to_social_security = false)  xor &#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;(taxpayer_personnaly_affiliated_to_social_security=false and spouse_personnaly_affiliated_to_social_security = true) then&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;else&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;ac.deductible_amount=0&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9; else&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;ac.deductible_amount =0 &#xA;&#x9;&#x9;&#x9; endif&#xA;&#x9; &#x9;endif&#xA;&#x9; endif&#xA;/**NAVIGATIONS&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;self.income_Tax_Deduction->&#xA;self.incomeTax.tax_year&#xA;self.legal_union_A->select&#xA;self.incomes->exists&#xA;spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->exists&#xA;self.incomes->exists(i&#xA;spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->&#xA;self.incomes->exists(&#xA;inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)&#xA;spouse.oclAsType(Tax_Payer_Concepts::Tax_Payer).incomes->&#xA;inc.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)**/</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_X-khVZQ8EeSd4Lrb6aNbyQ" name="TaxDeduction-DS-1-permanent_expense" constrainedElement="_X-khQJQ8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-khVpQ8EeSd4Lrb6aNbyQ">
            <language>OCL</language>
            <body>let &#xA;permanent_expense: Set(Expense_Concepts::Expense) = self.expenses->select(expense|expense.oclIsTypeOf(Expense_Concepts::Permanent_Expense) and expense.year_expense_was_incurred_in=self.incomeTax.tax_year),&#xA;alimony: Set(Expense_Concepts::Expense) = permanent_expense->select(alimony|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;alimony.oclAsType(Expense_Concepts::Permanent_Expense).category = Expense_Concepts::Category_of_Permanent_Expense::ALIMONY and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;alimony.oclAsType(Expense_Concepts::Permanent_Expense).is_eligible_for_deduction = true),&#xA;debt: Set(Expense_Concepts::Expense) = permanent_expense->select(debt|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;debt.oclAsType(Expense_Concepts::Permanent_Expense).category = Expense_Concepts::Category_of_Permanent_Expense::MISCELLANEOUS_DEBT),&#xA;ds_alimony: Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense).permanent_expense_category =  Expense_Concepts::Category_of_Permanent_Expense::ALIMONY and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense),&#xA;tax_liability : Integer = self.incomes.tax_liability->sum(),&#xA;ds_debt: Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense).permanent_expense_category =  Expense_Concepts::Category_of_Permanent_Expense::MISCELLANEOUS_DEBT and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Permanent_Expense)&#xA;&#x9;   in&#x9;&#xA;&#xA;if permanent_expense->size()>0 then&#xA;&#x9;if debt->size()>0 then&#xA;&#x9;&#x9;ds_debt.deductible_amount = debt.declared_amount->sum()/2 * tax_liability&#xA;&#x9;else&#xA;&#x9;&#x9;false&#xA;&#x9;endif and&#xA;&#x9;if alimony->size()>0 then&#xA;&#x9;&#x9;alimony->forAll(al|self.is_separated_from(al.dependent)=true)&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;let sum_alimony: Integer = alimony.declared_amount->sum() * tax_liability in&#xA;&#x9;&#x9;if sum_alimony&lt;=Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ALIMONY_EXPENSE.oclAsType(Integer) then&#xA;&#x9;&#x9;&#x9;ds_alimony.deductible_amount = sum_alimony&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;ds_alimony.deductible_amount = Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ALIMONY_EXPENSE.oclAsType(Integer) &#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif&#xA;&#xA;/**NAVIGATION&#xA;self.expenses->select&#xA;self.incomeTax.tax_year&#xA;self.income_Tax_Deduction->select&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;al.dependent**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_X-khV5Q8EeSd4Lrb6aNbyQ" name="TaxDeduction-DS-2-interest_expense" constrainedElement="_X-khQJQ8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-khWJQ8EeSd4Lrb6aNbyQ">
            <language>OCL</language>
            <body>self.incomes->forAll(inc |&#xA;&#xA;if (inc.end_date_within_taxation_year = self.incomeTax.tax_year) then&#xA;&#xA;let &#xA;interest_expense: Set(Expense_Concepts::Expense) = inc.expenses->select(expense|expense.oclIsTypeOf(Expense_Concepts::Interest_Expense) and expense.year_expense_was_incurred_in=self.incomeTax.tax_year),&#xA;ds_interest_expense: Income_Tax_Deduction_Concepts::DS_for_Interest_Expense = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Interest_Expense) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.expenses->includesAll(interest_expense) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Interest_Expense),&#xA;dependent_children_with_allowances: Set(Dependent) = self.dependents->select(deps|deps.compute_if_dependent_receives_allowances_eligible_for_DS() =true),&#xA;tax_liability : Integer =inc.tax_liability in &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;if interest_expense->size()>0 then&#xA;&#x9;let sum_interest_expense: Integer = interest_expense.declared_amount->sum() in&#xA;&#x9;if sum_interest_expense&lt;=ds_interest_expense.maximum_deductible_amount then&#xA;&#x9;&#xA;&#x9;&#x9;ds_interest_expense.deductible_amount = sum_interest_expense * tax_liability&#xA;&#x9;else&#xA;&#x9;&#x9;ds_interest_expense.deductible_amount = ds_interest_expense.maximum_deductible_amount * tax_liability&#x9;&#x9;&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif&#xA;else&#xA;false&#xA;endif&#xA;)&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_X-khWZQ8EeSd4Lrb6aNbyQ" name="TaxDeduction-DS-3-health_and_pension_insurance" constrainedElement="_X-khQJQ8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-khWpQ8EeSd4Lrb6aNbyQ">
            <language>OCL</language>
            <body>self.incomes->forAll( inc | &#xA;&#xA;let &#xA;mandatory_health_and_pension_insurance: Set(Expense_Concepts::Expense) = inc.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Health_and_Pension_Insurance).category =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::MANDATORY_HEALTH_AND_PENSION_INSURANCE&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Health_and_Pension_Insurance).is_related_to_additional_salary=true),&#xA;additional_pension_insurance: Set(Expense_Concepts::Expense) = inc.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Health_and_Pension_Insurance).category =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::ADDITIONAL_EMPLOYERS_PENSION_INSURANCE),&#xA;continued_health_and_pension_insurance: Set(Expense_Concepts::Expense) = inc.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Health_and_Pension_Insurance).category =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::CONTINUED_HEALTH_AND_PENSION_INSURANCE),&#xA;ds_mandatory_health_and_pension : Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance).insurance_category = &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::MANDATORY_HEALTH_AND_PENSION_INSURANCE and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year and type.expenses->includesAll(mandatory_health_and_pension_insurance)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance),&#xA;ds_additional_pension_insurance : Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance).insurance_category = &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::ADDITIONAL_EMPLOYERS_PENSION_INSURANCE and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and type.expenses->includesAll(additional_pension_insurance)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance),&#xA;ds_continued_health_and_pension_insurance : Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance).insurance_category = &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Health_and_Pension_Insurances::CONTINUED_HEALTH_AND_PENSION_INSURANCE and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and type.expenses->includesAll(continued_health_and_pension_insurance)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Health_and_Pension_Insurance),&#xA;tax_liability : Integer = inc.tax_liability  in &#xA;&#xA;if mandatory_health_and_pension_insurance->size()>0 then&#xA;&#x9;if inc.oclIsTypeOf(Income_Concepts::Employment_Income) then&#xA;&#x9;let sum_mandatory_health_and_pension_insurance : Integer = mandatory_health_and_pension_insurance.declared_amount->sum() in&#xA;&#x9;&#x9;ds_mandatory_health_and_pension.deductible_amount = sum_mandatory_health_and_pension_insurance&#xA;&#x9;else&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif &#xA;and&#xA;if additional_pension_insurance->size()>0 then&#xA;&#x9;if inc.oclIsTypeOf(Income_Concepts::Employment_Income) then&#xA;&#x9;let sum_additional_pension_insurance : Integer = additional_pension_insurance.declared_amount->sum() in&#xA;&#x9;&#x9;if&#x9;sum_additional_pension_insurance &lt;= Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ADDITIONAL_PENSION_AND_INSURANCE.oclAsType(Integer) then&#xA;&#x9;&#x9;&#x9;ds_additional_pension_insurance.deductible_amount = sum_additional_pension_insurance&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;ds_additional_pension_insurance.deductible_amount = Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ADDITIONAL_PENSION_AND_INSURANCE.oclAsType(Integer)&#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif and&#xA;if continued_health_and_pension_insurance->size()>0 then&#xA;&#x9;let sum_continued_health_and_pension_insurance : Integer = continued_health_and_pension_insurance.declared_amount->sum() in&#xA;&#x9;&#x9;ds_continued_health_and_pension_insurance.deductible_amount = tax_liability * sum_continued_health_and_pension_insurance&#xA;else&#xA;&#x9;false&#xA;endif&#xA;)&#xA;&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_X-khW5Q8EeSd4Lrb6aNbyQ" name="TaxDeduction-DS-4-private_insurance_and_plan" constrainedElement="_X-khQJQ8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-khXJQ8EeSd4Lrb6aNbyQ">
            <language>OCL</language>
            <body>let &#xA;insurance_and_plan: Set(Expense_Concepts::Expense) = self.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).category &lt;>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::OLD_AGE_PENSION_PLAN&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).category &lt;>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::PRIVATE_LIFE_INSURANCE&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).is_private_insurance_and_plan_eligible_for_deduction=true),&#xA;life_insurance: Set(Expense_Concepts::Expense) = self.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).category =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::PRIVATE_LIFE_INSURANCE&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).is_private_insurance_and_plan_eligible_for_deduction=true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).duration_of_contract >=10),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;old_age_pension_plan: Set(Expense_Concepts::Expense) = self.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Health_and_Pension_Insurance) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).category =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::OLD_AGE_PENSION_PLAN&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).is_private_insurance_and_plan_eligible_for_deduction=true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Private_Insurance_and_Plan).duration_of_contract >=10),&#xA;ds_private_insurance_and_plan: Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan).private_insurance_and_plan_category &lt;> &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::OLD_AGE_PENSION_PLAN and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan),&#xA;ds_old_age_pension_plan: Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclAsType(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan).private_insurance_and_plan_category = &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Expense_Concepts::Category_of_Private_Insurance_and_Plan::OLD_AGE_PENSION_PLAN and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Private_Insurance_and_Plan),&#xA;tax_liability : Integer = self.incomes.tax_liability->sum() in&#xA;&#xA;if insurance_and_plan->size()>0 then&#xA;&#xA;let sum_insurance_and_plan : Integer = insurance_and_plan.declared_amount->sum() + life_insurance.declared_amount->sum() + &#xA;      &#x9;&#x9;&#x9;ds_private_insurance_and_plan.increase_for_life_insurance in&#xA;&#x9;&#x9;&#xA;if&#x9;sum_insurance_and_plan &lt;= ds_private_insurance_and_plan.maximum_deductible_amount_for_private_insurance then&#xA;&#x9;&#x9;&#x9;ds_private_insurance_and_plan.deductible_amount = sum_insurance_and_plan&#xA;&#x9;else&#xA;&#x9;&#x9;&#x9;ds_private_insurance_and_plan.deductible_amount = ds_private_insurance_and_plan.maximum_deductible_amount_for_private_insurance&#x9;&#x9;&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif&#xA;&#xA;and&#xA;&#xA;if old_age_pension_plan->size()>0 then&#xA;let sum_old_age_pension_plan : Integer = old_age_pension_plan.declared_amount->sum() in&#xA;&#x9;if&#x9;sum_old_age_pension_plan &lt;= ds_old_age_pension_plan.maximum_deductible_amount_for_old_age_pension_plan then&#xA;&#x9;&#x9;&#x9;ds_old_age_pension_plan.deductible_amount = sum_old_age_pension_plan&#xA;&#x9;else&#xA;&#x9;&#x9;&#x9;ds_old_age_pension_plan.deductible_amount = ds_old_age_pension_plan.maximum_deductible_amount_for_private_insurance&#x9;&#x9;&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif&#xA;&#xA;/**NAVIGATIONS&#xA;self.expenses->&#xA;self.incomeTax.tax_year&#xA;self.expenses->&#xA;self.incomeTax.tax_year->&#xA;self.expenses->&#xA;self.incomeTax.tax_year&#xA;self.income_Tax_Deduction->select&#xA;self.incomeTax.tax_year&#xA;**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_X-khXZQ8EeSd4Lrb6aNbyQ" name="TaxDeduction-DS-5-donation" constrainedElement="_X-khQJQ8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-khXpQ8EeSd4Lrb6aNbyQ">
            <language>OCL</language>
            <body>let &#xA;donations: Set(Expense_Concepts::Expense) = self.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Donation)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;or expense.oclAsType(Expense_Concepts::Donation).is_donation_reported = true)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Donation).is_beneficiary_eligible=true),&#xA;ds_donation: Income_Tax_Deduction_Concepts::DS_for_Donation = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Donation) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Donation) in &#x9;&#x9;&#x9;&#x9;&#x9;&#xA;if donations->size()>0 then&#xA;&#x9;let sum_donation: Integer = donations.declared_amount->sum() in&#xA;&#x9;if sum_donation >= Constants::MINIMUM_DEDUCTIBLE_AMOUNT_FOR_DONATIONS.oclAsType(Integer) then&#xA;&#x9;&#x9;if sum_donation &lt;= ds_donation.maximum_deductible_amount then&#xA;&#x9;&#x9;ds_donation.deductible_amount = sum_donation&#xA;&#x9;else&#xA;&#x9;&#x9;ds_donation.deductible_amount = ds_donation.maximum_deductible_amount&#xA;&#x9;endif&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#xA;else&#xA;&#x9;false&#xA;endif&#xA;&#xA; </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_X-khX5Q8EeSd4Lrb6aNbyQ" name="TaxDeduction-DS-6-loss_carryforward" constrainedElement="_X-khQJQ8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-khYJQ8EeSd4Lrb6aNbyQ">
            <language>OCL</language>
            <body>self.incomes->forAll( inc | &#xA;&#xA;                            if (&#xA;                            &#x9;&#x9;(inc.income_type.oclIsTypeOf(Income_Concepts::Agriculture_and_Forestry_Income) or&#xA;                            &#x9;&#x9;inc.income_type.oclIsTypeOf(Income_Concepts::Independent_Professional_Services_Income) or&#xA;                                inc.income_type.oclIsTypeOf(Income_Concepts::Trade_and_Business_Income))&#xA;                               and (inc.end_date_within_taxation_year = self.incomeTax.tax_year)) then /**PUT &lt;, when deciding how to model Date or how to use &quot;&lt;&quot; with the Marte Profile **/&#xA;                               let&#xA;                                 &#x9;losses: Set(Expense_Concepts::Expense) = inc.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Loss_Carryforward) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).regular_accountability = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).compensation_by_other_means=false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).tax_payer_has_been_partner_in_business = false),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;losses_successor: Set(Expense_Concepts::Expense) = inc.expenses->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|expense.oclIsTypeOf(Expense_Concepts::Loss_Carryforward) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.year_expense_was_incurred_in=self.incomeTax.tax_year&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).regular_accountability = true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).compensation_by_other_means=false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).tax_payer_has_been_partner_in_business = true &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and expense.oclAsType(Expense_Concepts::Loss_Carryforward).tax_payer_has_inherited_business_ownership = true),&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ds_loss: Income_Tax_Deduction_Concepts::DS_for_Loss_Carryforward = losses.deduction->select(type| &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS_for_Loss_Carryforward) and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year)->any(true).oclAsType(Income_Tax_Deduction_Concepts::DS_for_Loss_Carryforward) in &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(inc.end_date_within_taxation_year = 1990) then /**PUT &lt;, when deciding how to model Date or how to use &quot;&lt;&quot; with the Marte Profile **/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;if losses.declared_amount->sum()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ds_loss.deductible_amount =  losses.declared_amount->sum()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if losses_successor.declared_amount->sum() >0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ds_loss.deductible_amount = losses_successor.declared_amount->sum() &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ds_loss.deductible_amount = 0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; else &#xA;                                &#x9;&#x9; false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif)&#xA;&#xA;/**NAVIGATIONS:&#xA;self.incomes->&#xA;inc.expenses->&#xA;inc.expenses->&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;losses.deduction->&#xA;inc.income_type&#xA;inc.income_type&#xA;inc.income_type&#xA;**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_X-khYZQ8EeSd4Lrb6aNbyQ" name="TaxCard-unique-constraint" constrainedElement="_X-khQJQ8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-khYpQ8EeSd4Lrb6aNbyQ">
            <language>OCL</language>
            <body>self.incomes->forAll(income|income.tax_card->select(tc|tc.validity=true)->size() &lt;= 1)&#xA;/**THE INCOME CAN HAVE AT MOST ONE VALID TAX CARD, IF THE CONTRACT HAS ENDED THAN IT IS ZERO VALID**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_X-khY5Q8EeSd4Lrb6aNbyQ" name="TaxDeduction-FD-constraint" constrainedElement="_X-khQJQ8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-khZJQ8EeSd4Lrb6aNbyQ">
            <language>OCL</language>
            <body>self.incomes->forAll(income|&#xA;&#xA;&#x9;let &#xA;&#x9;&#x9;fd_expenses : Set(Expense_Concepts::Expense)= self.expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Travel_Expense_FD) and&#xA;&#x9;&#x9;&#x9;exp.year_expense_was_incurred_in=self.incomeTax.tax_year),&#xA;&#x9;&#x9;declared_amount : Integer = fd_expenses.declared_amount->sum(),&#xA;&#x9;&#x9;a_FD:Income_Tax_Deduction_Concepts::FD= self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::FD) and type.tax_year=self.incomeTax.tax_year and&#xA;&#x9;&#x9;&#x9;type.expenses->includesAll(fd_expenses))->any(true).oclAsType(Income_Tax_Deduction_Concepts::FD) in&#xA;&#xA;if ((income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) or&#xA;income.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or&#xA;income.income_type.oclIsTypeOf(Income_Concepts::Rentals_and_Leases_Income)) and&#xA;income.start_date_within_taxation_year = self.incomeTax.tax_year) then&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#xA;&#x9;&#x9;if  (a_FD.calculated_distance>a_FD.distance_declared_in_january) then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if  (a_FD.calculated_distance>Constants::MINIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;if (a_FD.calculated_distance>Constants::MAXIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/**MAXIMAL FLAT DISTANCE FOR TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;a_FD.deductible_amount = Constants::FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT.oclAsType(Integer) * Constants::MAXIMAL_FLAT_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/**REAL DISTANCE FOR TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;a_FD.deductible_amount = Constants::FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT.oclAsType(Integer) * a_FD.calculated_distance&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;/**NO TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;a_FD.deductible_amount = 0&#xA;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/*NO CHANGES FOR FD, TRAVEL EXPENSE IS ALREADY DEDUCED FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;endif&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;a_FD.yearly=  a_FD.deductible_amount and&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;a_FD.monthly = a_FD.deductible_amount/12 and&#xA;&#x9;&#x9;a_FD.daily = a_FD.monthly/24&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE FD FOR TRAVEL EXPENSE, THERE IS NO INCOME TYPE ELIGIBLE FOR FD**/&#xA;&#x9;&#x9;a_FD.deductible_amount = 0&#xA;&#x9;endif&#xA;)&#xA;&#xA;&#xA;/** NAVIGATIONS&#xA;self.incomes&#xA;self.expenses&#xA;self.incomeTax&#xA;self.income_Tax_Deduction&#xA;type.expenses&#xA;income.income_type&#xA;income.income_type&#xA;income.income_type&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;self.incomeTax.tax_year&#xA;**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_X-khZZQ8EeSd4Lrb6aNbyQ" name="TaxDeduction-FO-constraint" constrainedElement="_X-khQJQ8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-khZpQ8EeSd4Lrb6aNbyQ">
            <language>OCL</language>
            <body>self.incomes->forAll(income| &#xA;let &#xA;&#x9; fo_expenses : Set(Expense_Concepts::Expense) = income.expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Miscellaneous_Expense_FO) and exp.year_expense_was_incurred_in = self.incomeTax.tax_year),&#xA;&#x9; declared_expense:Integer=fo_expenses.declared_amount->sum(),&#xA;&#x9; set_of_FO: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|type.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO) &#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and type.tax_year=self.incomeTax.tax_year&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and type.expenses->includesAll(fo_expenses)),&#xA;&#x9; size_set_of_FO:Integer = set_of_FO->size(),&#xA;&#x9; a_FO:Income_Tax_Deduction_Concepts::FO=set_of_FO->any(true).oclAsType(Income_Tax_Deduction_Concepts::FO),&#xA;&#x9; income_type_for_taxpayer_authorized_for_FO : Boolean = ((income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) or&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.income_type.oclIsTypeOf(Income_Concepts::Rentals_and_Leases_Income)) and&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.start_date_within_taxation_year = self.incomeTax.tax_year)&#x9; in&#xA;if size_set_of_FO>1 then&#xA;&#x9;/**TAX PAYER CANNOT RECEIVE MORE THAN ONE FO PER INCOME AND EXPENSES ATTACHED TO THE INCOME**/&#xA;&#x9;false&#xA;else&#xA;&#x9;if income_type_for_taxpayer_authorized_for_FO = true then&#xA;&#x9;&#x9;if(not self.taxed_jointly) then &#xA;&#x9;&#x9;&#x9;if(declared_expense> Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;a_FO.rate_type_for_FO = Type_of_Rate::REAL_COST&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;a_FO.rate_type_for_FO = Type_of_Rate::REGULAR&#xA;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/**FLAT RATE OR REAL COSTS DEFINED BY JOINT TAXATION**/&#xA;&#x9;&#x9;&#x9;/*do we want to care about this, or up to the agent to decide*/&#xA;&#x9;&#x9;&#x9;let spouse_FO: Income_Tax_Deduction_Concepts::FO =  self.legal_union_A.individual_B.oclAsType(Tax_Payer).income_Tax_Deduction->&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select(type|type.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO))->any(true).oclAsType(Income_Tax_Deduction_Concepts::FO),&#xA;&#x9;&#x9;&#x9;&#x9; spouse_declared_expense:Integer=self.legal_union_A.individual_B.oclAsType(Tax_Payer).expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Miscellaneous_Expense_FO))->any(true).declared_amount in&#xA;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;(a_FO.rate_type_for_FO = Type_of_Rate::REAL_COST and declared_expense> Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer) and spouse_FO.rate_type_for_FO = Type_of_Rate::REGULAR) xor&#xA;&#x9;&#x9;&#x9;(a_FO.rate_type_for_FO = Type_of_Rate::REGULAR and spouse_FO.rate_type_for_FO = Type_of_Rate::REAL_COST and  spouse_declared_expense>Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)) &#xA;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if (a_FO.rate_type_for_FO = Type_of_Rate::REGULAR) then&#xA;&#x9;&#x9;&#x9;/*FLAT RATE FOR FO EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;a_FO.oclAsType(Income_Tax_Deduction_Concepts::Income_Tax_Deduction).deductible_amount = Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)+Constants::DISABILITY_FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/**REAL COST FOR FO EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;a_FO.deductible_amount = declared_expense+Constants::DISABILITY_FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)&#xA;&#xA;&#x9;&#x9;endif&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;a_FO.yearly=  a_FO.deductible_amount and&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;a_FO.monthly = a_FO.deductible_amount/12 and&#xA;&#x9;&#x9;a_FO.daily = a_FO.monthly/24&#x9;&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE FO, THERE IS NO INCOME TYPE ELIGIBLE FOR FO**/&#xA;&#x9;&#x9;a_FO.deductible_amount = 0&#xA;&#x9;endif&#xA;endif&#xA;)&#xA;&#xA;/**NAVIGATION &#xA;&#xA;self.income_Tax_Deduction->select(type|type.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO) and type.tax_year=self.incomeTax.tax_year),&#xA;self.incomeTax.tax_year&#xA;self.incomes->select(income&#xA;income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)&#xA;income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)&#xA;income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income)&#xA;self.expenses->select(exp&#xA;self.legal_union_A.individual_B.oclAsType(Tax_Payer).income_Tax_Deduction->&#xA;self.legal_union_A.individual_B.oclAsType(Tax_Payer).expenses->selec&#xA;a_FO.oclAsType(Income_Tax_Deduction_Concepts::Income_Tax_Deduction).tax_year&#xA;&#xA;&#xA;**/</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_X-khZ5Q8EeSd4Lrb6aNbyQ" name="NEW_TaxDeduction-CE-INVALIDITY" constrainedElement="_X-khQJQ8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-khaJQ8EeSd4Lrb6aNbyQ">
            <language>OCL</language>
            <body>let set_of_CE: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::CE) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year),&#xA;&#x9; CE_invalidity:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::INALIDITY_AND_INFIRMITY),&#xA;&#x9;income_subject_to_witholding_tax : Set(Income_Concepts::Income) = self.incomes->select(income|income.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not income.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.start_date_within_taxation_year = self.incomeTax.tax_year),&#xA; &#x9; extraordinary_expenses : &#x9;Set(Expense_Concepts::Expense) = self.expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclIsTypeOf(Expense_Concepts::Extraordinary_Expense_CE)),&#x9;&#xA; &#x9; extraordinary_expense_invalidity_and_infirmity  : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::INALIDITY_AND_INFIRMITY),&#x9;&#xA;&#x9; declared_expense:Integer=extraordinary_expense_invalidity_and_infirmity.declared_amount->sum() in&#xA;&#x9;if (income_subject_to_witholding_tax->size()>0) then&#xA;&#x9;&#x9;if (extraordinary_expenses->any(true).oclAsType(Expense_Concepts::Extraordinary_Expense_CE).is_above_thresholded_deduction_percentage_for_CE()=true) then&#xA;&#x9;&#x9;&#x9;if extraordinary_expense_invalidity_and_infirmity->size()>0 then &#xA;&#x9;&#x9;&#x9;&#x9;if self.oclIsTypeOf(Resident_Tax_Payer) then&#xA;&#x9;&#x9;&#x9;&#x9;/**CE FOR INVALIDITY AND INFIRMITY ON THE TAX CARD**/&#xA;&#x9;&#x9;&#x9;&#x9;CE_invalidity->size() = 1&#x9;and&#xA;&#x9;&#x9;&#x9;&#x9;CE_invalidity->any(true).deductible_amount = CE_invalidity->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).disability_flat_rate&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;endif&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;false&#xA;&#x9;&#x9;endif&#x9;&#xA;else&#xA;false&#xA;endif&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_X-khaZQ8EeSd4Lrb6aNbyQ" name="NEW_TaxDeduction-CE-DEPENDENCE-AND-CARE" constrainedElement="_X-khQJQ8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-khapQ8EeSd4Lrb6aNbyQ">
            <language>OCL</language>
            <body>let set_of_CE: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::CE) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year),&#xA;&#x9; CE_dependence:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD),&#xA;&#x9; income_subject_to_witholding_tax : Set(Income_Concepts::Income) = self.incomes->select(income|income.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not income.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.start_date_within_taxation_year = self.incomeTax.tax_year),&#xA; &#x9; extraordinary_expenses : &#x9;Set(Expense_Concepts::Expense) = self.expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclIsTypeOf(Expense_Concepts::Extraordinary_Expense_CE)),&#x9;&#xA; &#x9; extraordinary_expense_dependence_and_care : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD), &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9; declared_expense:Integer=extraordinary_expense_dependence_and_care.declared_amount->sum() in&#xA;&#x9; &#xA;&#x9;if (income_subject_to_witholding_tax->size()>0) then&#xA;&#x9;&#x9;if (extraordinary_expenses->any(true).oclAsType(Expense_Concepts::Extraordinary_Expense_CE).is_above_thresholded_deduction_percentage_for_CE()=true) then&#xA;&#x9;&#x9;&#x9;&#x9;if  extraordinary_expense_dependence_and_care ->size()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->size()=1 and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;let &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expenses_for_dependence_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::DEPENDENCE_CARE) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; expenses_for_house_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|expense.expense_purpose=Expense_Purpose::HOUSE_CARE) ,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; expenses_for_child_care: Set(Expense_Concepts::Expense) = extraordinary_expense_dependence_and_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::CHILD_CARE),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;amount_house_care: Integer = expenses_for_house_care.declared_amount->sum(),&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;sum_of_expenses:Integer =  expenses_for_child_care->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.compute_if_dependent_receives_allowances_eligible_for_CE_dependance_and_care() =true and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.dependent_type=Dependent_Type::CHILD and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(expense.dependent.oclAsType(Physical_Person).age&lt;14) or&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.oclAsType(Physical_Person).disability_percentage>0).declared_amount->sum() in&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(expenses_for_child_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CHILD CARE, CHILDREN BEING PART OF THE HOUSHOLD**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(amount_house_care + sum_of_expenses)>Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(expenses_for_dependence_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CLOSE RELATIVE DEPENDENCE CARE**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount = Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer)+ CE_dependence->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).dependent_relative_flat_rate&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;CE_dependence->any(true).deductible_amount = Constants::MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(expenses_for_dependence_care->size()>0) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CE FOR CLOSE RELATIVE DEPENDENCE CARE**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount= amount_house_care + sum_of_expenses + CE_dependence->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE).dependent_relative_flat_rate&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_dependence->any(true).deductible_amount= amount_house_care + sum_of_expenses&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   endif &#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;&#x9;endif&#x9;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CE, NOT SUBJECT TO WITHOLDING**/&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#x9;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_X-kha5Q8EeSd4Lrb6aNbyQ" name="NEW_TaxDeduction-CE-DEPENDENCE-AND-CARE-CHILDREN-NOT-PART-OF-HOUSEHOLD" constrainedElement="_X-khQJQ8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-khbJQ8EeSd4Lrb6aNbyQ">
            <language>OCL</language>
            <body>let set_of_CE: Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(type|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.oclIsTypeOf(Income_Tax_Deduction_Concepts::CE) and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;type.tax_year=self.incomeTax.tax_year),&#xA;&#x9; CE_child_not_part_of_household:Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction)=set_of_CE->select(ce|ce.oclAsType(Income_Tax_Deduction_Concepts::CE).ce_deduction_type=&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_Type::CARE_FOR_CHILDREN_NOT_BEING_PART_OF_HOUSEHOLD),&#xA;&#x9; income_subject_to_witholding_tax : Set(Income_Concepts::Income) = self.incomes->select(income|income.oclIsTypeOf(Income_Concepts::Local_Income) and&#xA;      &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not income.oclAsType(Income_Concepts::Local_Income).tax_card->isEmpty() and&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;income.start_date_within_taxation_year = self.incomeTax.tax_year),&#xA; &#x9; extraordinary_expenses : &#x9;Set(Expense_Concepts::Expense) = self.expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclIsTypeOf(Expense_Concepts::Extraordinary_Expense_CE)),&#x9;&#xA; &#x9; extraordinary_expense_care_for_children_not_part_of_the_household : &#x9;Set(Expense_Concepts::Expense) = extraordinary_expenses->select(exp|&#xA; &#x9;  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exp.oclAsType(Expense_Concepts::Extraordinary_Expense_CE).ce_type = CE_Type::CARE_FOR_CHILDREN_NOT_BEING_PART_OF_HOUSEHOLD),  &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#xA;&#x9; declared_expense:Integer=extraordinary_expense_care_for_children_not_part_of_the_household.declared_amount->sum() in&#xA;&#x9; &#x9; &#xA;&#x9;if (income_subject_to_witholding_tax->size()>0) then&#xA;&#x9;&#x9;if (extraordinary_expenses->any(true).oclAsType(Expense_Concepts::Extraordinary_Expense_CE).is_above_thresholded_deduction_percentage_for_CE()=true) then&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;     if  CE_child_not_part_of_household->size()>0 then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; CE_child_not_part_of_household->size()= 1 and&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/**CARE FOR CHILDREN NOT BEING PART OF THE HOUSEHOLD**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;let&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expenses_for_child_not_part_of_houselod_care: Set(Expense_Concepts::Expense) = self.expenses->select(expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;not self.is_dependent_part_of_the_household(expense.dependent) = true and &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.expense_purpose=Expense_Purpose::CHILD_CARE),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;sum_expenses_for_children:Integer = expenses_for_child_not_part_of_houselod_care->select(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense|&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.compute_if_dependent_receives_allowances_eligible_for_CE_dependance_and_care() =false and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;((expense.dependent.age&lt;=21) or&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(expense.dependent.age>21 and expense.dependent.continued_studies=true and&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;expense.dependent.tax_Payer.incomes.income_amount->sum()&lt;0.6*Constants::MINIMUM_SALARY.oclAsType(Integer)))).declared_amount->sum() in&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; if(sum_expenses_for_children>Constants::MAXIMUM_CE_RATE_FOR_CHILD_NOT_BEING_PART_OF_HOUSEHOLD.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;CE_child_not_part_of_household->any(true).deductible_amount  = Constants::MAXIMUM_CE_RATE_FOR_CHILD_NOT_BEING_PART_OF_HOUSEHOLD.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;CE_child_not_part_of_household->any(true).deductible_amount = sum_expenses_for_children&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;false&#xA;&#x9;&#x9;endif&#xA;&#x9;else&#xA;&#x9;&#x9;/**TAX PAYER CANNOT RECEIVE CE, NOT SUBJECT TO WITHOLDING**/&#xA;&#x9;&#x9;false&#xA;&#x9;endif&#x9;</body>
          </specification>
        </ownedRule>
        <generalization xmi:id="_X-khbZQ8EeSd4Lrb6aNbyQ" general="_X-j8T5Q8EeSd4Lrb6aNbyQ"/>
        <ownedAttribute xmi:id="_X-khbpQ8EeSd4Lrb6aNbyQ" name="incomes" visibility="private" type="_X-kh1pQ8EeSd4Lrb6aNbyQ" association="_X-kiepQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-khb5Q8EeSd4Lrb6aNbyQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-khcJQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-khcZQ8EeSd4Lrb6aNbyQ" name="incomeTax" visibility="private" type="_X-j7-5Q8EeSd4Lrb6aNbyQ" association="_X-kho5Q8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-khcpQ8EeSd4Lrb6aNbyQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-khc5Q8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-khdJQ8EeSd4Lrb6aNbyQ" name="income_Tax_Credit" visibility="private" type="_X-kjOJQ8EeSd4Lrb6aNbyQ" association="_X-kigpQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-khdZQ8EeSd4Lrb6aNbyQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-khdpQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-khd5Q8EeSd4Lrb6aNbyQ" name="tax_class" visibility="private" type="_X-khpJQ8EeSd4Lrb6aNbyQ" association="_X-j7-pQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-kheJQ8EeSd4Lrb6aNbyQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-kheZQ8EeSd4Lrb6aNbyQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-khepQ8EeSd4Lrb6aNbyQ" name="household" visibility="private" type="_X-j8NpQ8EeSd4Lrb6aNbyQ" association="_X-khnpQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-khe5Q8EeSd4Lrb6aNbyQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-khfJQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-khfZQ8EeSd4Lrb6aNbyQ" name="dependents" visibility="private" type="_X-j8CpQ8EeSd4Lrb6aNbyQ" association="_X-khoJQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-khfpQ8EeSd4Lrb6aNbyQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-khf5Q8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-khgJQ8EeSd4Lrb6aNbyQ" name="income_Tax_Deduction" visibility="private" type="_X-lIUpQ8EeSd4Lrb6aNbyQ" association="_X-kippQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-khgZQ8EeSd4Lrb6aNbyQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-khgpQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-khg5Q8EeSd4Lrb6aNbyQ" name="taxed_jointly" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-khhJQ8EeSd4Lrb6aNbyQ" name="expenses" visibility="private" type="_X-kiYpQ8EeSd4Lrb6aNbyQ" association="_X-kip5Q8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-khhZQ8EeSd4Lrb6aNbyQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-khhpQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-khh5Q8EeSd4Lrb6aNbyQ" name="dependent" visibility="private" type="_X-j8CpQ8EeSd4Lrb6aNbyQ" association="_X-khn5Q8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-khiJQ8EeSd4Lrb6aNbyQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-khiZQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-khipQ8EeSd4Lrb6aNbyQ" name="tax_Card" visibility="private" type="_X-ki5JQ8EeSd4Lrb6aNbyQ" aggregation="shared" association="_X-khmZQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-khi5Q8EeSd4Lrb6aNbyQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-khjJQ8EeSd4Lrb6aNbyQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-khjZQ8EeSd4Lrb6aNbyQ" name="taxation_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_X-dzwZQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_X-khjpQ8EeSd4Lrb6aNbyQ" name="is_dependent_part_of_the_household" isQuery="true" bodyCondition="_X-khkJQ8EeSd4Lrb6aNbyQ">
          <eAnnotations xmi:id="_X-khj5Q8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_X-khkJQ8EeSd4Lrb6aNbyQ" name="is_child_part_of_household" constrainedElement="_X-khjpQ8EeSd4Lrb6aNbyQ">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-khkZQ8EeSd4Lrb6aNbyQ">
              <language>OCL</language>
              <body>let responsible_person: Tax_Payer = IN_dependent.responsible_person,&#xA;     household_tax_payer_same_as_respnsible: Boolean = IN_dependent.household.tax_Payer.oclAsType(Physical_Person).SSNo = responsible_person.oclAsType(Physical_Person).SSNo&#xA;in&#xA;if (responsible_person->notEmpty() and household_tax_payer_same_as_respnsible) then&#xA;&#x9;/**THE CHILD IS PART OF THE TAX PAYERS HOUSEHOLD**/&#xA;&#x9;result = true&#xA;else &#xA;&#x9;/**THE CHILD IS NOT PART OF THE TAX PAYERS HOUSEHOLD**/&#xA;&#x9;result = false&#xA;endif&#xA;&#xA;&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_X-khkpQ8EeSd4Lrb6aNbyQ" name="IN_dependent" type="_X-j8CpQ8EeSd4Lrb6aNbyQ"/>
          <ownedParameter xmi:id="_X-khk5Q8EeSd4Lrb6aNbyQ" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_X-khlJQ8EeSd4Lrb6aNbyQ" name="number_of_months_of_allowance" isQuery="true" postcondition="_X-khlpQ8EeSd4Lrb6aNbyQ">
          <eAnnotations xmi:id="_X-khlZQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_X-khlpQ8EeSd4Lrb6aNbyQ" name="number_od_months_of_allowance" constrainedElement="_X-khlJQ8EeSd4Lrb6aNbyQ">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-khl5Q8EeSd4Lrb6aNbyQ">
              <language>OCL</language>
              <body>result = 1&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_X-khmJQ8EeSd4Lrb6aNbyQ" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_X-khmZQ8EeSd4Lrb6aNbyQ" name="" memberEnd="_X-khipQ8EeSd4Lrb6aNbyQ _X-kjH5Q8EeSd4Lrb6aNbyQ"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_X-khmpQ8EeSd4Lrb6aNbyQ" name="located at" memberEnd="_X-khIJQ8EeSd4Lrb6aNbyQ _X-j8ApQ8EeSd4Lrb6aNbyQ"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_X-khm5Q8EeSd4Lrb6aNbyQ" name="receives" memberEnd="_X-j8U5Q8EeSd4Lrb6aNbyQ _X-j8LZQ8EeSd4Lrb6aNbyQ"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_X-khnJQ8EeSd4Lrb6aNbyQ" name="person B" memberEnd="_X-j8RpQ8EeSd4Lrb6aNbyQ _X-khJpQ8EeSd4Lrb6aNbyQ"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_X-khnZQ8EeSd4Lrb6aNbyQ" name="person A" memberEnd="_X-j8Q5Q8EeSd4Lrb6aNbyQ _X-khI5Q8EeSd4Lrb6aNbyQ"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_X-khnpQ8EeSd4Lrb6aNbyQ" name="maintains" memberEnd="_X-khepQ8EeSd4Lrb6aNbyQ _X-j8N5Q8EeSd4Lrb6aNbyQ"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_X-khn5Q8EeSd4Lrb6aNbyQ" name="as tax payer" memberEnd="_X-j8GJQ8EeSd4Lrb6aNbyQ _X-khh5Q8EeSd4Lrb6aNbyQ"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_X-khoJQ8EeSd4Lrb6aNbyQ" name="supports" memberEnd="_X-khfZQ8EeSd4Lrb6aNbyQ _X-j8EJQ8EeSd4Lrb6aNbyQ"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_X-khoZQ8EeSd4Lrb6aNbyQ" name="is part of" memberEnd="_X-j8DZQ8EeSd4Lrb6aNbyQ _X-j8OpQ8EeSd4Lrb6aNbyQ"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_X-khopQ8EeSd4Lrb6aNbyQ" name="incurred over" memberEnd="_X-kiaZQ8EeSd4Lrb6aNbyQ _X-j8FZQ8EeSd4Lrb6aNbyQ"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_X-kho5Q8EeSd4Lrb6aNbyQ" name="is subject to" memberEnd="_X-khcZQ8EeSd4Lrb6aNbyQ _X-j7_JQ8EeSd4Lrb6aNbyQ"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-khpJQ8EeSd4Lrb6aNbyQ" name="Tax_Class">
        <ownedAttribute xmi:id="_X-khpZQ8EeSd4Lrb6aNbyQ" name="tax_class" visibility="public" type="_X-kilZQ8EeSd4Lrb6aNbyQ"/>
        <ownedAttribute xmi:id="_X-khppQ8EeSd4Lrb6aNbyQ" name="tax_Payer" visibility="private" type="_X-khQJQ8EeSd4Lrb6aNbyQ" association="_X-j7-pQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-khp5Q8EeSd4Lrb6aNbyQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-khqJQ8EeSd4Lrb6aNbyQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-khqZQ8EeSd4Lrb6aNbyQ" name="valid_from_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_X-dzwZQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-khqpQ8EeSd4Lrb6aNbyQ" name="valid_until_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_X-dzwZQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-khq5Q8EeSd4Lrb6aNbyQ" name="tax_card" visibility="private" type="_X-ki5JQ8EeSd4Lrb6aNbyQ" association="_X-kipZQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-khrJQ8EeSd4Lrb6aNbyQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-khrZQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-khrpQ8EeSd4Lrb6aNbyQ" name="current_tax_class" visibility="private" type="_X-khpJQ8EeSd4Lrb6aNbyQ" association="_X-khtJQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-khr5Q8EeSd4Lrb6aNbyQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-khsJQ8EeSd4Lrb6aNbyQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-khsZQ8EeSd4Lrb6aNbyQ" name="prev" visibility="private" type="_X-khpJQ8EeSd4Lrb6aNbyQ" association="_X-khtJQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-khspQ8EeSd4Lrb6aNbyQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-khs5Q8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_X-khtJQ8EeSd4Lrb6aNbyQ" name="replaced by" memberEnd="_X-khrpQ8EeSd4Lrb6aNbyQ _X-khsZQ8EeSd4Lrb6aNbyQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_X-khtZQ8EeSd4Lrb6aNbyQ" name="Income_Concepts">
      <ownedComment xmi:id="_X-khtpQ8EeSd4Lrb6aNbyQ" annotatedElement="_X-kh0JQ8EeSd4Lrb6aNbyQ">
        <body>&lt;p> Art.91, alinea 1, numero 2&lt;/p></body>
      </ownedComment>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-kht5Q8EeSd4Lrb6aNbyQ" name="Income_Type">
        <ownedAttribute xmi:id="_X-khuJQ8EeSd4Lrb6aNbyQ" name="subjectToWithholdingTax" visibility="private">
          <ownedComment xmi:id="_X-khuZQ8EeSd4Lrb6aNbyQ" annotatedElement="_X-khuJQ8EeSd4Lrb6aNbyQ">
            <body>&lt;p>The&amp;nbsp;following&amp;nbsp;types&amp;nbsp;of&amp;nbsp;income&amp;nbsp;are&amp;nbsp;subject&amp;nbsp;to&amp;nbsp;withholding&amp;nbsp;tax:&lt;/p>&lt;p>Employment&lt;/p>&lt;p>Pensions&amp;nbsp;and&amp;nbsp;Annuities&lt;/p>&lt;p>Investments&amp;nbsp;(not&amp;nbsp;all&amp;nbsp;types&amp;nbsp;might&amp;nbsp;be&amp;nbsp;subject&amp;nbsp;to&amp;nbsp;withholding.&amp;nbsp;The&amp;nbsp;types&amp;nbsp;subject&amp;nbsp;to&amp;nbsp;withholding&amp;nbsp;have&amp;nbsp;been&amp;nbsp;elaborated&amp;nbsp;on&amp;nbsp;page&amp;nbsp;15&amp;nbsp;of&amp;nbsp;the&amp;nbsp;memento)&lt;/p>&lt;p>&lt;/p></body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/EcorePrimitiveTypes.library.uml#EBoolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-khupQ8EeSd4Lrb6aNbyQ" name="income" visibility="private" type="_X-kh1pQ8EeSd4Lrb6aNbyQ" association="_X-kh0ZQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-khu5Q8EeSd4Lrb6aNbyQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-khvJQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-khvZQ8EeSd4Lrb6aNbyQ" name="Trade_and_Business_Income">
        <generalization xmi:id="_X-khvpQ8EeSd4Lrb6aNbyQ" general="_X-kht5Q8EeSd4Lrb6aNbyQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-khv5Q8EeSd4Lrb6aNbyQ" name="Agriculture_and_Forestry_Income">
        <generalization xmi:id="_X-khwJQ8EeSd4Lrb6aNbyQ" general="_X-kht5Q8EeSd4Lrb6aNbyQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-khwZQ8EeSd4Lrb6aNbyQ" name="Independent_Professional_Services_Income">
        <generalization xmi:id="_X-khwpQ8EeSd4Lrb6aNbyQ" general="_X-kht5Q8EeSd4Lrb6aNbyQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-khw5Q8EeSd4Lrb6aNbyQ" name="Pensions_and_Annuities_Income">
        <generalization xmi:id="_X-khxJQ8EeSd4Lrb6aNbyQ" general="_X-kht5Q8EeSd4Lrb6aNbyQ"/>
        <ownedAttribute xmi:id="_X-khxZQ8EeSd4Lrb6aNbyQ" name="occasional_payement" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_X-khxpQ8EeSd4Lrb6aNbyQ">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-khx5Q8EeSd4Lrb6aNbyQ" name="Capital_and_Investments_Income">
        <generalization xmi:id="_X-khyJQ8EeSd4Lrb6aNbyQ" general="_X-kht5Q8EeSd4Lrb6aNbyQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-khyZQ8EeSd4Lrb6aNbyQ" name="Employment_Income">
        <generalization xmi:id="_X-khypQ8EeSd4Lrb6aNbyQ" general="_X-kht5Q8EeSd4Lrb6aNbyQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-khy5Q8EeSd4Lrb6aNbyQ" name="Rentals_and_Leases_Income">
        <generalization xmi:id="_X-khzJQ8EeSd4Lrb6aNbyQ" general="_X-kht5Q8EeSd4Lrb6aNbyQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-khzZQ8EeSd4Lrb6aNbyQ" name="Sundry_Income">
        <generalization xmi:id="_X-khzpQ8EeSd4Lrb6aNbyQ" general="_X-kht5Q8EeSd4Lrb6aNbyQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-khz5Q8EeSd4Lrb6aNbyQ" name="Directors_Fee">
        <generalization xmi:id="_X-kh0JQ8EeSd4Lrb6aNbyQ" general="_X-khwZQ8EeSd4Lrb6aNbyQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_X-kh0ZQ8EeSd4Lrb6aNbyQ" name="has as type" memberEnd="_X-kh5ZQ8EeSd4Lrb6aNbyQ _X-khupQ8EeSd4Lrb6aNbyQ"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-kh0pQ8EeSd4Lrb6aNbyQ" name="Foreign_Income">
        <generalization xmi:id="_X-kh05Q8EeSd4Lrb6aNbyQ" general="_X-kh1pQ8EeSd4Lrb6aNbyQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-kh1JQ8EeSd4Lrb6aNbyQ" name="Local_Income">
        <generalization xmi:id="_X-kh1ZQ8EeSd4Lrb6aNbyQ" general="_X-kh1pQ8EeSd4Lrb6aNbyQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-kh1pQ8EeSd4Lrb6aNbyQ" name="Income">
        <ownedRule xmi:id="_X-kh15Q8EeSd4Lrb6aNbyQ" name="Tax_Deduction_FD-constraint" constrainedElement="_X-kh1pQ8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-kh2JQ8EeSd4Lrb6aNbyQ">
            <language>OCL</language>
            <body>(self .income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) or&#xA;self.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or&#xA;self.income_type.oclIsTypeOf(Income_Concepts::Rentals_and_Leases_Income)) = true&#xA;and&#xA;self.start_date_within_taxation_year = self.taxPayer.incomeTax.tax_year &#xA;and&#xA;let fd_expenses : Set(Expense_Concepts::Expense) = self.expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Travel_Expense_FD) and exp.year_expense_was_incurred_in = self.start_date_within_taxation_year) in&#xA;     fd_expenses->notEmpty()&#xA;     &#xA;implies&#xA;&#xA;&#x9; fd_expenses->forAll(a_FD|&#x9; &#xA;&#x9; if  (a_FD.deduction.oclAsType(Income_Tax_Deduction_Concepts::FD).calculated_distance>a_FD.deduction.oclAsType(Income_Tax_Deduction_Concepts::FD).distance_declared_in_january) then&#xA;&#x9;&#x9;if  (a_FD.deduction.oclAsType(Income_Tax_Deduction_Concepts::FD).calculated_distance>Constants::MINIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if (a_FD.deduction.oclAsType(Income_Tax_Deduction_Concepts::FD).calculated_distance>Constants::MAXIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/**MAXIMAL FLAT DISTANCE FOR TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;a_FD.deduction.deductible_amount = Constants::FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT.oclAsType(Integer) * Constants::MAXIMAL_FLAT_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;/**REAL DISTANCE FOR TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;a_FD.deduction.deductible_amount = Constants::FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT.oclAsType(Integer) * a_FD.deduction.oclAsType(Income_Tax_Deduction_Concepts::FD).calculated_distance&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;/**MINIMAL FLAT DISTANCE FOR TRAVEL EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;a_FD.deduction.deductible_amount = Constants::FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT.oclAsType(Integer) * Constants::MINIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/*NO CHANGES FOR FD, TRAVEL EXPENSE IS ALREADY DEDUCED FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;endif&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;a_FD.deduction.yearly=  a_FD.deduction.deductible_amount and&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;a_FD.deduction.monthly = a_FD.deduction.deductible_amount/12 and&#xA;&#x9;&#x9;a_FD.deduction.daily = a_FD.deduction.monthly/25&#xA;)&#xA;&#x9; </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_X-kh2ZQ8EeSd4Lrb6aNbyQ" name="Tax_Deduction_FO-constraint" constrainedElement="_X-kh1pQ8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-kh2pQ8EeSd4Lrb6aNbyQ">
            <language>OCL</language>
            <body>(self.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) or&#xA;self.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or&#xA;self.income_type.oclIsTypeOf(Income_Concepts::Rentals_and_Leases_Income)) = true&#xA;and&#xA;self.start_date_within_taxation_year = self.taxPayer.incomeTax.tax_year&#xA;and&#xA;let fo_expenses : Set(Expense_Concepts::Expense) = self.expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Miscellaneous_Expense_FO) and exp.year_expense_was_incurred_in = self.start_date_within_taxation_year),&#xA;&#x9;declared_expense : Integer = fo_expenses.declared_amount->sum() in&#xA;&#x9;&#xA;     fo_expenses->notEmpty()&#xA;&#xA;implies&#xA;&#xA;&#x9;fo_expenses->forAll(fo|&#xA;&#x9;&#x9;&#x9;/*do we want to care about this, or up to the agent to decide*/&#xA;&#x9;&#x9;&#x9;let spouse_FO: Income_Tax_Deduction_Concepts::FO =  self.taxPayer.legal_union_A.individual_B.oclAsType(Tax_Payer_Concepts::Tax_Payer).income_Tax_Deduction->&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;select(type|type.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO))->any(true).oclAsType(Income_Tax_Deduction_Concepts::FO),&#xA;&#x9;&#x9;&#x9;&#x9; spouse_declared_expense:Integer=self.taxPayer.legal_union_A.individual_B.oclAsType(Tax_Payer_Concepts::Tax_Payer).expenses->select(exp|exp.oclIsTypeOf(Expense_Concepts::Miscellaneous_Expense_FO))->any(true).declared_amount in&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if(fo.deduction.oclAsType(Income_Tax_Deduction_Concepts::FO) .rate_type_for_FO = Type_of_Rate::REAL_COST) then &#xA;&#x9;&#x9;&#x9;&#x9;if(self.taxPayer.taxed_jointly) then &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(spouse_FO.rate_type_for_FO= Type_of_Rate::REAL_COST) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;fo.deduction.oclAsType(Income_Tax_Deduction_Concepts::FO) .rate_type_for_FO = Type_of_Rate::REGULAR&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;if(declared_expense>Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE= Type_of_Rate::REAL_COST&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;true&#xA;&#x9;&#x9;&#x9;&#x9;endif &#xA;&#x9;&#x9;&#x9;endif&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;and&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if (Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE = Type_of_Rate::REGULAR) then&#xA;&#x9;&#x9;&#x9;/*FLAT RATE FOR FO EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;fo.deduction.deductible_amount =Constants::FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)+Constants::DISABILITY_FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;/**REAL COST FOR FO EXPENSE IS ALLOWED FOR DEDUCTION FROM TAXABLE INCOME**/&#xA;&#x9;&#x9;&#x9;&#x9;fo.deduction.deductible_amount = declared_expense+Constants::DISABILITY_FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE.oclAsType(Integer)&#xA;&#x9;&#x9;endif&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;fo.deduction.oclAsType(Income_Tax_Deduction_Concepts::FO) .yearly=  fo.deduction.deductible_amount and&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;fo.deduction.oclAsType(Income_Tax_Deduction_Concepts::FO) .monthly = fo.deduction.deductible_amount/12 and&#xA;&#x9;&#x9;fo.deduction.oclAsType(Income_Tax_Deduction_Concepts::FO) .daily = fo.deduction.monthly/25 &#x9;&#xA;&#x9;) &#xA;&#x9;</body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:id="_X-kh25Q8EeSd4Lrb6aNbyQ" name="taxPayer" visibility="private" type="_X-khQJQ8EeSd4Lrb6aNbyQ" association="_X-kiepQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-kh3JQ8EeSd4Lrb6aNbyQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-kh3ZQ8EeSd4Lrb6aNbyQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kh3pQ8EeSd4Lrb6aNbyQ" name="income_amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kh35Q8EeSd4Lrb6aNbyQ" name="start_date_within_taxation_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_X-dzwZQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kh4JQ8EeSd4Lrb6aNbyQ" name="start_date_of_contract" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_X-dzwZQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kh4ZQ8EeSd4Lrb6aNbyQ" name="end_date_within_taxation_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_X-dzwZQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kh4pQ8EeSd4Lrb6aNbyQ" name="tax_card" visibility="private" type="_X-ki5JQ8EeSd4Lrb6aNbyQ" association="_X-kin5Q8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-kh45Q8EeSd4Lrb6aNbyQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-kh5JQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kh5ZQ8EeSd4Lrb6aNbyQ" name="income_type" visibility="private" type="_X-kht5Q8EeSd4Lrb6aNbyQ" association="_X-kh0ZQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-kh5pQ8EeSd4Lrb6aNbyQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-kh55Q8EeSd4Lrb6aNbyQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kh6JQ8EeSd4Lrb6aNbyQ" name="expenses" visibility="private" type="_X-kiYpQ8EeSd4Lrb6aNbyQ" association="_X-kiYZQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-kh6ZQ8EeSd4Lrb6aNbyQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-kh6pQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kh65Q8EeSd4Lrb6aNbyQ" name="tax_liability" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_X-kh7JQ8EeSd4Lrb6aNbyQ" name="compute_duration_of_contract" isQuery="true" postcondition="_X-kh7pQ8EeSd4Lrb6aNbyQ">
          <eAnnotations xmi:id="_X-kh7ZQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_X-kh7pQ8EeSd4Lrb6aNbyQ" name="get_duration" constrainedElement="_X-kh7JQ8EeSd4Lrb6aNbyQ">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-kh75Q8EeSd4Lrb6aNbyQ">
              <language>OCL</language>
              <body>result=1&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_X-kh8JQ8EeSd4Lrb6aNbyQ" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_X-kh8ZQ8EeSd4Lrb6aNbyQ" name="compute_duration_of_contract_within_taxation_year" isQuery="true">
          <eAnnotations xmi:id="_X-kh8pQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_X-kh85Q8EeSd4Lrb6aNbyQ" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_X-kh9JQ8EeSd4Lrb6aNbyQ" name="IN_date">
            <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_X-dzwZQ8EeSd4Lrb6aNbyQ"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_X-kh9ZQ8EeSd4Lrb6aNbyQ" name="Expense_Concepts">
      <packagedElement xmi:type="uml:Class" xmi:id="_X-kh9pQ8EeSd4Lrb6aNbyQ" name="Permanent_Expense">
        <generalization xmi:id="_X-kh95Q8EeSd4Lrb6aNbyQ" general="_X-kiA5Q8EeSd4Lrb6aNbyQ"/>
        <ownedAttribute xmi:id="_X-kh-JQ8EeSd4Lrb6aNbyQ" name="category" visibility="public" type="_X-kiVJQ8EeSd4Lrb6aNbyQ"/>
        <ownedAttribute xmi:id="_X-kh-ZQ8EeSd4Lrb6aNbyQ" name="is_eligible_for_deduction" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_X-kh-pQ8EeSd4Lrb6aNbyQ">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedOperation xmi:id="_X-kh-5Q8EeSd4Lrb6aNbyQ" name="is_expense_eligible_for_deduction" isQuery="true" postcondition="_X-kh_ZQ8EeSd4Lrb6aNbyQ">
          <eAnnotations xmi:id="_X-kh_JQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_X-kh_ZQ8EeSd4Lrb6aNbyQ" name="is_eligible" constrainedElement="_X-kh-5Q8EeSd4Lrb6aNbyQ">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-kh_pQ8EeSd4Lrb6aNbyQ">
              <language>OCL</language>
              <body>self.is_eligible_for_deduction = IN_agent_response and&#xA;result = IN_agent_response&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_X-kh_5Q8EeSd4Lrb6aNbyQ" name="IN_agent_response">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_X-kiAJQ8EeSd4Lrb6aNbyQ" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-kiAZQ8EeSd4Lrb6aNbyQ" name="Interest_Expense">
        <generalization xmi:id="_X-kiApQ8EeSd4Lrb6aNbyQ" general="_X-kiA5Q8EeSd4Lrb6aNbyQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-kiA5Q8EeSd4Lrb6aNbyQ" name="Special_Expense_DS">
        <generalization xmi:id="_X-kiBJQ8EeSd4Lrb6aNbyQ" general="_X-kiYpQ8EeSd4Lrb6aNbyQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-kiBZQ8EeSd4Lrb6aNbyQ" name="Private_Insurance_and_Plan">
        <generalization xmi:id="_X-kiBpQ8EeSd4Lrb6aNbyQ" general="_X-kiA5Q8EeSd4Lrb6aNbyQ"/>
        <ownedAttribute xmi:id="_X-kiB5Q8EeSd4Lrb6aNbyQ" name="category" visibility="public" type="_X-kiV5Q8EeSd4Lrb6aNbyQ"/>
        <ownedAttribute xmi:id="_X-kiCJQ8EeSd4Lrb6aNbyQ" name="duration_of_contract" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kiCZQ8EeSd4Lrb6aNbyQ" name="is_private_insurance_and_plan_eligible_for_deduction" visibility="public" isDerived="true">
          <eAnnotations xmi:id="_X-kiCpQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_X-kiC5Q8EeSd4Lrb6aNbyQ">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedOperation xmi:id="_X-kiDJQ8EeSd4Lrb6aNbyQ" name="is_private_insurance_and_plan_eligible_for_deduction" isQuery="true" postcondition="_X-kiDpQ8EeSd4Lrb6aNbyQ">
          <eAnnotations xmi:id="_X-kiDZQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_X-kiDpQ8EeSd4Lrb6aNbyQ" name="is_private_insurance_and_plan_eligible_for_deduction" constrainedElement="_X-kiDJQ8EeSd4Lrb6aNbyQ">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-kiD5Q8EeSd4Lrb6aNbyQ">
              <language>OCL</language>
              <body>self.is_private_insurance_and_plan_eligible_for_deduction = IN_eligible_plan&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_X-kiEJQ8EeSd4Lrb6aNbyQ" name="IN_eligible_plan">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-kiEZQ8EeSd4Lrb6aNbyQ" name="Health_and_Pension_Insurance">
        <generalization xmi:id="_X-kiEpQ8EeSd4Lrb6aNbyQ" general="_X-kiA5Q8EeSd4Lrb6aNbyQ"/>
        <ownedAttribute xmi:id="_X-kiE5Q8EeSd4Lrb6aNbyQ" name="category" visibility="public" type="_X-kiXZQ8EeSd4Lrb6aNbyQ"/>
        <ownedAttribute xmi:id="_X-kiFJQ8EeSd4Lrb6aNbyQ" name="is_related_to_additional_salary" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_X-kiFZQ8EeSd4Lrb6aNbyQ">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-kiFpQ8EeSd4Lrb6aNbyQ" name="Donation">
        <generalization xmi:id="_X-kiF5Q8EeSd4Lrb6aNbyQ" general="_X-kiA5Q8EeSd4Lrb6aNbyQ"/>
        <ownedAttribute xmi:id="_X-kiGJQ8EeSd4Lrb6aNbyQ" name="beneficiary" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kiGZQ8EeSd4Lrb6aNbyQ" name="is_beneficiary_eligible" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_X-kiGpQ8EeSd4Lrb6aNbyQ">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kiG5Q8EeSd4Lrb6aNbyQ" name="is_donation_reported" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_X-kiHJQ8EeSd4Lrb6aNbyQ" name="get_beneficiary_eligibility_for_deduction" isQuery="true" postcondition="_X-kiHpQ8EeSd4Lrb6aNbyQ">
          <eAnnotations xmi:id="_X-kiHZQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_X-kiHpQ8EeSd4Lrb6aNbyQ" name="is_leagaly_approved_beneficiary" constrainedElement="_X-kiHJQ8EeSd4Lrb6aNbyQ">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-kiH5Q8EeSd4Lrb6aNbyQ">
              <language>OCL</language>
              <body>is_beneficiary_eligible = IN_eligibility&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_X-kiIJQ8EeSd4Lrb6aNbyQ" name="IN_eligibility">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-kiIZQ8EeSd4Lrb6aNbyQ" name="Loss_Carryforward">
        <ownedRule xmi:id="_X-kiIpQ8EeSd4Lrb6aNbyQ" name="ExpensePossibleOnlyIfCertainIncomeType-constraint" constrainedElement="_X-kiIZQ8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-kiI5Q8EeSd4Lrb6aNbyQ">
            <language>OCL</language>
            <body>self.oclIsTypeOf(Loss_Carryforward) implies&#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Agriculture_and_Forestry_Income) or &#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Independent_Professional_Services_Income) or&#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Trade_and_Business_Income)&#xA;&#xA;</body>
          </specification>
        </ownedRule>
        <generalization xmi:id="_X-kiJJQ8EeSd4Lrb6aNbyQ" general="_X-kiA5Q8EeSd4Lrb6aNbyQ"/>
        <ownedAttribute xmi:id="_X-kiJZQ8EeSd4Lrb6aNbyQ" name="regular_accountability" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kiJpQ8EeSd4Lrb6aNbyQ" name="compensation_by_other_means" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kiJ5Q8EeSd4Lrb6aNbyQ" name="tax_payer_has_inherited_business_ownership" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_X-kiKJQ8EeSd4Lrb6aNbyQ">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kiKZQ8EeSd4Lrb6aNbyQ" name="tax_payer_has_been_partner_in_business" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_X-kiKpQ8EeSd4Lrb6aNbyQ" value="true">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </defaultValue>
        </ownedAttribute>
        <ownedOperation xmi:id="_X-kiK5Q8EeSd4Lrb6aNbyQ" name="is_accountability_regular" isQuery="true" postcondition="_X-kiLZQ8EeSd4Lrb6aNbyQ">
          <eAnnotations xmi:id="_X-kiLJQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_X-kiLZQ8EeSd4Lrb6aNbyQ" name="is_accounatbility_regular" constrainedElement="_X-kiK5Q8EeSd4Lrb6aNbyQ">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-kiLpQ8EeSd4Lrb6aNbyQ">
              <language>OCL</language>
              <body>self.regular_accountability = IN_regularity</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_X-kiL5Q8EeSd4Lrb6aNbyQ" name="IN_regularity">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
          <ownedParameter xmi:id="_X-kiMJQ8EeSd4Lrb6aNbyQ" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_X-kiMZQ8EeSd4Lrb6aNbyQ" name="is_compensated_by_other_means" isQuery="true" postcondition="_X-kiM5Q8EeSd4Lrb6aNbyQ">
          <eAnnotations xmi:id="_X-kiMpQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_X-kiM5Q8EeSd4Lrb6aNbyQ" name="is_compensated_by_other_means" constrainedElement="_X-kiMZQ8EeSd4Lrb6aNbyQ">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-kiNJQ8EeSd4Lrb6aNbyQ">
              <language>OCL</language>
              <body>self.compensation_by_other_means = IN_compensated</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_X-kiNZQ8EeSd4Lrb6aNbyQ" name="IN_compensated">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_X-kiNpQ8EeSd4Lrb6aNbyQ" name="has_been_tax_payer_partner_in_business" isQuery="true" postcondition="_X-kiOJQ8EeSd4Lrb6aNbyQ">
          <eAnnotations xmi:id="_X-kiN5Q8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_X-kiOJQ8EeSd4Lrb6aNbyQ" name="partner_in_business" constrainedElement="_X-kiNpQ8EeSd4Lrb6aNbyQ">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-kiOZQ8EeSd4Lrb6aNbyQ">
              <language>OCL</language>
              <body>self.tax_payer_has_been_partner_in_business = IN_has_been_partner_in_business&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_X-kiOpQ8EeSd4Lrb6aNbyQ" name="IN_has_been_partner_in_business">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_X-kiO5Q8EeSd4Lrb6aNbyQ" name="has_tax_payer_inherited_business_ownership" isQuery="true" postcondition="_X-kiPZQ8EeSd4Lrb6aNbyQ">
          <eAnnotations xmi:id="_X-kiPJQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_X-kiPZQ8EeSd4Lrb6aNbyQ" name="inherited_business_ownership" constrainedElement="_X-kiO5Q8EeSd4Lrb6aNbyQ">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-kiPpQ8EeSd4Lrb6aNbyQ">
              <language>OCL</language>
              <body>self.tax_payer_has_inherited_business_ownership = IN_inherited_business_ownership</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_X-kiP5Q8EeSd4Lrb6aNbyQ" name="IN_inherited_business_ownership">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-kiQJQ8EeSd4Lrb6aNbyQ" name="Spousal_Expense_AC">
        <generalization xmi:id="_X-kiQZQ8EeSd4Lrb6aNbyQ" general="_X-kiYpQ8EeSd4Lrb6aNbyQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-kiQpQ8EeSd4Lrb6aNbyQ" name="Extraordinary_Expense_CE">
        <generalization xmi:id="_X-kiQ5Q8EeSd4Lrb6aNbyQ" general="_X-kiYpQ8EeSd4Lrb6aNbyQ"/>
        <ownedAttribute xmi:id="_X-kiRJQ8EeSd4Lrb6aNbyQ" name="thresholded_deduction_percentage" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kiRZQ8EeSd4Lrb6aNbyQ" name="ce_type" visibility="public" type="_X-kiq5Q8EeSd4Lrb6aNbyQ"/>
        <ownedOperation xmi:id="_X-kiRpQ8EeSd4Lrb6aNbyQ" name="is_above_thresholded_deduction_percentage_for_CE" isQuery="true">
          <eAnnotations xmi:id="_X-kiR5Q8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_X-kiSJQ8EeSd4Lrb6aNbyQ" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_X-kiSZQ8EeSd4Lrb6aNbyQ" name="compute_thresholded_deduction_percentage_for_CE" isQuery="true" postcondition="_X-kiS5Q8EeSd4Lrb6aNbyQ">
          <eAnnotations xmi:id="_X-kiSpQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_X-kiS5Q8EeSd4Lrb6aNbyQ" name="thresholded_deduction_percentage" constrainedElement="_X-kiSZQ8EeSd4Lrb6aNbyQ">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-kiTJQ8EeSd4Lrb6aNbyQ">
              <language>OCL</language>
              <body>self.thresholded_deduction_percentage = IN_thresholded_deduction_percentage&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_X-kiTZQ8EeSd4Lrb6aNbyQ" name="IN_thresholded_deduction_percentage">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-kiTpQ8EeSd4Lrb6aNbyQ" name="Travel_Expense_FD">
        <generalization xmi:id="_X-kiT5Q8EeSd4Lrb6aNbyQ" general="_X-kiUpQ8EeSd4Lrb6aNbyQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-kiUJQ8EeSd4Lrb6aNbyQ" name="Miscellaneous_Expense_FO">
        <generalization xmi:id="_X-kiUZQ8EeSd4Lrb6aNbyQ" general="_X-kiUpQ8EeSd4Lrb6aNbyQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-kiUpQ8EeSd4Lrb6aNbyQ" name="Professional_Expense">
        <generalization xmi:id="_X-kiU5Q8EeSd4Lrb6aNbyQ" general="_X-kiYpQ8EeSd4Lrb6aNbyQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="_X-kiVJQ8EeSd4Lrb6aNbyQ" name="Category_of_Permanent_Expense">
        <ownedLiteral xmi:id="_X-kiVZQ8EeSd4Lrb6aNbyQ" name="MISCELLANEOUS_DEBT" classifier="_X-kiVJQ8EeSd4Lrb6aNbyQ"/>
        <ownedLiteral xmi:id="_X-kiVpQ8EeSd4Lrb6aNbyQ" name="ALIMONY" classifier="_X-kiVJQ8EeSd4Lrb6aNbyQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="_X-kiV5Q8EeSd4Lrb6aNbyQ" name="Category_of_Private_Insurance_and_Plan">
        <ownedLiteral xmi:id="_X-kiWJQ8EeSd4Lrb6aNbyQ" name="PRIVATE_INSURANCE" classifier="_X-kiV5Q8EeSd4Lrb6aNbyQ"/>
        <ownedLiteral xmi:id="_X-kiWZQ8EeSd4Lrb6aNbyQ" name="PRIVATE_LIFE_INSURANCE" classifier="_X-kiXZQ8EeSd4Lrb6aNbyQ"/>
        <ownedLiteral xmi:id="_X-kiWpQ8EeSd4Lrb6aNbyQ" name="COMPANY_MEMBERS_PRIVATE_INSURANCE" classifier="_X-kiV5Q8EeSd4Lrb6aNbyQ"/>
        <ownedLiteral xmi:id="_X-kiW5Q8EeSd4Lrb6aNbyQ" name="HOUSING_SAVING_PLAN" classifier="_X-kiXZQ8EeSd4Lrb6aNbyQ"/>
        <ownedLiteral xmi:id="_X-kiXJQ8EeSd4Lrb6aNbyQ" name="OLD_AGE_PENSION_PLAN" classifier="_X-kiXZQ8EeSd4Lrb6aNbyQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="_X-kiXZQ8EeSd4Lrb6aNbyQ" name="Category_of_Health_and_Pension_Insurances">
        <ownedLiteral xmi:id="_X-kiXpQ8EeSd4Lrb6aNbyQ" name="MANDATORY_HEALTH_AND_PENSION_INSURANCE" classifier="_X-kiXZQ8EeSd4Lrb6aNbyQ"/>
        <ownedLiteral xmi:id="_X-kiX5Q8EeSd4Lrb6aNbyQ" name="ADDITIONAL_EMPLOYERS_PENSION_INSURANCE" classifier="_X-kiXZQ8EeSd4Lrb6aNbyQ"/>
        <ownedLiteral xmi:id="_X-kiYJQ8EeSd4Lrb6aNbyQ" name="CONTINUED_HEALTH_AND_PENSION_INSURANCE" classifier="_X-kiXZQ8EeSd4Lrb6aNbyQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_X-kiYZQ8EeSd4Lrb6aNbyQ" name="influences" memberEnd="_X-kibZQ8EeSd4Lrb6aNbyQ _X-kh6JQ8EeSd4Lrb6aNbyQ"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-kiYpQ8EeSd4Lrb6aNbyQ" name="Expense">
        <ownedAttribute xmi:id="_X-kiY5Q8EeSd4Lrb6aNbyQ" name="tax_Payer" visibility="private" type="_X-khQJQ8EeSd4Lrb6aNbyQ" association="_X-kip5Q8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-kiZJQ8EeSd4Lrb6aNbyQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-kiZZQ8EeSd4Lrb6aNbyQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kiZpQ8EeSd4Lrb6aNbyQ" name="declared_amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kiZ5Q8EeSd4Lrb6aNbyQ" name="expense_purpose" visibility="public" type="_X-kir5Q8EeSd4Lrb6aNbyQ">
          <defaultValue xmi:type="uml:InstanceValue" xmi:id="_X-kiaJQ8EeSd4Lrb6aNbyQ" name="OTHER" type="_X-kir5Q8EeSd4Lrb6aNbyQ" instance="_X-kis5Q8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kiaZQ8EeSd4Lrb6aNbyQ" name="dependent" visibility="private" type="_X-j8CpQ8EeSd4Lrb6aNbyQ" association="_X-khopQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-kiapQ8EeSd4Lrb6aNbyQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-kia5Q8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kibJQ8EeSd4Lrb6aNbyQ" name="year_expense_was_incurred_in" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kibZQ8EeSd4Lrb6aNbyQ" name="income" visibility="private" type="_X-kh1pQ8EeSd4Lrb6aNbyQ" association="_X-kiYZQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-kibpQ8EeSd4Lrb6aNbyQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-kib5Q8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kicJQ8EeSd4Lrb6aNbyQ" name="deduction" visibility="private" type="_X-lIUpQ8EeSd4Lrb6aNbyQ" association="_X-lIYZQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-kicZQ8EeSd4Lrb6aNbyQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-kicpQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_X-kic5Q8EeSd4Lrb6aNbyQ" name="Grantor">
      <ownedLiteral xmi:id="_X-kidJQ8EeSd4Lrb6aNbyQ" name="ACD" classifier="_X-kic5Q8EeSd4Lrb6aNbyQ"/>
      <ownedLiteral xmi:id="_X-kidZQ8EeSd4Lrb6aNbyQ" name="Employer" classifier="_X-kic5Q8EeSd4Lrb6aNbyQ"/>
      <ownedLiteral xmi:id="_X-kidpQ8EeSd4Lrb6aNbyQ" name="CNPF" classifier="_X-kic5Q8EeSd4Lrb6aNbyQ"/>
      <ownedLiteral xmi:id="_X-kid5Q8EeSd4Lrb6aNbyQ" name="CEDIES" classifier="_X-kic5Q8EeSd4Lrb6aNbyQ"/>
      <ownedLiteral xmi:id="_X-kieJQ8EeSd4Lrb6aNbyQ" name="SNJ" classifier="_X-kic5Q8EeSd4Lrb6aNbyQ"/>
      <ownedLiteral xmi:id="_X-kieZQ8EeSd4Lrb6aNbyQ" name="CNAP" classifier="_X-kic5Q8EeSd4Lrb6aNbyQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_X-kiepQ8EeSd4Lrb6aNbyQ" name="earns" memberEnd="_X-khbpQ8EeSd4Lrb6aNbyQ _X-kh25Q8EeSd4Lrb6aNbyQ"/>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_X-kie5Q8EeSd4Lrb6aNbyQ" name="Country">
      <ownedLiteral xmi:id="_X-kifJQ8EeSd4Lrb6aNbyQ" name="LU" classifier="_X-kie5Q8EeSd4Lrb6aNbyQ"/>
      <ownedLiteral xmi:id="_X-kifZQ8EeSd4Lrb6aNbyQ" name="FR" classifier="_X-kie5Q8EeSd4Lrb6aNbyQ"/>
      <ownedLiteral xmi:id="_X-kifpQ8EeSd4Lrb6aNbyQ" name="BE" classifier="_X-kie5Q8EeSd4Lrb6aNbyQ"/>
      <ownedLiteral xmi:id="_X-kif5Q8EeSd4Lrb6aNbyQ" name="DE" classifier="_X-kie5Q8EeSd4Lrb6aNbyQ"/>
      <ownedLiteral xmi:id="_X-kigJQ8EeSd4Lrb6aNbyQ" name="NL" classifier="_X-kie5Q8EeSd4Lrb6aNbyQ"/>
      <ownedLiteral xmi:id="_X-kigZQ8EeSd4Lrb6aNbyQ" name="OTHER" classifier="_X-kie5Q8EeSd4Lrb6aNbyQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_X-kigpQ8EeSd4Lrb6aNbyQ" name="credited for" memberEnd="_X-khdJQ8EeSd4Lrb6aNbyQ _X-kjOpQ8EeSd4Lrb6aNbyQ"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_X-kig5Q8EeSd4Lrb6aNbyQ" name="Date">
      <ownedAttribute xmi:id="_X-kihJQ8EeSd4Lrb6aNbyQ" name="day" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-kihZQ8EeSd4Lrb6aNbyQ" value="*"/>
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-kihpQ8EeSd4Lrb6aNbyQ" value="1"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_X-kih5Q8EeSd4Lrb6aNbyQ" name="month" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
      <ownedAttribute xmi:id="_X-kiiJQ8EeSd4Lrb6aNbyQ" name="year" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
      </ownedAttribute>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_X-kiiZQ8EeSd4Lrb6aNbyQ" name="Job_Activity">
      <ownedLiteral xmi:id="_X-kiipQ8EeSd4Lrb6aNbyQ" name="Salary" classifier="_X-kiiZQ8EeSd4Lrb6aNbyQ"/>
      <ownedLiteral xmi:id="_X-kii5Q8EeSd4Lrb6aNbyQ" name="Pension" classifier="_X-kiiZQ8EeSd4Lrb6aNbyQ"/>
      <ownedLiteral xmi:id="_X-kijJQ8EeSd4Lrb6aNbyQ" name="Annuity" classifier="_X-kiiZQ8EeSd4Lrb6aNbyQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_X-kijZQ8EeSd4Lrb6aNbyQ" name="Tax_Card_Type">
      <ownedLiteral xmi:id="_X-kijpQ8EeSd4Lrb6aNbyQ" name="Principal" classifier="_X-kijZQ8EeSd4Lrb6aNbyQ"/>
      <ownedLiteral xmi:id="_X-kij5Q8EeSd4Lrb6aNbyQ" name="Additional" classifier="_X-kijZQ8EeSd4Lrb6aNbyQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_X-kikJQ8EeSd4Lrb6aNbyQ" name="Tax_Office">
      <ownedLiteral xmi:id="_X-kikZQ8EeSd4Lrb6aNbyQ" name="RTS_2" classifier="_X-kikJQ8EeSd4Lrb6aNbyQ"/>
      <ownedLiteral xmi:id="_X-kikpQ8EeSd4Lrb6aNbyQ" name="RTS_3" classifier="_X-kikJQ8EeSd4Lrb6aNbyQ"/>
      <ownedLiteral xmi:id="_X-kik5Q8EeSd4Lrb6aNbyQ" name="RTS_Esch" classifier="_X-kikJQ8EeSd4Lrb6aNbyQ"/>
      <ownedLiteral xmi:id="_X-kilJQ8EeSd4Lrb6aNbyQ" name="RTS_Ettelbruck" classifier="_X-kikJQ8EeSd4Lrb6aNbyQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_X-kilZQ8EeSd4Lrb6aNbyQ" name="Tax_Class_Category">
      <ownedLiteral xmi:id="_X-kilpQ8EeSd4Lrb6aNbyQ" name="One" classifier="_X-kilZQ8EeSd4Lrb6aNbyQ"/>
      <ownedLiteral xmi:id="_X-kil5Q8EeSd4Lrb6aNbyQ" name="One_A" classifier="_X-kilZQ8EeSd4Lrb6aNbyQ"/>
      <ownedLiteral xmi:id="_X-kimJQ8EeSd4Lrb6aNbyQ" name="Two" classifier="_X-kilZQ8EeSd4Lrb6aNbyQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_X-kimZQ8EeSd4Lrb6aNbyQ" name="Town">
      <ownedLiteral xmi:id="_X-kimpQ8EeSd4Lrb6aNbyQ" name="Luxembourg_city" classifier="_X-kimZQ8EeSd4Lrb6aNbyQ"/>
      <ownedLiteral xmi:id="_X-kim5Q8EeSd4Lrb6aNbyQ" name="Bertrange" classifier="_X-kimZQ8EeSd4Lrb6aNbyQ"/>
      <ownedLiteral xmi:id="_X-kinJQ8EeSd4Lrb6aNbyQ" name="Strassen" classifier="_X-kimZQ8EeSd4Lrb6aNbyQ"/>
      <ownedLiteral xmi:id="_X-kinZQ8EeSd4Lrb6aNbyQ" name="Bettembourg" classifier="_X-kimZQ8EeSd4Lrb6aNbyQ"/>
      <ownedLiteral xmi:id="_X-kinpQ8EeSd4Lrb6aNbyQ" name="Beaufort" classifier="_X-kimZQ8EeSd4Lrb6aNbyQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_X-kin5Q8EeSd4Lrb6aNbyQ" name="linked to" memberEnd="_X-kh4pQ8EeSd4Lrb6aNbyQ _X-ki-ZQ8EeSd4Lrb6aNbyQ"/>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_X-kioJQ8EeSd4Lrb6aNbyQ" name="Dependent_Type">
      <ownedLiteral xmi:id="_X-kioZQ8EeSd4Lrb6aNbyQ" name="CHILD" classifier="_X-kioJQ8EeSd4Lrb6aNbyQ"/>
      <ownedLiteral xmi:id="_X-kiopQ8EeSd4Lrb6aNbyQ" name="SPOUSE" classifier="_X-kioJQ8EeSd4Lrb6aNbyQ"/>
      <ownedLiteral xmi:id="_X-kio5Q8EeSd4Lrb6aNbyQ" name="RELATIVE" classifier="_X-kioJQ8EeSd4Lrb6aNbyQ"/>
      <ownedLiteral xmi:id="_X-kipJQ8EeSd4Lrb6aNbyQ" name="OTHER_FAMILY_MEMBER" classifier="_X-kioJQ8EeSd4Lrb6aNbyQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Association" xmi:id="_X-kipZQ8EeSd4Lrb6aNbyQ" name="provides" memberEnd="_X-ki_JQ8EeSd4Lrb6aNbyQ _X-khq5Q8EeSd4Lrb6aNbyQ"/>
    <packagedElement xmi:type="uml:Association" xmi:id="_X-kippQ8EeSd4Lrb6aNbyQ" name="receives" memberEnd="_X-khgJQ8EeSd4Lrb6aNbyQ _X-lIV5Q8EeSd4Lrb6aNbyQ"/>
    <packagedElement xmi:type="uml:Association" xmi:id="_X-kip5Q8EeSd4Lrb6aNbyQ" name="declares" memberEnd="_X-khhJQ8EeSd4Lrb6aNbyQ _X-kiY5Q8EeSd4Lrb6aNbyQ"/>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_X-kiqJQ8EeSd4Lrb6aNbyQ" name="Type_of_Rate">
      <ownedLiteral xmi:id="_X-kiqZQ8EeSd4Lrb6aNbyQ" name="REGULAR" classifier="_X-kiqJQ8EeSd4Lrb6aNbyQ"/>
      <ownedLiteral xmi:id="_X-kiqpQ8EeSd4Lrb6aNbyQ" name="REAL_COST" classifier="_X-kiqJQ8EeSd4Lrb6aNbyQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_X-kiq5Q8EeSd4Lrb6aNbyQ" name="CE_Type">
      <ownedLiteral xmi:id="_X-kirJQ8EeSd4Lrb6aNbyQ" name="INALIDITY_AND_INFIRMITY" classifier="_X-kiq5Q8EeSd4Lrb6aNbyQ"/>
      <ownedLiteral xmi:id="_X-kirZQ8EeSd4Lrb6aNbyQ" name="DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD" classifier="_X-kiq5Q8EeSd4Lrb6aNbyQ"/>
      <ownedLiteral xmi:id="_X-kirpQ8EeSd4Lrb6aNbyQ" name="CARE_FOR_CHILDREN_NOT_BEING_PART_OF_HOUSEHOLD" classifier="_X-kiq5Q8EeSd4Lrb6aNbyQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_X-kir5Q8EeSd4Lrb6aNbyQ" name="Expense_Purpose">
      <ownedLiteral xmi:id="_X-kisJQ8EeSd4Lrb6aNbyQ" name="HOUSE_CARE" classifier="_X-kir5Q8EeSd4Lrb6aNbyQ"/>
      <ownedLiteral xmi:id="_X-kisZQ8EeSd4Lrb6aNbyQ" name="CHILD_CARE" classifier="_X-kir5Q8EeSd4Lrb6aNbyQ"/>
      <ownedLiteral xmi:id="_X-kispQ8EeSd4Lrb6aNbyQ" name="DEPENDENCE_CARE" classifier="_X-kir5Q8EeSd4Lrb6aNbyQ"/>
      <ownedLiteral xmi:id="_X-kis5Q8EeSd4Lrb6aNbyQ" name="OTHER" classifier="_X-kir5Q8EeSd4Lrb6aNbyQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Enumeration" xmi:id="_X-kitJQ8EeSd4Lrb6aNbyQ" name="Constants">
      <ownedLiteral xmi:id="_X-kitZQ8EeSd4Lrb6aNbyQ" name="MAXIMUM_CE_RATE_FOR_CHILD_NOT_BEING_PART_OF_HOUSEHOLD" classifier="_X-kitJQ8EeSd4Lrb6aNbyQ">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_X-kitpQ8EeSd4Lrb6aNbyQ" value="3480"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_X-kit5Q8EeSd4Lrb6aNbyQ" name="MAXIMUM_CE_RATE_FOR_HOUSE_CARE_AND_CHILD_PART_OF_THE_HOUSEHOLD_CARE" classifier="_X-kitJQ8EeSd4Lrb6aNbyQ">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_X-kiuJQ8EeSd4Lrb6aNbyQ" value="3600"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_X-kiuZQ8EeSd4Lrb6aNbyQ" name="MINIMUM_SALARY" classifier="_X-kitJQ8EeSd4Lrb6aNbyQ">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_X-kiupQ8EeSd4Lrb6aNbyQ" value="1500"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_X-kiu5Q8EeSd4Lrb6aNbyQ" name="FLAT_RATE_FOR_EXTRA_PROFESSIONAL_DEDUCTION" classifier="_X-kitJQ8EeSd4Lrb6aNbyQ">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_X-kivJQ8EeSd4Lrb6aNbyQ" value="4500"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_X-kivZQ8EeSd4Lrb6aNbyQ" name="MAXIMUM_DEDUCTIBLE_PERCENTAGE_FOR_DONATIONS" classifier="_X-kitJQ8EeSd4Lrb6aNbyQ">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_X-kivpQ8EeSd4Lrb6aNbyQ" value="20"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_X-kiv5Q8EeSd4Lrb6aNbyQ" name="MINIMUM_DEDUCTIBLE_AMOUNT_FOR_DONATIONS" classifier="_X-kitJQ8EeSd4Lrb6aNbyQ">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_X-kiwJQ8EeSd4Lrb6aNbyQ" value="120"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_X-kiwZQ8EeSd4Lrb6aNbyQ" name="MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ADDITIONAL_PENSION_AND_INSURANCE" classifier="_X-kitJQ8EeSd4Lrb6aNbyQ">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_X-kiwpQ8EeSd4Lrb6aNbyQ"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_X-kiw5Q8EeSd4Lrb6aNbyQ" name="MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_ALIMONY_EXPENSE" classifier="_X-kitJQ8EeSd4Lrb6aNbyQ">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_X-kixJQ8EeSd4Lrb6aNbyQ" value="24000"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_X-kixZQ8EeSd4Lrb6aNbyQ" name="FLAT_RATE_FOR_TRAVEL_EXPENSE_PER_UNIT" classifier="_X-kitJQ8EeSd4Lrb6aNbyQ">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_X-kixpQ8EeSd4Lrb6aNbyQ" value="99"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_X-kix5Q8EeSd4Lrb6aNbyQ" name="MAXIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION" classifier="_X-kitJQ8EeSd4Lrb6aNbyQ">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_X-kiyJQ8EeSd4Lrb6aNbyQ" value="26"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_X-kiyZQ8EeSd4Lrb6aNbyQ" name="MAXIMAL_FLAT_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION" classifier="_X-kitJQ8EeSd4Lrb6aNbyQ">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_X-kiypQ8EeSd4Lrb6aNbyQ" value="30"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_X-kiy5Q8EeSd4Lrb6aNbyQ" name="MINIMAL_DISTANCE_FOR_TRAVEL_EXPENSE_DEDUCTION" classifier="_X-kitJQ8EeSd4Lrb6aNbyQ">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_X-kizJQ8EeSd4Lrb6aNbyQ" value="4"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_X-kizZQ8EeSd4Lrb6aNbyQ" name="FLAT_RATE_CIM_DAILY" classifier="_X-kitJQ8EeSd4Lrb6aNbyQ">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_X-kizpQ8EeSd4Lrb6aNbyQ" value="2"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_X-kiz5Q8EeSd4Lrb6aNbyQ" name="FLAT_RATE_CIM_MONTHLY" classifier="_X-kitJQ8EeSd4Lrb6aNbyQ">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_X-ki0JQ8EeSd4Lrb6aNbyQ" value="62"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_X-ki0ZQ8EeSd4Lrb6aNbyQ" name="FLAT_RATE_CIM_YEARLY" classifier="_X-kitJQ8EeSd4Lrb6aNbyQ">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_X-ki0pQ8EeSd4Lrb6aNbyQ" value="750"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_X-ki05Q8EeSd4Lrb6aNbyQ" name="FLAT_RATE_CIP_DAILY" classifier="_X-kitJQ8EeSd4Lrb6aNbyQ">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_X-ki1JQ8EeSd4Lrb6aNbyQ" value="1"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_X-ki1ZQ8EeSd4Lrb6aNbyQ" name="FLAT_RATE_CIP_MONTHLY" classifier="_X-kitJQ8EeSd4Lrb6aNbyQ">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_X-ki1pQ8EeSd4Lrb6aNbyQ" value="25"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_X-ki15Q8EeSd4Lrb6aNbyQ" name="FLAT_RATE_CIP_YEARLY" classifier="_X-kitJQ8EeSd4Lrb6aNbyQ">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_X-ki2JQ8EeSd4Lrb6aNbyQ" value="300"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_X-ki2ZQ8EeSd4Lrb6aNbyQ" name="FLAT_RATE_CIS_DAILY" classifier="_X-kitJQ8EeSd4Lrb6aNbyQ">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_X-ki2pQ8EeSd4Lrb6aNbyQ" value="1"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_X-ki25Q8EeSd4Lrb6aNbyQ" name="FLAT_RATE_CIS_MONTHLY" classifier="_X-kitJQ8EeSd4Lrb6aNbyQ">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_X-ki3JQ8EeSd4Lrb6aNbyQ" value="25"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_X-ki3ZQ8EeSd4Lrb6aNbyQ" name="FLAT_RATE_CIS_YEARLY" classifier="_X-kitJQ8EeSd4Lrb6aNbyQ">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_X-ki3pQ8EeSd4Lrb6aNbyQ" value="300"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_X-ki35Q8EeSd4Lrb6aNbyQ" name="MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_DS" classifier="_X-kitJQ8EeSd4Lrb6aNbyQ">
        <specification xmi:type="uml:LiteralInteger" xmi:id="_X-ki4JQ8EeSd4Lrb6aNbyQ" value="480"/>
      </ownedLiteral>
      <ownedLiteral xmi:id="_X-ki4ZQ8EeSd4Lrb6aNbyQ" name="FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE" classifier="_X-kitJQ8EeSd4Lrb6aNbyQ"/>
      <ownedLiteral xmi:id="_X-ki4pQ8EeSd4Lrb6aNbyQ" name="DISABILITY_FLAT_RATE_FOR_MISCELLANEOUS_EXPENSE" classifier="_X-kitJQ8EeSd4Lrb6aNbyQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_X-ki45Q8EeSd4Lrb6aNbyQ" name="Tax_Card_Concepts">
      <packagedElement xmi:type="uml:Class" xmi:id="_X-ki5JQ8EeSd4Lrb6aNbyQ" name="Tax_Card">
        <ownedRule xmi:id="_X-ki5ZQ8EeSd4Lrb6aNbyQ" name="SubjectToWithholdingTax-constraint" constrainedElement="_X-ki5JQ8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-ki5pQ8EeSd4Lrb6aNbyQ">
            <language>OCL</language>
            <body>not self.oclIsUndefined() &#xA;implies&#xA;(self.income.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or &#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Pensions_and_Annuities_Income) or&#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Capital_and_Investments_Income) or&#xA;self.income.income_type.oclIsTypeOf(Income_Concepts::Directors_Fee)&#xA;)&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_X-ki55Q8EeSd4Lrb6aNbyQ" name="Tax_Credits-constraint" constrainedElement="_X-ki5JQ8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-ki6JQ8EeSd4Lrb6aNbyQ">
            <language>OCL</language>
            <body>self.tax_card_type = Tax_Card_Type::Principal &#xA;&#xA;implies&#xA;&#xA;let cim : Income_Tax_Credit_Concepts::CIM = self.income_Tax_Credit->select(c|c.oclIsTypeOf(Income_Tax_Credit_Concepts::CIM) and c.tax_year = self.valid_from_date)->any(true).oclAsType(Income_Tax_Credit_Concepts::CIM),&#xA;&#x9;cis : Income_Tax_Credit_Concepts::CIS = self.income_Tax_Credit->select(cis|cis.oclIsTypeOf(Income_Tax_Credit_Concepts::CIS) and cis.tax_year = self.valid_from_date)->any(true).oclAsType(Income_Tax_Credit_Concepts::CIS),&#xA;&#x9;cip : Income_Tax_Credit_Concepts::CIP = self.income_Tax_Credit->select(cip|cip.oclIsTypeOf(Income_Tax_Credit_Concepts::CIP) and cip.tax_year = self.valid_from_date)->any(true).oclAsType(Income_Tax_Credit_Concepts::CIP) in&#xA;&#x9;&#xA;(not cis.oclIsUndefined()) xor (not cip.oclIsUndefined()) = true&#xA;and&#xA;if not cim.oclIsUndefined() then &#xA;&#x9;self.credit_CIM_daily = cim.daily and&#xA;&#x9;self.credit_CIM_monthly = cim.monthly &#xA;else&#xA;&#x9;true&#xA;endif&#xA;and&#xA;if not cis.oclIsUndefined()then&#xA;&#x9;self.credit_CIS_daily = cis.daily and&#xA;&#x9;self.credit_CIS_monthly = cis.monthly &#xA;else&#xA;&#x9;true&#xA;endif&#xA;and&#xA;if not cip.oclIsUndefined()then&#xA;&#x9;self.credit_CIP_monthly = cip.monthly &#xA;else&#xA;&#x9;true&#xA;endif</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_X-ki6ZQ8EeSd4Lrb6aNbyQ" name="Tax_Card_AC-constraint" constrainedElement="_X-ki5JQ8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-ki6pQ8EeSd4Lrb6aNbyQ">
            <language>OCL</language>
            <body>let set_ac : Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(deduction|deduction.oclIsTypeOf(Income_Tax_Deduction_Concepts::AC) and deduction.tax_year = self.valid_from_date),&#xA;&#x9;ac : Income_Tax_Deduction_Concepts::AC = set_ac->any(true).oclAsType(Income_Tax_Deduction_Concepts::AC),&#xA;&#x9;set_fo : Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(deduction|deduction.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO) and deduction.tax_year = self.valid_from_date),&#xA;&#x9;set_ds : Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(deduction|deduction.oclIsTypeOf(Income_Tax_Deduction_Concepts::DS) and deduction.tax_year = self.valid_from_date) in&#xA;&#x9;&#xA;set_ac->size() = 1 &#xA;implies&#xA;&#xA;self.tax_card_type=Tax_Card_Type::Additional and&#xA;self.tax_Payer.taxed_jointly and&#xA;self.deduction_AC_yearly = ac.deductible_amount and&#xA;self.deduction_AC_monthly = ac.deductible_amount/12 and&#xA;self.deduction_AC_daily = self.deduction_AC_monthly/25 /**25 working days per month**/ and&#xA;&#xA;if(set_ds->size()>0) then&#xA;&#x9;set_ds->size() =1 and&#xA;&#x9;self.deduction_DS_yearly->notEmpty() and&#xA;&#x9;self.deduction_DS_yearly = set_ds.deductible_amount ->sum()&#xA;else&#xA;&#x9;true&#xA;endif&#xA;&#xA;and&#xA;&#xA;if(set_fo->size()>0) then&#xA;&#x9;set_fo->size() = 1 and&#xA;&#x9;self.deduction_FO_yearly->notEmpty() and&#xA;&#x9;self.deduction_FO_yearly = set_fo.deductible_amount ->sum()&#xA;else&#xA;&#x9;true&#xA;endif&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_X-ki65Q8EeSd4Lrb6aNbyQ" name="Tax_Card_FD-constraint" constrainedElement="_X-ki5JQ8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-ki7JQ8EeSd4Lrb6aNbyQ">
            <language>OCL</language>
            <body>not self.oclIsUndefined()&#xA;implies&#xA;self.income.taxPayer.income_Tax_Deduction->select(d|d.oclIsTypeOf(Income_Tax_Deduction_Concepts::FD) and d.tax_year = self.valid_from_date)->size() = 1&#xA;&#xA;and &#xA;let fd : Income_Tax_Deduction_Concepts::FD = self.income_Tax_Deduction->select(d|d.oclIsTypeOf(Income_Tax_Deduction_Concepts::FD) and d.tax_year = self.valid_from_date)->any(true).oclAsType(Income_Tax_Deduction_Concepts::FD) in&#xA;self.deduction_FD_daily = fd.daily and&#xA;self.deduction_FD_monthly = fd.monthly and&#xA;self.deduction_FD_yearly = fd.yearly&#xA;&#xA;&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_X-ki7ZQ8EeSd4Lrb6aNbyQ" name="Tax_Card_DS-constraint" constrainedElement="_X-ki5JQ8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-ki7pQ8EeSd4Lrb6aNbyQ">
            <language>OCL</language>
            <body>let set_ds : Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(d|d.oclIsTypeOf( Income_Tax_Deduction_Concepts::DS) and d.tax_year = self.valid_from_date),&#xA;&#x9;total_ds : Integer = set_ds.deductible_amount->sum()  in&#xA;set_ds->size()>0 and&#xA;self.tax_card_type = Tax_Card_Type::Principal&#xA;&#xA;implies&#xA;&#xA;if total_ds > Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_DS.oclAsType(Integer) then&#xA; &#x9;/**THE DIFFERENCE BETWEEN THE MINIMUM AND THE TOTAL DS AMOUNT IS WRITTEN ON THE TAX CARD**/&#xA; &#x9;self.deduction_DS_monthly = (total_ds - Constants::MAXIMUM_DEDUCTIBLE_AMOUNT_FOR_DS.oclAsType(Integer))/self.income^^compute_duration_of_contract_within_taxation_year(self.valid_from_date)->first().result&#xA; else&#xA; &#x9;/**NO NEED TO PUT DETAILS ON THE TAX CARD**/&#xA; &#x9;false&#xA; endif</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_X-ki75Q8EeSd4Lrb6aNbyQ" name="Tax_Card_CE-constraint" constrainedElement="_X-ki5JQ8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-ki8JQ8EeSd4Lrb6aNbyQ">
            <language>OCL</language>
            <body>let set_ce : Set(Income_Tax_Deduction_Concepts::Income_Tax_Deduction) = self.income_Tax_Deduction->select(deduction|deduction.oclIsTypeOf(Income_Tax_Deduction_Concepts::CE) and deduction.tax_year = self.valid_from_date),&#xA;&#x9;ce : Income_Tax_Deduction_Concepts::CE = set_ce->any(true).oclAsType(Income_Tax_Deduction_Concepts::CE) in&#xA;&#x9;&#xA;&#x9;set_ce->size() = 1 &#xA;implies&#xA;&#xA;self.tax_card_type=Tax_Card_Type::Principal and&#xA;self.deduction_CE_yearly = ce.deductible_amount and&#xA;self.deduction_CE_monthly = ce.deductible_amount/12 and&#xA;self.deduction_CE_daily = self.deduction_CE_monthly/25 /**25 working days per month**/&#xA;</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:id="_X-ki8ZQ8EeSd4Lrb6aNbyQ" name="Tax_Card_FO-constraint" constrainedElement="_X-ki5JQ8EeSd4Lrb6aNbyQ">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-ki8pQ8EeSd4Lrb6aNbyQ">
            <language>OCL</language>
            <body>not self.oclIsUndefined()&#xA;implies&#xA;self.income.taxPayer.income_Tax_Deduction->select(d|d.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO) and d.tax_year = self.valid_from_date)->size() = 1&#xA;&#xA;and &#xA;&#xA;let fo : Income_Tax_Deduction_Concepts::FO = self.income_Tax_Deduction->select(d|d.oclIsTypeOf(Income_Tax_Deduction_Concepts::FO) and d.tax_year = self.valid_from_date)->any(true).oclAsType(Income_Tax_Deduction_Concepts::FO) in&#xA;self.deduction_FO_daily = fo.daily and&#xA;self.deduction_FO_monthly = fo.monthly and&#xA;self.deduction_FO_yearly = fo.yearly&#xA;</body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:id="_X-ki85Q8EeSd4Lrb6aNbyQ" name="card_identifier" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-ki9JQ8EeSd4Lrb6aNbyQ" name="tax_card_type" visibility="public" type="_X-kijZQ8EeSd4Lrb6aNbyQ"/>
        <ownedAttribute xmi:id="_X-ki9ZQ8EeSd4Lrb6aNbyQ" name="tax_office" visibility="public" type="_X-kikJQ8EeSd4Lrb6aNbyQ"/>
        <ownedAttribute xmi:id="_X-ki9pQ8EeSd4Lrb6aNbyQ" name="valid_from_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_X-dzwZQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-ki95Q8EeSd4Lrb6aNbyQ" name="valid_until_date" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="MARTELibrary.uml#_X-dzwZQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-ki-JQ8EeSd4Lrb6aNbyQ" name="percentage_of_witholding" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-ki-ZQ8EeSd4Lrb6aNbyQ" name="income" visibility="private" type="_X-kh1pQ8EeSd4Lrb6aNbyQ" association="_X-kin5Q8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-ki-pQ8EeSd4Lrb6aNbyQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-ki-5Q8EeSd4Lrb6aNbyQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-ki_JQ8EeSd4Lrb6aNbyQ" name="tax_Class" visibility="private" type="_X-khpJQ8EeSd4Lrb6aNbyQ" association="_X-kipZQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-ki_ZQ8EeSd4Lrb6aNbyQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-ki_pQ8EeSd4Lrb6aNbyQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-ki_5Q8EeSd4Lrb6aNbyQ" name="tax_payers_SSno" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjAJQ8EeSd4Lrb6aNbyQ" name="tax_payers_name_surname" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-kjAZQ8EeSd4Lrb6aNbyQ" value="2"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-kjApQ8EeSd4Lrb6aNbyQ" value="2"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjA5Q8EeSd4Lrb6aNbyQ" name="tax_payers_partner_name_surname" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-kjBJQ8EeSd4Lrb6aNbyQ" value="2"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-kjBZQ8EeSd4Lrb6aNbyQ" value="2"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjBpQ8EeSd4Lrb6aNbyQ" name="tax_payers_address" visibility="public" type="_X-j8AZQ8EeSd4Lrb6aNbyQ" isDerived="true"/>
        <ownedAttribute xmi:id="_X-kjB5Q8EeSd4Lrb6aNbyQ" name="jobs_Employer_SSNo" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjCJQ8EeSd4Lrb6aNbyQ" name="jobs_employers_name" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjCZQ8EeSd4Lrb6aNbyQ" name="jobs_activity_type" visibility="public" type="_X-kiiZQ8EeSd4Lrb6aNbyQ" isDerived="true"/>
        <ownedAttribute xmi:id="_X-kjCpQ8EeSd4Lrb6aNbyQ" name="jobs_place_of_work" visibility="public" type="_X-kimZQ8EeSd4Lrb6aNbyQ" isDerived="true"/>
        <ownedAttribute xmi:id="_X-kjC5Q8EeSd4Lrb6aNbyQ" name="deduction_FD_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjDJQ8EeSd4Lrb6aNbyQ" name="deduction_FD_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjDZQ8EeSd4Lrb6aNbyQ" name="deduction_FD_yearly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjDpQ8EeSd4Lrb6aNbyQ" name="deduction_AC_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjD5Q8EeSd4Lrb6aNbyQ" name="deduction_AC_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjEJQ8EeSd4Lrb6aNbyQ" name="deduction_AC_yearly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjEZQ8EeSd4Lrb6aNbyQ" name="deduction_CE_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjEpQ8EeSd4Lrb6aNbyQ" name="deduction_CE_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjE5Q8EeSd4Lrb6aNbyQ" name="deduction_CE_yearly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjFJQ8EeSd4Lrb6aNbyQ" name="deduction_DS_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjFZQ8EeSd4Lrb6aNbyQ" name="deduction_DS_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjFpQ8EeSd4Lrb6aNbyQ" name="deduction_DS_yearly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjF5Q8EeSd4Lrb6aNbyQ" name="deduction_FO_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjGJQ8EeSd4Lrb6aNbyQ" name="deduction_FO_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjGZQ8EeSd4Lrb6aNbyQ" name="deduction_FO_yearly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjGpQ8EeSd4Lrb6aNbyQ" name="credit_CIS_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjG5Q8EeSd4Lrb6aNbyQ" name="credit_CIS_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjHJQ8EeSd4Lrb6aNbyQ" name="credit_CIP_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjHZQ8EeSd4Lrb6aNbyQ" name="credit_CIM_daily" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjHpQ8EeSd4Lrb6aNbyQ" name="credit_CIM_monthly" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjH5Q8EeSd4Lrb6aNbyQ" name="tax_Payer" visibility="private" type="_X-khQJQ8EeSd4Lrb6aNbyQ" association="_X-khmZQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-kjIJQ8EeSd4Lrb6aNbyQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-kjIZQ8EeSd4Lrb6aNbyQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjIpQ8EeSd4Lrb6aNbyQ" name="income_Tax_Credit" visibility="private" type="_X-kjOJQ8EeSd4Lrb6aNbyQ" aggregation="shared" association="_X-kjL5Q8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-kjI5Q8EeSd4Lrb6aNbyQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-kjJJQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjJZQ8EeSd4Lrb6aNbyQ" name="income_Tax_Deduction" visibility="private" type="_X-lIUpQ8EeSd4Lrb6aNbyQ" aggregation="shared" association="_X-lIUZQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-kjJpQ8EeSd4Lrb6aNbyQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-kjJ5Q8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjKJQ8EeSd4Lrb6aNbyQ" name="validity" visibility="protected">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjKZQ8EeSd4Lrb6aNbyQ" name="previous" visibility="private" type="_X-ki5JQ8EeSd4Lrb6aNbyQ" association="_X-kjMJQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-kjKpQ8EeSd4Lrb6aNbyQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-kjK5Q8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjLJQ8EeSd4Lrb6aNbyQ" name="current_tax_card" visibility="private" type="_X-ki5JQ8EeSd4Lrb6aNbyQ" association="_X-kjMJQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-kjLZQ8EeSd4Lrb6aNbyQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-kjLpQ8EeSd4Lrb6aNbyQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_X-kjL5Q8EeSd4Lrb6aNbyQ" name="include" memberEnd="_X-kjRJQ8EeSd4Lrb6aNbyQ _X-kjIpQ8EeSd4Lrb6aNbyQ"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_X-kjMJQ8EeSd4Lrb6aNbyQ" name="invalidated by" memberEnd="_X-kjKZQ8EeSd4Lrb6aNbyQ _X-kjLJQ8EeSd4Lrb6aNbyQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_X-kjMZQ8EeSd4Lrb6aNbyQ" name="Income_Tax_Credit_Concepts">
      <packagedElement xmi:type="uml:Class" xmi:id="_X-kjMpQ8EeSd4Lrb6aNbyQ" name="CIM">
        <generalization xmi:id="_X-kjM5Q8EeSd4Lrb6aNbyQ" general="_X-kjOJQ8EeSd4Lrb6aNbyQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-kjNJQ8EeSd4Lrb6aNbyQ" name="CIP">
        <generalization xmi:id="_X-kjNZQ8EeSd4Lrb6aNbyQ" general="_X-kjOJQ8EeSd4Lrb6aNbyQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-kjNpQ8EeSd4Lrb6aNbyQ" name="CIS">
        <generalization xmi:id="_X-kjN5Q8EeSd4Lrb6aNbyQ" general="_X-kjOJQ8EeSd4Lrb6aNbyQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-kjOJQ8EeSd4Lrb6aNbyQ" name="Income_Tax_Credit">
        <ownedAttribute xmi:id="_X-kjOZQ8EeSd4Lrb6aNbyQ" name="grantedBy" visibility="public" type="_X-kic5Q8EeSd4Lrb6aNbyQ"/>
        <ownedAttribute xmi:id="_X-kjOpQ8EeSd4Lrb6aNbyQ" name="taxPayer" visibility="private" type="_X-khQJQ8EeSd4Lrb6aNbyQ" association="_X-kigpQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-kjO5Q8EeSd4Lrb6aNbyQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-kjPJQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjPZQ8EeSd4Lrb6aNbyQ" name="tax_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjPpQ8EeSd4Lrb6aNbyQ" name="yearly" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_X-kjP5Q8EeSd4Lrb6aNbyQ" value="300">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjQJQ8EeSd4Lrb6aNbyQ" name="monthly" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_X-kjQZQ8EeSd4Lrb6aNbyQ" value="25">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjQpQ8EeSd4Lrb6aNbyQ" name="daily" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_X-kjQ5Q8EeSd4Lrb6aNbyQ" value="1">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjRJQ8EeSd4Lrb6aNbyQ" name="taxation_Frame" visibility="private" type="_X-ki5JQ8EeSd4Lrb6aNbyQ" association="_X-kjL5Q8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-kjRZQ8EeSd4Lrb6aNbyQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-kjRpQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_X-kjR5Q8EeSd4Lrb6aNbyQ" name="Income_Tax_Deduction_Concepts">
      <packagedElement xmi:type="uml:Class" xmi:id="_X-kjSJQ8EeSd4Lrb6aNbyQ" name="FD">
        <generalization xmi:id="_X-kjSZQ8EeSd4Lrb6aNbyQ" general="_X-lITJQ8EeSd4Lrb6aNbyQ"/>
        <ownedAttribute xmi:id="_X-kjSpQ8EeSd4Lrb6aNbyQ" name="distance_declared_in_january" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjS5Q8EeSd4Lrb6aNbyQ" name="calculated_distance" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_X-kjTJQ8EeSd4Lrb6aNbyQ" name="compute_distance_unit_between_home_and_workpalce" isQuery="true">
          <eAnnotations xmi:id="_X-kjTZQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_X-kjTpQ8EeSd4Lrb6aNbyQ" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-kjT5Q8EeSd4Lrb6aNbyQ" name="FO">
        <generalization xmi:id="_X-kjUJQ8EeSd4Lrb6aNbyQ" general="_X-lITJQ8EeSd4Lrb6aNbyQ"/>
        <ownedAttribute xmi:id="_X-kjUZQ8EeSd4Lrb6aNbyQ" name="rate_type_for_FO" visibility="public" type="_X-kiqJQ8EeSd4Lrb6aNbyQ" isDerived="true"/>
        <ownedOperation xmi:id="_X-kjUpQ8EeSd4Lrb6aNbyQ" name="compute_disability_flat_rate" isQuery="true">
          <eAnnotations xmi:id="_X-kjU5Q8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedParameter xmi:id="_X-kjVJQ8EeSd4Lrb6aNbyQ" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_X-kjVZQ8EeSd4Lrb6aNbyQ" name="compute_regular_flat_rate" isQuery="true">
          <eAnnotations xmi:id="_X-kjVpQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML">
            <details xmi:id="_X-kjV5Q8EeSd4Lrb6aNbyQ" key="lookup"/>
          </eAnnotations>
          <ownedParameter xmi:id="_X-kjWJQ8EeSd4Lrb6aNbyQ" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-kjWZQ8EeSd4Lrb6aNbyQ" name="CE">
        <eAnnotations xmi:id="_X-kjWpQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
        <generalization xmi:id="_X-kjW5Q8EeSd4Lrb6aNbyQ" general="_X-lIUpQ8EeSd4Lrb6aNbyQ"/>
        <ownedAttribute xmi:id="_X-kjXJQ8EeSd4Lrb6aNbyQ" name="ce_deduction_type" visibility="public" type="_X-kiq5Q8EeSd4Lrb6aNbyQ"/>
        <ownedAttribute xmi:id="_X-kjXZQ8EeSd4Lrb6aNbyQ" name="dependent_relative_flat_rate" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-kjXpQ8EeSd4Lrb6aNbyQ" name="disability_flat_rate" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_X-kjX5Q8EeSd4Lrb6aNbyQ" name="compute_disability_flat_rate_for_CE" isQuery="true" postcondition="_X-kjYZQ8EeSd4Lrb6aNbyQ">
          <eAnnotations xmi:id="_X-kjYJQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_X-kjYZQ8EeSd4Lrb6aNbyQ" name="compute_disability_flat_rate" constrainedElement="_X-kjX5Q8EeSd4Lrb6aNbyQ">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-kjYpQ8EeSd4Lrb6aNbyQ">
              <language>OCL</language>
              <body>if self.ce_deduction_type = CE_Type::INALIDITY_AND_INFIRMITY then&#xA;&#x9;self.disability_flat_rate = IN_disability_flat_rate&#xA;else&#xA;&#x9;false&#xA;endif&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_X-kjY5Q8EeSd4Lrb6aNbyQ" name="IN_disability_flat_rate">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_X-kjZJQ8EeSd4Lrb6aNbyQ" name="compute_dependent_relative_flat_rate_for_CE" isQuery="true" postcondition="_X-kjZpQ8EeSd4Lrb6aNbyQ">
          <eAnnotations xmi:id="_X-kjZZQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_X-kjZpQ8EeSd4Lrb6aNbyQ" name="dependent_relative_flat_rate" constrainedElement="_X-kjZJQ8EeSd4Lrb6aNbyQ">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-kjZ5Q8EeSd4Lrb6aNbyQ">
              <language>OCL</language>
              <body>if self.ce_deduction_type = CE_Type::DEPENDENCE_AND_CARE_EXCLUDING_CHLIDREN_NOT_PART_OF_HOUSEHOLD then&#xA;&#x9;self.dependent_relative_flat_rate = IN_dependent_relative_flat_rate&#xA;else&#x9;&#xA;&#x9;false&#xA;endif&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_X-kjaJQ8EeSd4Lrb6aNbyQ" name="IN_dependent_relative_flat_rate">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-kjaZQ8EeSd4Lrb6aNbyQ" name="AC">
        <generalization xmi:id="_X-kjapQ8EeSd4Lrb6aNbyQ" general="_X-lIUpQ8EeSd4Lrb6aNbyQ"/>
        <ownedOperation xmi:id="_X-kja5Q8EeSd4Lrb6aNbyQ" name="is_eligible_income_for_AC" isQuery="true" postcondition="_X-kjbZQ8EeSd4Lrb6aNbyQ">
          <eAnnotations xmi:id="_X-kjbJQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_X-kjbZQ8EeSd4Lrb6aNbyQ" name="is_eligible_income_for_AC" constrainedElement="_X-kja5Q8EeSd4Lrb6aNbyQ">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-kjbpQ8EeSd4Lrb6aNbyQ">
              <language>OCL</language>
              <body>if IN_income.income_type.oclIsTypeOf(Income_Concepts::Employment_Income) or&#xA;&#x9;IN_income.income_type.oclIsTypeOf(Income_Concepts::Independent_Professional_Services_Income) or&#xA;&#x9;IN_income.income_type.oclIsTypeOf(Income_Concepts::Agriculture_and_Forestry_Income) or&#xA;&#x9;IN_income.income_type.oclIsTypeOf(Income_Concepts::Trade_and_Business_Income) then&#xA;&#x9;result = true&#xA;else&#xA;&#x9;result=false&#xA;endif&#xA; </body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_X-kjb5Q8EeSd4Lrb6aNbyQ" name="IN_income" type="_X-kh1pQ8EeSd4Lrb6aNbyQ"/>
          <ownedParameter xmi:id="_X-kjcJQ8EeSd4Lrb6aNbyQ" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_X-kjcZQ8EeSd4Lrb6aNbyQ" name="is_eligible_income_for_AC_assisting_spouse" isQuery="true" postcondition="_X-kjc5Q8EeSd4Lrb6aNbyQ">
          <eAnnotations xmi:id="_X-kjcpQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_X-kjc5Q8EeSd4Lrb6aNbyQ" name="is_eligible_income_for_AC_assisting_spouse" constrainedElement="_X-kjcZQ8EeSd4Lrb6aNbyQ">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-kjdJQ8EeSd4Lrb6aNbyQ">
              <language>OCL</language>
              <body>if  IN_income.income_type.oclIsTypeOf(Income_Concepts::Independent_Professional_Services_Income) or&#xA;&#x9;IN_income.income_type.oclIsTypeOf(Income_Concepts::Trade_and_Business_Income) then&#xA;&#x9;result = true&#xA;else&#xA;&#x9;result=false&#xA;endif&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_X-kjdZQ8EeSd4Lrb6aNbyQ" name="IN_income" type="_X-kh1pQ8EeSd4Lrb6aNbyQ"/>
          <ownedParameter xmi:id="_X-kjdpQ8EeSd4Lrb6aNbyQ" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-kjd5Q8EeSd4Lrb6aNbyQ" name="DS_for_Permanent_Expense">
        <generalization xmi:id="_X-kjeJQ8EeSd4Lrb6aNbyQ" general="_X-lITpQ8EeSd4Lrb6aNbyQ"/>
        <ownedAttribute xmi:id="_X-kjeZQ8EeSd4Lrb6aNbyQ" name="permanent_expense_category" visibility="public" type="_X-kiVJQ8EeSd4Lrb6aNbyQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-kjepQ8EeSd4Lrb6aNbyQ" name="DS_for_Interest_Expense">
        <generalization xmi:id="_X-kje5Q8EeSd4Lrb6aNbyQ" general="_X-lITpQ8EeSd4Lrb6aNbyQ"/>
        <ownedOperation xmi:id="_X-kjfJQ8EeSd4Lrb6aNbyQ" name="compute_maximum_deductible_amount" isQuery="true" postcondition="_X-kjfpQ8EeSd4Lrb6aNbyQ">
          <eAnnotations xmi:id="_X-kjfZQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_X-kjfpQ8EeSd4Lrb6aNbyQ" name="maximum_deductible_amount" constrainedElement="_X-kjfJQ8EeSd4Lrb6aNbyQ">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-kjf5Q8EeSd4Lrb6aNbyQ">
              <language>OCL</language>
              <body>result = 1 and&#xA;self.maximum_deductible_amount = 1&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_X-kjgJQ8EeSd4Lrb6aNbyQ" name="result" isOrdered="true" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_X-kjgZQ8EeSd4Lrb6aNbyQ" name="IN_children_with_allowances" type="_X-j8CpQ8EeSd4Lrb6aNbyQ">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-kjgpQ8EeSd4Lrb6aNbyQ" value="*"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-kjg5Q8EeSd4Lrb6aNbyQ"/>
          </ownedParameter>
          <ownedParameter xmi:id="_X-kjhJQ8EeSd4Lrb6aNbyQ" name="IN_legal_union" type="_X-j8PZQ8EeSd4Lrb6aNbyQ">
            <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-kjhZQ8EeSd4Lrb6aNbyQ" value="*"/>
            <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-kjhpQ8EeSd4Lrb6aNbyQ"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-kjh5Q8EeSd4Lrb6aNbyQ" name="DS_for_Health_and_Pension_Insurance">
        <generalization xmi:id="_X-kjiJQ8EeSd4Lrb6aNbyQ" general="_X-lITpQ8EeSd4Lrb6aNbyQ"/>
        <ownedAttribute xmi:id="_X-kjiZQ8EeSd4Lrb6aNbyQ" name="insurance_category" visibility="public" type="_X-kiXZQ8EeSd4Lrb6aNbyQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-kjipQ8EeSd4Lrb6aNbyQ" name="DS_for_Private_Insurance_and_Plan">
        <generalization xmi:id="_X-kji5Q8EeSd4Lrb6aNbyQ" general="_X-lITpQ8EeSd4Lrb6aNbyQ"/>
        <ownedAttribute xmi:id="_X-lIMJQ8EeSd4Lrb6aNbyQ" name="private_insurance_and_plan_category" visibility="public" type="_X-kiV5Q8EeSd4Lrb6aNbyQ"/>
        <ownedAttribute xmi:id="_X-lIMZQ8EeSd4Lrb6aNbyQ" name="increase_for_life_insurance" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-lIMpQ8EeSd4Lrb6aNbyQ" name="maximum_deductible_amount_for_private_insurance" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-lIM5Q8EeSd4Lrb6aNbyQ" name="maximum_deductible_amount_for_old_age_pension_plan" visibility="public" isDerived="true">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedOperation xmi:id="_X-lINJQ8EeSd4Lrb6aNbyQ" name="compute_increase_for_life_insurance" isQuery="true" postcondition="_X-lINpQ8EeSd4Lrb6aNbyQ">
          <eAnnotations xmi:id="_X-lINZQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_X-lINpQ8EeSd4Lrb6aNbyQ" name="get_increase_for_life_insurance" constrainedElement="_X-lINJQ8EeSd4Lrb6aNbyQ">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-lIN5Q8EeSd4Lrb6aNbyQ">
              <language>OCL</language>
              <body>result = 1&#xA;and self.increase_for_life_insurance = 1&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_X-lIOJQ8EeSd4Lrb6aNbyQ" name="result" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:id="_X-lIOZQ8EeSd4Lrb6aNbyQ" name="compute_maximum_deductible_amount_for_private_insruance" isQuery="true" postcondition="_X-lIO5Q8EeSd4Lrb6aNbyQ">
          <eAnnotations xmi:id="_X-lIOpQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_X-lIO5Q8EeSd4Lrb6aNbyQ" name="get_maximum_deductible_amount_for_private_insurance" constrainedElement="_X-lIOZQ8EeSd4Lrb6aNbyQ">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-lIPJQ8EeSd4Lrb6aNbyQ">
              <language>OCL</language>
              <body>self.maximum_deductible_amount_for_private_insurance = 1&#xA;</body>
            </specification>
          </ownedRule>
        </ownedOperation>
        <ownedOperation xmi:id="_X-lIPZQ8EeSd4Lrb6aNbyQ" name="compute_maximum_deductible_amount_for_old_age_pension_plan" isQuery="true" postcondition="_X-lIP5Q8EeSd4Lrb6aNbyQ">
          <eAnnotations xmi:id="_X-lIPpQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_X-lIP5Q8EeSd4Lrb6aNbyQ" name="maximum_deductible_amount_for_old_age_pension_plan" constrainedElement="_X-lIPZQ8EeSd4Lrb6aNbyQ">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-lIQJQ8EeSd4Lrb6aNbyQ">
              <language>OCL</language>
              <body>maximum_deductible_amount_for_old_age_pension_plan = 1&#xA;</body>
            </specification>
          </ownedRule>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-lIQZQ8EeSd4Lrb6aNbyQ" name="DS_for_Loss_Carryforward">
        <generalization xmi:id="_X-lIQpQ8EeSd4Lrb6aNbyQ" general="_X-lITpQ8EeSd4Lrb6aNbyQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-lIQ5Q8EeSd4Lrb6aNbyQ" name="DS_for_Donation">
        <generalization xmi:id="_X-lIRJQ8EeSd4Lrb6aNbyQ" general="_X-lITpQ8EeSd4Lrb6aNbyQ"/>
        <ownedOperation xmi:id="_X-lIRZQ8EeSd4Lrb6aNbyQ" name="compute_maximum_deductible_amount_for_donation" isQuery="true" postcondition="_X-lIR5Q8EeSd4Lrb6aNbyQ">
          <eAnnotations xmi:id="_X-lIRpQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML"/>
          <ownedRule xmi:id="_X-lIR5Q8EeSd4Lrb6aNbyQ" name="maximum_deductible_amount" constrainedElement="_X-lIRZQ8EeSd4Lrb6aNbyQ">
            <specification xmi:type="uml:OpaqueExpression" xmi:id="_X-lISJQ8EeSd4Lrb6aNbyQ">
              <language>OCL</language>
              <body>if IN_maximum_percentage = Constants::MAXIMUM_DEDUCTIBLE_PERCENTAGE_FOR_DONATIONS then&#xA;&#x9;self.maximum_deductible_amount = IN_maximum_percentage.oclAsType(Integer)/100 * IN_total_tax_payer_income&#xA;else&#xA;&#x9;false&#xA;endif&#xA;</body>
            </specification>
          </ownedRule>
          <ownedParameter xmi:id="_X-lISZQ8EeSd4Lrb6aNbyQ" name="IN_maximum_percentage" type="_X-kitJQ8EeSd4Lrb6aNbyQ"/>
          <ownedParameter xmi:id="_X-lISpQ8EeSd4Lrb6aNbyQ" name="IN_total_tax_payer_income">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
          <ownedParameter xmi:id="_X-lIS5Q8EeSd4Lrb6aNbyQ" name="Parameter1" direction="return">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-lITJQ8EeSd4Lrb6aNbyQ" name="Professional_Expenses_Deduction">
        <generalization xmi:id="_X-lITZQ8EeSd4Lrb6aNbyQ" general="_X-lIUpQ8EeSd4Lrb6aNbyQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-lITpQ8EeSd4Lrb6aNbyQ" name="DS">
        <generalization xmi:id="_X-lIT5Q8EeSd4Lrb6aNbyQ" general="_X-lIUpQ8EeSd4Lrb6aNbyQ"/>
        <ownedAttribute xmi:id="_X-lIUJQ8EeSd4Lrb6aNbyQ" name="maximum_deductible_amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_X-lIUZQ8EeSd4Lrb6aNbyQ" name="considers" memberEnd="_X-lIW5Q8EeSd4Lrb6aNbyQ _X-kjJZQ8EeSd4Lrb6aNbyQ"/>
      <packagedElement xmi:type="uml:Class" xmi:id="_X-lIUpQ8EeSd4Lrb6aNbyQ" name="Income_Tax_Deduction">
        <ownedAttribute xmi:id="_X-lIU5Q8EeSd4Lrb6aNbyQ" name="tax_year" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-lIVJQ8EeSd4Lrb6aNbyQ" name="daily" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-lIVZQ8EeSd4Lrb6aNbyQ" name="monthly" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-lIVpQ8EeSd4Lrb6aNbyQ" name="yearly" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-lIV5Q8EeSd4Lrb6aNbyQ" name="tax_Payer" visibility="private" type="_X-khQJQ8EeSd4Lrb6aNbyQ" association="_X-kippQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-lIWJQ8EeSd4Lrb6aNbyQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-lIWZQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-lIWpQ8EeSd4Lrb6aNbyQ" name="deductible_amount" visibility="public">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-lIW5Q8EeSd4Lrb6aNbyQ" name="tax_card" visibility="private" type="_X-ki5JQ8EeSd4Lrb6aNbyQ" association="_X-lIUZQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-lIXJQ8EeSd4Lrb6aNbyQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-lIXZQ8EeSd4Lrb6aNbyQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:id="_X-lIXpQ8EeSd4Lrb6aNbyQ" name="expenses" visibility="private" type="_X-kiYpQ8EeSd4Lrb6aNbyQ" association="_X-lIYZQ8EeSd4Lrb6aNbyQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_X-lIX5Q8EeSd4Lrb6aNbyQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_X-lIYJQ8EeSd4Lrb6aNbyQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_X-lIYZQ8EeSd4Lrb6aNbyQ" name="is computed based on" memberEnd="_X-lIXpQ8EeSd4Lrb6aNbyQ _X-kicJQ8EeSd4Lrb6aNbyQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Interface" xmi:id="_X-lIYpQ8EeSd4Lrb6aNbyQ" name="Interface1"/>
    <packagedElement xmi:type="uml:DataType" xmi:id="_X-lIY5Q8EeSd4Lrb6aNbyQ" name="DataType1"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_X-lIZJQ8EeSd4Lrb6aNbyQ" name="Class1"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_X-lIZZQ8EeSd4Lrb6aNbyQ" name="Class2"/>
    <packagedElement xmi:type="uml:Class" xmi:id="_X-lIZpQ8EeSd4Lrb6aNbyQ" name="Class3"/>
    <profileApplication xmi:id="_X-lIZ5Q8EeSd4Lrb6aNbyQ">
      <eAnnotations xmi:id="_X-lIaJQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="pathmap://UML_PROFILES/Standard.profile.uml#_yzU58YinEdqtvbnfB2L_5w"/>
      </eAnnotations>
      <appliedProfile href="pathmap://UML_PROFILES/Standard.profile.uml#_0"/>
    </profileApplication>
    <profileApplication xmi:id="_X-lIaZQ8EeSd4Lrb6aNbyQ">
      <eAnnotations xmi:id="_X-lIapQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="Default.profile.uml#_X-ZiK5Q8EeSd4Lrb6aNbyQ"/>
      </eAnnotations>
      <appliedProfile href="Default.profile.uml#_X-ZiKZQ8EeSd4Lrb6aNbyQ"/>
    </profileApplication>
    <profileApplication xmi:id="_X-lIa5Q8EeSd4Lrb6aNbyQ">
      <eAnnotations xmi:id="_X-lIbJQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="Deployment.profile.uml#_YAXSNJQ8EeSd4Lrb6aNbyQ"/>
      </eAnnotations>
      <appliedProfile href="Deployment.profile.uml#_YAXSMpQ8EeSd4Lrb6aNbyQ"/>
    </profileApplication>
    <profileApplication xmi:id="_X-lIbZQ8EeSd4Lrb6aNbyQ">
      <eAnnotations xmi:id="_X-lIbpQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="MARTE_VSL.profile.uml#_X-vgkZQ8EeSd4Lrb6aNbyQ"/>
      </eAnnotations>
      <appliedProfile href="MARTE_VSL.profile.uml#_X-vgj5Q8EeSd4Lrb6aNbyQ"/>
    </profileApplication>
    <profileApplication xmi:id="_X-lIb5Q8EeSd4Lrb6aNbyQ">
      <eAnnotations xmi:id="_X-lIcJQ8EeSd4Lrb6aNbyQ" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="MARTE_Time.profile.uml#_X-lwcJQ8EeSd4Lrb6aNbyQ"/>
      </eAnnotations>
      <appliedProfile href="MARTE_Time.profile.uml#_X-lwbpQ8EeSd4Lrb6aNbyQ"/>
    </profileApplication>
  </uml:Package>
  <Default:Documentation xmi:id="_X-lIcZQ8EeSd4Lrb6aNbyQ" base_Comment="_X-khuZQ8EeSd4Lrb6aNbyQ"/>
  <Default:Documentation xmi:id="_X-lIcpQ8EeSd4Lrb6aNbyQ" base_Comment="_X-j8PpQ8EeSd4Lrb6aNbyQ"/>
</xmi:XMI>
