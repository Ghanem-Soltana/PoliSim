[comment encoding = UTF-8 /]
[module FinalParameterNodeDeclaration('http://www.eclipse.org/uml2/3.0.0/UML')]


[template public DeclareAnActivityparameterNode(anActivity : Activity, anActivityParameterNode1: ActivityParameterNode)]
[for ( aSteriotype :   Stereotype  | anActivityParameterNode1.getAppliedStereotypes()->reject(name='in'))]
                                [if (aSteriotype.name.equalsIgnoreCase('fromrecord') or aSteriotype.name.equalsIgnoreCase('temp') )]
                        	    [for ( aComment : Comment  | anActivity.eAllContents()->filter(Comment))]
								[for ( temp : String  | aComment.annotatedElement.toString())]
										[if (anActivityParameterNode1.toString().equalsIgnoreCase(temp))]
										[let tempString : String = aComment.getValue(aComment.getAppliedStereotype('CTIE_Profile_Final::query'),'constraint')->asOrderedSet()->last().toString()]
                                        [for ( aconstraint:Constraint | 	anActivity.eAllContents()->filter(Constraint))]
                                        [if (aconstraint.name.trim().equalsIgnoreCase(tempString.substring(tempString.index(':')+1, tempString.index(',')-1).trim()))]

[if (anActivityParameterNode1.parameter.upperValue.stringValue().oclIsUndefined())]
let [anActivityParameterNode1.name.concat(':').concat(anActivityParameterNode1.type.name.replace('EInt', 'Integer').replace('EDouble', 'Real').replace('Percentage', 'Real').replace('Numeric', 'Integer').replace('MonetaryValue', 'Real').replace('DistanceUnit', 'Real')).concat(' = ').concat(aconstraint.specification.stringValue())/] in													
[else]
[if(anActivityParameterNode1.parameter.upperValue.stringValue().endsWith('*'))]
let [anActivityParameterNode1.name.concat(':Set(').concat(anActivityParameterNode1.type.name.replace('EInt', 'Integer').replace('EDouble', 'Real').replace('Percentage', 'Real').replace('Numeric', 'Integer').replace('MonetaryValue', 'Real').replace('DistanceUnit', 'Real')).concat(') = ').concat(aconstraint.specification.stringValue())/]	in													
[else]
let [anActivityParameterNode1.name.concat(':').concat(anActivityParameterNode1.type.name.replace('EInt', 'Integer').replace('EDouble', 'Real').replace('Percentage', 'Real').replace('Numeric', 'Integer').replace('MonetaryValue', 'Real').replace('DistanceUnit', 'Real')).concat(' = ').concat(aconstraint.specification.stringValue())/] in																										
[/if]
[/if]


/** Description: [aComment._body.replaceAll('<p >', '').replaceAll('<p>', '').replaceAll('<b>', '').replaceAll('</b>', '').replaceAll('</p>', ' - ').replaceAll('&nbsp;', ' ').replaceAll('&gt;', '>').replace('<span style="font-size:8pt;font-family:Tahoma;">', '').replace('</span>','').trim()/]   **/	[/if]

										[/for]
										[/let]
										[/if]
								[/for]
								[/for]
                         					
                      		[/if]
		           			[if (aSteriotype.name.equalsIgnoreCase('fromlaw') )]
[let parameters:Sequence(String)= anActivityParameterNode1.getValue(aSteriotype,'parameteres')]
   								[for ( aComment : Comment  | anActivity.eAllContents()->filter(Comment))]
								[for ( temp : String  | aComment.annotatedElement.toString())]
							[if (anActivityParameterNode1.toString().equalsIgnoreCase(temp))]
                            [if(aComment.getValue(aComment.getAppliedStereotype('CTIE_Profile_Final::query'),'value_type').oclAsType(EnumerationLiteral).name.equalsIgnoreCase('LOOKUP_TABLE'))]
let [anActivityParameterNode1.name.concat(':').concat(anActivityParameterNode1.type.name.replace('EInt', 'Integer').replace('EDouble', 'Real').replace('Percentage', 'Real').replace('Numeric', 'Integer').replace('MonetaryValue', 'Real').replace('DistanceUnit', 'Real')).concat(' = self.').concat(anActivityParameterNode1.name)/]  in
							[else]
let [anActivityParameterNode1.name.concat(':').concat(anActivityParameterNode1.type.name.replace('EInt', 'Integer').replace('EDouble', 'Real').replace('Percentage', 'Real').replace('Numeric', 'Integer').replace('MonetaryValue', 'Real').replace('DistanceUnit', 'Real')).concat(' = ').concat('self.from_law.').concat(anActivityParameterNode1.name.toUpper())/]([for (name1:String|parameters)][name1/][if(not name1.equalsIgnoreCase(parameters->last()))], [/if][/for]) in  
							[/if]
/** TRACEABILITY: [aComment._body.replaceAll('<p >', '').replaceAll('<p>', '').replaceAll('<b>', '').replaceAll('</b>', '').replaceAll('</p>', ' - ').replaceAll('&nbsp;', ' ').replaceAll('&gt;', '>').replace('<span style="font-size:8pt;font-family:Tahoma;">', '').replace('</span>','').trim()/]  **/ 								

							[/if]
								[/for]
								[/for]
[/let]
                      		[/if]
							[if (aSteriotype.name.equalsIgnoreCase('fromagent') )]

   								[for ( aComment : Comment  | anActivity.eAllContents()->filter(Comment))]
								[for ( temp : String  | aComment.annotatedElement.toString())]
							[if (anActivityParameterNode1.toString().equalsIgnoreCase(temp))]
let [anActivityParameterNode1.name.concat(':').concat(anActivityParameterNode1.type.name.replace('EInt', 'Integer').replace('EDouble', 'Real').replace('Percentage', 'Real').replace('Numeric', 'Integer').replace('MonetaryValue', 'Real').replace('DistanceUnit', 'Real')).concat(' = self.from_agent.').concat(anActivityParameterNode1.name)/]  in
/** TRACEABILITY: [aComment._body.replaceAll('<p >', '').replaceAll('<p>', '').replaceAll('<b>', '').replaceAll('</b>', '').replaceAll('</p>', ' - ').replaceAll('&nbsp;', ' ').replaceAll('&gt;', '>').replace('<span style="font-size:8pt;font-family:Tahoma;">', '').replace('</span>','').trim()/]  **/ 									

							[/if]
								[/for]
								[/for] 

                      		[/if]
		[/for]


[/template]

[query public extraActivityParameterNodeToBedeclared(arg0 : Activity, arg1 : Sequence(InputPin), exp: ExpansionRegion ,arg2 : Sequence(OclAny), arg3 : Sequence(OclAny)) : Sequence(ActivityParameterNode)
	= invoke('uni.lu.snt.svv.ctie.activitydiagramsToOcl.main.Test', 'extraActivityParameterNodeToBedeclared(org.eclipse.uml2.uml.Activity, java.util.List, org.eclipse.uml2.uml.ExpansionRegion, java.util.List, java.util.List)', Sequence{arg0, arg1,exp,arg2, arg3}) /]

[query public activityParameterNodeToBedeclared(arg0 : Activity, arg1 : String, arg2 : Sequence(OclAny), arg3 : Sequence(OclAny)) : Sequence(ActivityParameterNode)
	= invoke('uni.lu.snt.svv.ctie.activitydiagramsToOcl.main.Test', 'activityParameterNodeToBedeclared(org.eclipse.uml2.uml.Activity, java.lang.String, java.util.List, java.util.List)', Sequence{arg0, arg1, arg2, arg3}) /]
