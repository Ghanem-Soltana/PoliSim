[comment encoding = UTF-8 /]
[module Transformation1('http://www.eclipse.org/uml2/3.0.0/UML')]

[import uni::lu::snt::svv::ctie::activitydiagramsToOcl::declaration::ActivityParameterNodeDeclaration/]
[import uni::lu::snt::svv::ctie::activitydiagramsToOcl::declaration::InputPinDeclaration/]
 
[template public transforme(anActivity : Activity, aModel : Package)] 
[file (anActivity.name.concat('-Result.ocl'), false,'UTF-8')]
[contextRule(anActivity)/]
[StartingNodes(anActivity)/] 
 
[/file]
[/template]


[template public StartingNodes(anActivity : Activity,anOwner:OclAny)]
[for ( aControlFlow : ControlFlow  | anOwner.eAllContents()->filter(ControlFlow))]
[if (aControlFlow.source.oclIsKindOf(InitialNode) and aControlFlow.owner.toString().equalsIgnoreCase(anOwner.toString()))]
[retreave(anActivity,anOwner,aControlFlow.target,'aCaller','','',anActivity.eAllContents()->filter(ActivityParameterNode)->asSequence(),emptyListActivityParrameterNode(anActivity),emptyListInputPin(anActivity),emptyListInputPin(anActivity))/]
[/if]
[/for]
[/template]

[template public StartingNodesForExpansionRegion(anActivity : Activity,anOwner:OclAny,allAcitivityParameterNode:Sequence(ActivityParameterNode),declaredParameterNode:Sequence(ActivityParameterNode))]
[for ( aControlFlow : ControlFlow  | anOwner.eAllContents()->filter(ControlFlow))]
[if (aControlFlow.source.oclIsKindOf(InitialNode) and aControlFlow.owner.toString().equalsIgnoreCase(anOwner.toString()))]
[retreave(anActivity,anOwner,aControlFlow.target,'aCaller','','',allAcitivityParameterNode,declaredParameterNode,anOwner.oclAsType(ExpansionRegion).eAllContents()->filter(InputPin)->select(oclAsType(InputPin).name.oclIsUndefined() = false),emptyListInputPin(anActivity))/]
[/if]
[/for] 
[/template]

 
[template public retreave(anActivity : Activity, anOwner : OclAny, aNode : OclAny, aCallerType :String ,formule : String, space:String, allAcitivityParameterNode:Sequence(ActivityParameterNode),declaredParameterNode:Sequence(ActivityParameterNode),allInputPin:Sequence(InputPin),declaredInputPin:Sequence(InputPin)) ]
[if (aNode.oclIsKindOf(DecisionNode))]
[decisionNodeRule(anActivity,anOwner,aNode.oclAsType(DecisionNode),aCallerType,space,allAcitivityParameterNode,declaredParameterNode,allInputPin,declaredInputPin)/]
[/if]
[if (aNode.oclIsKindOf(Action))]
[actionRule(anActivity,anOwner,aNode.oclAsType(Action),aCallerType,space,allAcitivityParameterNode,declaredParameterNode,allInputPin,declaredInputPin)/]
[/if]
[if (aNode.oclIsKindOf(CentralBufferNode))]
[centralBufferNodeRule(anActivity,anOwner,aNode.oclAsType(CentralBufferNode),formule,space,allAcitivityParameterNode,declaredParameterNode,allInputPin,declaredInputPin)/]
[/if]
[if (aNode.oclIsKindOf(ExpansionRegion))]
[expansionRegionRule(anActivity,aNode.oclAsType(ExpansionRegion),space,allAcitivityParameterNode,declaredParameterNode,allInputPin,declaredInputPin)/]
[/if]
[if (aNode.oclIsKindOf(FlowFinalNode))]
[flowFinalNodeRule(anActivity,anOwner,aNode.oclAsType(FlowFinalNode))/]
[/if]
[if (aNode.oclIsKindOf(ActivityFinalNode))]
[activityFinalNodeRule(anActivity,anOwner,aNode.oclAsType(ActivityFinalNode))/]
[/if]
[if (aNode.oclIsKindOf(InputPin))]
[inputPinRule(anActivity,anOwner,aNode.oclAsType(InputPin),aCallerType,space,allAcitivityParameterNode,declaredParameterNode,allInputPin,declaredInputPin)/]
[/if]
[if (aNode.oclIsKindOf(OutputPin))]
[OutputPinRule(formule)/]
[/if]
[/template]

[template public decisionNodeRule(anActivity : Activity, anOwner:OclAny, aNode : ActivityNode, aCallerType:String, space : String, allAcitivityParameterNode:Sequence(ActivityParameterNode),declaredParameterNode:Sequence(ActivityParameterNode),allInputPin:Sequence(InputPin),declaredInputPin:Sequence(InputPin))]
 
[for ( aControlFlow : ControlFlow  | anOwner.eAllContents()->filter(ControlFlow)->select(oclAsType(ControlFlow).source.oclIsKindOf(DecisionNode) and oclAsType(ControlFlow).source.name.equalsIgnoreCase(aNode.name)))]
[if aControlFlow=anOwner.eAllContents()->filter(ControlFlow)->select(oclAsType(ControlFlow).source.oclIsKindOf(DecisionNode) and oclAsType(ControlFlow).source.name.equalsIgnoreCase(aNode.name))->first()]
[if(anActivity.eAllContents()->filter(Constraint)->select(constrainedElement->asOrderedSet()->includes(aNode))->size()=0)]
[let ch:String=aNode.name]
[let newParameters:Sequence(ActivityParameterNode)=activityParameterNodeToBedeclared(anActivity, ch, allAcitivityParameterNode, declaredParameterNode)]
[let newInputPins:Sequence(InputPin)= if anOwner.oclIsKindOf(ExpansionRegion) then inputPinToBedeclared(anActivity,anOwner.oclAsType(ExpansionRegion),ch,allInputPin,declaredInputPin) else emptyListInputPin(anActivity) endif]
[for(anActivatyParameterNode:ActivityParameterNode | newParameters)]
[space/][DeclareAnActivityparameterNode(anActivity,anActivatyParameterNode)/]
[/for]
[for (anInputPin:InputPin |newInputPins)]
[space/][declareanInputPin(anActivity, anInputPin, anOwner.oclAsType(ExpansionRegion).eAllContents()->filter(ExpansionNode)->any(true), anOwner.oclAsType(ExpansionRegion),allAcitivityParameterNode,declaredParameterNode->union(newParameters))/]
[/for]
[space/]if ([ch/]) = [aControlFlow.name.replace('yes', 'true').replace('no', 'false')/] then
[space/][retreave(anActivity,anOwner,aControlFlow.target,'DecisionNode','',space+'     ',allAcitivityParameterNode,declaredParameterNode->union(newParameters),allInputPin,declaredInputPin->union(newInputPins))/]
[/let]
[/let]
[/let]
[else]
[let ch:String=anActivity.eAllContents()->filter(Constraint)->select(oclAsType(Constraint).constrainedElement->last().oclIsKindOf(DecisionNode) and oclAsType(Constraint).constrainedElement->last().oclAsType(DecisionNode).name.equalsIgnoreCase(aNode.name))->any(true).specification.stringValue()]
[let newParameters:Sequence(ActivityParameterNode)=activityParameterNodeToBedeclared(anActivity, ch, allAcitivityParameterNode, declaredParameterNode)]
[let newInputPins:Sequence(InputPin)= if anOwner.oclIsKindOf(ExpansionRegion) then inputPinToBedeclared(anActivity,anOwner.oclAsType(ExpansionRegion),ch,allInputPin,declaredInputPin) else emptyListInputPin(anActivity) endif]
[for(anActivatyParameterNode:ActivityParameterNode | newParameters)]
[space/][DeclareAnActivityparameterNode(anActivity,anActivatyParameterNode)/]
[/for]
[for (anInputPin:InputPin |newInputPins)]
[space/][declareanInputPin(anActivity, anInputPin, anOwner.oclAsType(ExpansionRegion).eAllContents()->filter(ExpansionNode)->any(true), anOwner.oclAsType(ExpansionRegion),allAcitivityParameterNode,declaredParameterNode->union(newParameters))/]
[/for]
[space/]if ([ch/]) = [aControlFlow.name.replace('yes', 'true').replace('no', 'false')/] then
[space/][retreave(anActivity,anOwner,aControlFlow.target,'DecisionNode','',space+'     ',allAcitivityParameterNode,declaredParameterNode->union(newParameters),allInputPin,declaredInputPin->union(newInputPins))/]
[/let]
[/let]
[/let]
[/if]
[else]
[if aControlFlow=anOwner.eAllContents()->filter(ControlFlow)->select(oclAsType(ControlFlow).source.oclIsKindOf(DecisionNode) and oclAsType(ControlFlow).source.name.equalsIgnoreCase(aNode.name))->last()]
[space/]else
[if(anActivity.eAllContents()->filter(Constraint)->select(constrainedElement->asOrderedSet()->includes(aNode))->size()=0)]
[let ch:String=aNode.name]
[let newParameters:Sequence(ActivityParameterNode)=activityParameterNodeToBedeclared(anActivity, ch, allAcitivityParameterNode, declaredParameterNode)]
[let newInputPins:Sequence(InputPin)= if anOwner.oclIsKindOf(ExpansionRegion) then inputPinToBedeclared(anActivity,anOwner.oclAsType(ExpansionRegion),ch,allInputPin,declaredInputPin) else emptyListInputPin(anActivity) endif]
[space+'     '/]if ([ch/]) = [aControlFlow.name.replace('yes', 'true').replace('no', 'false')/] then
[space+'     '/][retreave(anActivity,anOwner,aControlFlow.target,'DecisionNode','',space+'     ',allAcitivityParameterNode,declaredParameterNode->union(newParameters),allInputPin,declaredInputPin->union(newInputPins))/]
[/let]
[/let]
[/let]
[else]
[let ch:String=anActivity.eAllContents()->filter(Constraint)->select(oclAsType(Constraint).constrainedElement->last().oclIsKindOf(DecisionNode) and oclAsType(Constraint).constrainedElement->last().oclAsType(DecisionNode).name.equalsIgnoreCase(aNode.name))->any(true).specification.stringValue()]
[let newParameters:Sequence(ActivityParameterNode)=activityParameterNodeToBedeclared(anActivity, ch, allAcitivityParameterNode, declaredParameterNode)]
[let newInputPins:Sequence(InputPin)= if anOwner.oclIsKindOf(ExpansionRegion) then inputPinToBedeclared(anActivity,anOwner.oclAsType(ExpansionRegion),ch,allInputPin,declaredInputPin) else emptyListInputPin(anActivity) endif]
[space+'     '/]if ([ch/]) = [aControlFlow.name.replace('yes', 'true').replace('no', 'false')/] then
[space+'     '/][retreave(anActivity,anOwner,aControlFlow.target,'DecisionNode','',space+'     ',allAcitivityParameterNode,declaredParameterNode->union(newParameters),allInputPin,declaredInputPin->union(newInputPins))/]
[/let]
[/let]
[/let]
[/if]
[space+'     '/]else
[if(aNode.owner.oclIsTypeOf(ExpansionRegion) and (aNode.owner.eAllContents()->select(oclIsKindOf(OutputPin) and (not oclAsType(OutputPin).name.oclIsUndefined()) and (not oclAsType(OutputPin).type.oclIsUndefined()))->isEmpty()=false))]
[space+'     '/]acc+0
[else]
[space+'     '/]false
[/if]
[else]
[space/]else 
[if(anActivity.eAllContents()->filter(Constraint)->select(constrainedElement->asOrderedSet()->includes(aNode))->size()=0)]
[let ch:String=aNode.name]
[let newParameters:Sequence(ActivityParameterNode)=activityParameterNodeToBedeclared(anActivity, aNode.name, allAcitivityParameterNode, declaredParameterNode)]
[let newInputPins:Sequence(InputPin)= if anOwner.oclIsKindOf(ExpansionRegion) then inputPinToBedeclared(anActivity,anOwner.oclAsType(ExpansionRegion),ch,allInputPin,declaredInputPin) else emptyListInputPin(anActivity) endif]
[space+'     '/]if ([ch/]) = [aControlFlow.name.replace('yes', 'true').replace('no', 'false')/] then
[space+'     '/][retreave(anActivity,anOwner,aControlFlow.target,'DecisionNode','',space+'     ',allAcitivityParameterNode,declaredParameterNode->union(newParameters),allInputPin,declaredInputPin->union(newInputPins))/]
[/let]
[/let]
[/let]
[else]
[let ch:String=anActivity.eAllContents()->filter(Constraint)->select(oclAsType(Constraint).constrainedElement->last().oclIsKindOf(DecisionNode) and oclAsType(Constraint).constrainedElement->last().oclAsType(DecisionNode).name.equalsIgnoreCase(aNode.name))->any(true).specification.stringValue()]
[let newParameters:Sequence(ActivityParameterNode)=activityParameterNodeToBedeclared(anActivity, ch, allAcitivityParameterNode, declaredParameterNode)]
[let newInputPins:Sequence(InputPin)= if anOwner.oclIsKindOf(ExpansionRegion) then inputPinToBedeclared(anActivity,anOwner.oclAsType(ExpansionRegion),ch,allInputPin,declaredInputPin) else emptyListInputPin(anActivity) endif]
[space+'     '/]if ([ch/]) = [aControlFlow.name.replace('yes', 'true').replace('no', 'false')/] then
[space+'     '/][retreave(anActivity,anOwner,aControlFlow.target,'DecisionNode','',space+'     ',allAcitivityParameterNode,declaredParameterNode->union(newParameters),allInputPin,declaredInputPin->union(newInputPins))/]
[/let]
[/let]
[/let]
[/if]
[/if]
[/if]
[/for]



[for ( aObjectFlow : ObjectFlow  | anOwner.eAllContents()->filter(ObjectFlow)->select(oclAsType(ObjectFlow).source.oclIsKindOf(DecisionNode) and oclAsType(ObjectFlow).source.name.equalsIgnoreCase(aNode.name)))]
[if aObjectFlow=anOwner.eAllContents()->filter(ObjectFlow)->select(oclAsType(ObjectFlow).source.oclIsKindOf(DecisionNode) and oclAsType(ObjectFlow).source.name.equalsIgnoreCase(aNode.name))->first()]
[if(anActivity.eAllContents()->filter(Constraint)->select(constrainedElement->asOrderedSet()->includes(aNode))->size()=0)]
[let ch:String=aNode.name]
[let newParameters:Sequence(ActivityParameterNode)=activityParameterNodeToBedeclared(anActivity, ch, allAcitivityParameterNode, declaredParameterNode)]
[let newInputPins:Sequence(InputPin)= if anOwner.oclIsKindOf(ExpansionRegion) then inputPinToBedeclared(anActivity,anOwner.oclAsType(ExpansionRegion),ch,allInputPin,declaredInputPin) else emptyListInputPin(anActivity) endif]
[for(anActivatyParameterNode:ActivityParameterNode | newParameters)]
[space/][DeclareAnActivityparameterNode(anActivity,anActivatyParameterNode)/]
[/for]
[for (anInputPin:InputPin |newInputPins)]
[space/][declareanInputPin(anActivity, anInputPin, anOwner.oclAsType(ExpansionRegion).eAllContents()->filter(ExpansionNode)->any(true), anOwner.oclAsType(ExpansionRegion),allAcitivityParameterNode,declaredParameterNode->union(newParameters))/]
[/for]
[space/]if ([ch/]) = [aObjectFlow.name.replace('yes', 'true').replace('no', 'false')/] then
[space/][retreave(anActivity,anOwner,aObjectFlow.target,'DecisionNode','',space+'     ',allAcitivityParameterNode,declaredParameterNode->union(newParameters),allInputPin,declaredInputPin->union(newInputPins))/]
[/let]
[/let]
[/let]
[else]
[let ch:String=anActivity.eAllContents()->filter(Constraint)->select(oclAsType(Constraint).constrainedElement->last().oclIsKindOf(DecisionNode) and oclAsType(Constraint).constrainedElement->last().oclAsType(DecisionNode).name.equalsIgnoreCase(aNode.name))->any(true).specification.stringValue()]
[let newParameters:Sequence(ActivityParameterNode)=activityParameterNodeToBedeclared(anActivity, ch, allAcitivityParameterNode, declaredParameterNode)]
[let newInputPins:Sequence(InputPin)= if anOwner.oclIsKindOf(ExpansionRegion) then inputPinToBedeclared(anActivity,anOwner.oclAsType(ExpansionRegion),ch,allInputPin,declaredInputPin) else emptyListInputPin(anActivity) endif]
[for(anActivatyParameterNode:ActivityParameterNode | newParameters)]
[space/][DeclareAnActivityparameterNode(anActivity,anActivatyParameterNode)/]
[/for]
[for (anInputPin:InputPin |newInputPins)]
[space/][declareanInputPin(anActivity, anInputPin, anOwner.oclAsType(ExpansionRegion).eAllContents()->filter(ExpansionNode)->any(true), anOwner.oclAsType(ExpansionRegion),allAcitivityParameterNode,declaredParameterNode->union(newParameters))/]
[/for]
[space/]if ([ch/]) = [aObjectFlow.name.replace('yes', 'true').replace('no', 'false')/] then
[space/][retreave(anActivity,anOwner,aObjectFlow.target,'DecisionNode','',space+'     ',allAcitivityParameterNode,declaredParameterNode->union(newParameters),allInputPin,declaredInputPin->union(newInputPins))/]
[/let]
[/let]
[/let]
[/if]
[else]
[if aObjectFlow=anOwner.eAllContents()->filter(ObjectFlow)->select(oclAsType(ObjectFlow).source.oclIsKindOf(DecisionNode) and oclAsType(ObjectFlow).source.name.equalsIgnoreCase(aNode.name))->last()]
[space/]else
[if(anActivity.eAllContents()->filter(Constraint)->select(constrainedElement->asOrderedSet()->includes(aNode))->size()=0)]
[let ch:String=aNode.name]
[let newParameters:Sequence(ActivityParameterNode)=activityParameterNodeToBedeclared(anActivity, ch, allAcitivityParameterNode, declaredParameterNode)]
[let newInputPins:Sequence(InputPin)= if anOwner.oclIsKindOf(ExpansionRegion) then inputPinToBedeclared(anActivity,anOwner.oclAsType(ExpansionRegion),ch,allInputPin,declaredInputPin) else emptyListInputPin(anActivity) endif]
[space+'     '/]if ([ch/]) = [aObjectFlow.name.replace('yes', 'true').replace('no', 'false')/] then
[space+'     '/][retreave(anActivity,anOwner,aObjectFlow.target,'DecisionNode','',space+'     ',allAcitivityParameterNode,declaredParameterNode->union(newParameters),allInputPin,declaredInputPin->union(newInputPins))/]
[/let]
[/let]
[/let]
[else]
[let ch:String=anActivity.eAllContents()->filter(Constraint)->select(oclAsType(Constraint).constrainedElement->last().oclIsKindOf(DecisionNode) and oclAsType(Constraint).constrainedElement->last().oclAsType(DecisionNode).name.equalsIgnoreCase(aNode.name))->any(true).specification.stringValue()]
[let newParameters:Sequence(ActivityParameterNode)=activityParameterNodeToBedeclared(anActivity, ch, allAcitivityParameterNode, declaredParameterNode)]
[let newInputPins:Sequence(InputPin)= if anOwner.oclIsKindOf(ExpansionRegion) then inputPinToBedeclared(anActivity,anOwner.oclAsType(ExpansionRegion),ch,allInputPin,declaredInputPin) else emptyListInputPin(anActivity) endif]
[space+'     '/]if ([ch/]) = [aObjectFlow.name.replace('yes', 'true').replace('no', 'false')/] then
[space+'     '/][retreave(anActivity,anOwner,aObjectFlow.target,'DecisionNode','',space+'     ',allAcitivityParameterNode,declaredParameterNode->union(newParameters),allInputPin,declaredInputPin->union(newInputPins))/]
[/let]
[/let]
[/let]
[/if]
[space+'     '/]else
[if(aNode.owner.oclIsTypeOf(ExpansionRegion) and (aNode.owner.eAllContents()->select(oclIsKindOf(OutputPin) and (not oclAsType(OutputPin).name.oclIsUndefined()) and (not oclAsType(OutputPin).type.oclIsUndefined()))->isEmpty()=false))]
[space+'     '/]acc+0
[else]
[space+'     '/]false
[/if]
[else]
[space/]else 
[if(anActivity.eAllContents()->filter(Constraint)->select(constrainedElement->asOrderedSet()->includes(aNode))->size()=0)]
[let ch:String=aNode.name]
[let newParameters:Sequence(ActivityParameterNode)=activityParameterNodeToBedeclared(anActivity, aNode.name, allAcitivityParameterNode, declaredParameterNode)]
[let newInputPins:Sequence(InputPin)= if anOwner.oclIsKindOf(ExpansionRegion) then inputPinToBedeclared(anActivity,anOwner.oclAsType(ExpansionRegion),ch,allInputPin,declaredInputPin) else emptyListInputPin(anActivity) endif]
[space+'     '/]if ([ch/]) = [aObjectFlow.name.replace('yes', 'true').replace('no', 'false')/] then
[space+'     '/][retreave(anActivity,anOwner,aObjectFlow.target,'DecisionNode','',space+'     ',allAcitivityParameterNode,declaredParameterNode->union(newParameters),allInputPin,declaredInputPin->union(newInputPins))/]
[/let]
[/let]
[/let]
[else]
[let ch:String=anActivity.eAllContents()->filter(Constraint)->select(oclAsType(Constraint).constrainedElement->last().oclIsKindOf(DecisionNode) and oclAsType(Constraint).constrainedElement->last().oclAsType(DecisionNode).name.equalsIgnoreCase(aNode.name))->any(true).specification.stringValue()]
[let newParameters:Sequence(ActivityParameterNode)=activityParameterNodeToBedeclared(anActivity, ch, allAcitivityParameterNode, declaredParameterNode)]
[let newInputPins:Sequence(InputPin)= if anOwner.oclIsKindOf(ExpansionRegion) then inputPinToBedeclared(anActivity,anOwner.oclAsType(ExpansionRegion),ch,allInputPin,declaredInputPin) else emptyListInputPin(anActivity) endif]
[space+'     '/]if ([ch/]) = [aObjectFlow.name.replace('yes', 'true').replace('no', 'false')/] then
[space+'     '/][retreave(anActivity,anOwner,aObjectFlow.target,'DecisionNode','',space+'     ',allAcitivityParameterNode,declaredParameterNode->union(newParameters),allInputPin,declaredInputPin->union(newInputPins))/]
[/let]
[/let]
[/let]
[/if]
[/if]
[/if]
[/for]



[let savspace:String =space]
[for(aControlFlow:ControlFlow |anOwner.eAllContents()->filter(ControlFlow)->select(oclAsType(ControlFlow).source.oclIsKindOf(DecisionNode) and oclAsType(ControlFlow).source.name.equalsIgnoreCase(aNode.name))->excluding(anOwner.eAllContents()->filter(ControlFlow)->select(oclAsType(ControlFlow).source.oclIsKindOf(DecisionNode) and oclAsType(ControlFlow).source.name.equalsIgnoreCase(aNode.name))->any(true)))]
[let space:String = space+'     ']
[space/]endif
[/let]
[/for]


[for(anObjectFlow:ObjectFlow |anOwner.eAllContents()->filter(ObjectFlow)->select(oclAsType(ObjectFlow).source.oclIsKindOf(DecisionNode) and oclAsType(ObjectFlow).source.name.equalsIgnoreCase(aNode.name))->excluding(anOwner.eAllContents()->filter(ObjectFlow)->select(oclAsType(ObjectFlow).source.oclIsKindOf(DecisionNode) and oclAsType(ObjectFlow).source.name.equalsIgnoreCase(aNode.name))->any(true)))]
[let space:String = space+'     ']
[space/]endif
[/let]
[/for]
[savspace/]endif
[/let]
[/template]

[template public centralBufferNodeRule(anActivity : Activity, anOwner:OclAny, aNode : ActivityNode,formule : String ,space:String,allAcitivityParameterNode:Sequence(ActivityParameterNode),declaredParameterNode:Sequence(ActivityParameterNode),allInputPin:Sequence(InputPin),declaredInputPin:Sequence(InputPin))]
[let ch:String = aNode.name.concat(':').concat(aNode.oclAsType(CentralBufferNode).type.name.toString()).concat(' = ').concat(formule)]
[let newParameters:Sequence(ActivityParameterNode)=activityParameterNodeToBedeclared(anActivity, ch, allAcitivityParameterNode, declaredParameterNode)]
[let newInputPins:Sequence(InputPin)= if anOwner.oclIsKindOf(ExpansionRegion) then inputPinToBedeclared(anActivity,anOwner.oclAsType(ExpansionRegion),ch,allInputPin,declaredInputPin) else emptyListInputPin(anActivity) endif]
[for(anActivatyParameterNode:ActivityParameterNode | newParameters)]
[DeclareAnActivityparameterNode(anActivity,anActivatyParameterNode)/]
[/for]
[for (anInputPin:InputPin |newInputPins)]
[declareanInputPin(anActivity, anInputPin, anOwner.oclAsType(ExpansionRegion).eAllContents()->filter(ExpansionNode)->any(true), anOwner.oclAsType(ExpansionRegion),allAcitivityParameterNode,declaredParameterNode->union(newParameters))/]
[/for]
let [ch/] in
[for ( aControlFlow : ControlFlow  | anOwner.eAllContents()->filter(ControlFlow)->select(oclAsType(ControlFlow).source.oclIsKindOf(CentralBufferNode) and oclAsType(ControlFlow).source.name.equalsIgnoreCase(aNode.name)))]
[retreave(anActivity,anOwner,aControlFlow.target,'centralBufferNode','',space,allAcitivityParameterNode,declaredParameterNode->union(newParameters),allInputPin,declaredInputPin->union(newInputPins))/]
[/for]
[for ( anObjectFlow : ObjectFlow   | anOwner.eAllContents()->filter(ObjectFlow )->select(oclAsType(ObjectFlow ).source.oclIsKindOf(CentralBufferNode) and oclAsType(ObjectFlow ).source.name.equalsIgnoreCase(aNode.name)))]
[retreave(anActivity,anOwner,anObjectFlow.target,'centralBufferNode','',space,allAcitivityParameterNode,declaredParameterNode->union(newParameters),allInputPin,declaredInputPin->union(newInputPins))/]
[/for]
[/let]
[/let]
[/let]
[/template]

[template public actionRule(anActivity : Activity,anOwner:OclAny, aNode : ActivityNode, aCallerType:String,space:String,allAcitivityParameterNode:Sequence(ActivityParameterNode),declaredParameterNode:Sequence(ActivityParameterNode),allInputPin:Sequence(InputPin),declaredInputPin:Sequence(InputPin))]

[for ( aSteriotype :   Stereotype  | aNode.getAppliedStereotypes())]


[if (aSteriotype.name.equalsIgnoreCase('calculate'))]

[for ( aComment : Comment  | anOwner.eAllContents()->filter(Comment))]
[for ( temp : String  | aComment.annotatedElement.toString())]
[if (aNode.toString().equalsIgnoreCase(temp))]

[if((anOwner.eAllContents()->filter(ObjectFlow)->select(source.oclIsTypeOf(OutputPin))->select(oclAsType(ObjectFlow).source.oclAsType(OutputPin).owner.toString().equalsIgnoreCase(aNode.toString()))->size()=0) and (anOwner.eAllContents()->filter(ControlFlow)->select(oclAsType(ControlFlow).source.toString().equalsIgnoreCase(aNode.toString()))->size()=0))]
[let ch:String=aComment.getValue(aComment.getAppliedStereotype('CTIE_Profile_Final::formula'), 'constraint').oclAsType(Constraint).specification.stringValue()]
[let newParameters:Sequence(ActivityParameterNode)=activityParameterNodeToBedeclared(anActivity, ch, allAcitivityParameterNode, declaredParameterNode)]
[let newInputPins:Sequence(InputPin)= if anOwner.oclIsKindOf(ExpansionRegion) then inputPinToBedeclared(anActivity,anOwner.oclAsType(ExpansionRegion),ch,allInputPin,declaredInputPin) else emptyListInputPin(anActivity) endif]
[for(anActivatyParameterNode:ActivityParameterNode | newParameters)]
[DeclareAnActivityparameterNode(anActivity,anActivatyParameterNode)/]
[/for]
[for (anInputPin:InputPin |newInputPins)]
[declareanInputPin(anActivity, anInputPin, anOwner.oclAsType(ExpansionRegion).eAllContents()->filter(ExpansionNode)->any(true), anOwner.oclAsType(ExpansionRegion),allAcitivityParameterNode,declaredParameterNode->union(newParameters))/]
[/for]

acc+[ch/]

[/let]
[/let]
[/let]
[else]
[for ( anObjectFlow: ObjectFlow  | anOwner.eAllContents()->filter(ObjectFlow)->select(source.oclIsTypeOf(OutputPin)))]
[if anObjectFlow.source.oclAsType(OutputPin).owner.toString().equalsIgnoreCase(aNode.toString())]
[retreave(anActivity,anOwner,anObjectFlow.target,'Action',aComment.getValue(aComment.getAppliedStereotype('CTIE_Profile_Final::formula'), 'constraint').oclAsType(Constraint).specification.stringValue(),space,allAcitivityParameterNode,declaredParameterNode,allInputPin,declaredInputPin)/]
[/if]
[/for]
[/if]
[/if]
[/for]
[/for]



[/if]



[if (aSteriotype.name.equalsIgnoreCase('assert'))]
[for ( aComment : Comment  | anOwner.eAllContents()->filter(Comment))]
[for ( temp : String  | aComment.annotatedElement.toString())]
[if (aNode.toString().equalsIgnoreCase(temp))]
[if(aCallerType.equalsIgnoreCase('Action'))]
and
[/if]
[let ch:String = aComment.getValue(aComment.getAppliedStereotype('CTIE_Profile_Final::statement'), 'constraint').oclAsType(Constraint).specification.stringValue()]
[let newParameters:Sequence(ActivityParameterNode)=activityParameterNodeToBedeclared(anActivity, ch, allAcitivityParameterNode, declaredParameterNode)]
[let newInputPins:Sequence(InputPin)= if anOwner.oclIsKindOf(ExpansionRegion) then inputPinToBedeclared(anActivity,anOwner.oclAsType(ExpansionRegion),ch,allInputPin,declaredInputPin) else emptyListInputPin(anActivity) endif]
[for(anActivatyParameterNode:ActivityParameterNode | newParameters)]
[DeclareAnActivityparameterNode(anActivity,anActivatyParameterNode)/]
[/for]
[for (anInputPin:InputPin |newInputPins)]
[declareanInputPin(anActivity, anInputPin, anOwner.oclAsType(ExpansionRegion).eAllContents()->filter(ExpansionNode)->any(true), anOwner.oclAsType(ExpansionRegion),allAcitivityParameterNode,declaredParameterNode->union(newParameters))/]
[/for]
[ch/]
[for ( anObjectFlow: ObjectFlow  | anActivity.eAllContents()->filter(ObjectFlow)->select(source.oclIsTypeOf(OutputPin) or source.oclIsTypeOf(Action) ))]
[if anObjectFlow.source.owner.toString()=aNode.toString()]
[retreave(anActivity,anActivity,anObjectFlow.target,'Action','',space,allAcitivityParameterNode,declaredParameterNode->union(newParameters),allInputPin,declaredInputPin->union(newInputPins))/]
[/if]
[/for]
[for ( aControlFlow: ControlFlow  | anActivity.eAllContents()->filter(ControlFlow))]
[if aControlFlow.source.toString()=aNode.toString()]
[retreave(anActivity,anActivity,aControlFlow.target,'Action','',space,allAcitivityParameterNode,declaredParameterNode->union(newParameters),allInputPin,declaredInputPin->union(newInputPins))/]
[/if]
[/for]
[/let]
[/let]
[/let]
[/if]
[/for]
[/for]
[/if]
[/for]				
[/template]


[template public expansionRegionRule(anActivity : Activity, anExpansionRegion:ExpansionRegion,space:String,allAcitivityParameterNode:Sequence(ActivityParameterNode),declaredParameterNode:Sequence(ActivityParameterNode),allInputPin:Sequence(InputPin),declaredInputPin:Sequence(InputPin))]

[if (anExpansionRegion.eAllContents()->select(oclIsKindOf(OutputPin) and (not oclAsType(OutputPin).name.oclIsUndefined()) and (not oclAsType(OutputPin).type.oclIsUndefined()))->isEmpty())]
[for (anExpansionNode : ExpansionNode  | anActivity.eAllContents()->filter(ExpansionNode)->select(owner.toString().equalsIgnoreCase(anExpansionRegion.toString())))]
[for (anObjectFlow : ObjectFlow  | anActivity.eAllContents()->filter(ObjectFlow)->select(oclAsType(ObjectFlow).target.oclIsKindOf(ExpansionNode) and oclAsType(ObjectFlow).target.name.equalsIgnoreCase(anExpansionNode.name) ))]
[let ch:String=anObjectFlow.source.name]
[let newParameters:Sequence(ActivityParameterNode)=activityParameterNodeToBedeclared(anActivity, ch, allAcitivityParameterNode, declaredParameterNode)]
[for(anActivatyParameterNode:ActivityParameterNode | newParameters)]
[DeclareAnActivityparameterNode(anActivity,anActivatyParameterNode)/]
[/for] 
[if(anExpansionNode.type.name.oclIsUndefined())]
[anObjectFlow.source.name/] -> forAll ([anExpansionNode.name/]: Object|
[else]
[anObjectFlow.source.name/] -> forAll ([anExpansionNode.name/]:[anExpansionNode.type.name/]|
[/if]
[StartingNodesForExpansionRegion(anActivity,anExpansionRegion,allAcitivityParameterNode,declaredParameterNode->union(newParameters))/]
[/let]
[/let]
[/for]
[/for]
)
[else]


  

[let anOutputPin:OutputPin =anExpansionRegion.eAllContents()->select(oclIsKindOf(OutputPin) and (not oclAsType(OutputPin).name.oclIsUndefined()) and (not oclAsType(OutputPin).type.oclIsUndefined()))->any(true).oclAsType(OutputPin)]
[let anExpansionNode:ExpansionNode = anExpansionRegion.eAllContents()->filter(ExpansionNode)->any(true)]
[let anActivityParameterNode:ActivityParameterNode = anActivity.eAllContents()->filter(ObjectFlow)->select(oclAsType(ObjectFlow).target.oclIsKindOf(ExpansionNode) and oclAsType(ObjectFlow).target=anExpansionNode)->any(true).oclAsType(ObjectFlow).source]
[let ch:String=anActivityParameterNode.name]
[let newParameters:Sequence(ActivityParameterNode)=activityParameterNodeToBedeclared(anActivity, ch, allAcitivityParameterNode, declaredParameterNode)]
[for(anActivatyParameterNode1:ActivityParameterNode | newParameters)]
[DeclareAnActivityparameterNode(anActivity,anActivatyParameterNode1)/]
[/for] 
[if(anExpansionNode.type.name.oclIsUndefined())]
let [anOutputPin.name/]: [anOutputPin.type.name/] = [anActivityParameterNode.name/]->iterate([anExpansionNode.name/]: Object; acc:[anOutputPin.type.name/] = 0 |
[else]
let [anOutputPin.name/]: [anOutputPin.type.name/] = [anActivityParameterNode.name/]->iterate([anExpansionNode.name/]: [anExpansionNode.type.name/]; acc:[anOutputPin.type.name/] = 0 |
[/if]
[StartingNodesForExpansionRegion(anActivity,anExpansionRegion,allAcitivityParameterNode,declaredParameterNode->union(newParameters))/]
) in
[/let]
[/let]
[/let]
[/let]
[/let]
[/if]

[let anOutputPin:OutputPin =anExpansionRegion.eAllContents()->select(oclIsKindOf(OutputPin) and (not oclAsType(OutputPin).name.oclIsUndefined()) and (not oclAsType(OutputPin).type.oclIsUndefined()))->any(true).oclAsType(OutputPin)]
[let anExpansionNode:ExpansionNode = anExpansionRegion.eAllContents()->filter(ExpansionNode)->any(true)]
[let anActivityParameterNode:ActivityParameterNode = anActivity.eAllContents()->filter(ObjectFlow)->select(oclAsType(ObjectFlow).target.oclIsKindOf(ExpansionNode) and oclAsType(ObjectFlow).target=anExpansionNode)->any(true).oclAsType(ObjectFlow).source]
[let ch:String=anActivityParameterNode.name]
[let newParameters:Sequence(ActivityParameterNode)=activityParameterNodeToBedeclared(anActivity, ch, allAcitivityParameterNode, declaredParameterNode)]

[for ( anOutputPin:OutputPin | anExpansionRegion.eAllContents()->filter(OutputPin)->select(not oclAsType(OutputPin).name.oclIsUndefined()))]
[for (anObjectFlow:ObjectFlow | anActivity.eAllContents()->filter(ObjectFlow)->select(oclAsType(ObjectFlow).source.oclIsKindOf(OutputPin) and oclAsType(ObjectFlow).source.oclAsType(OutputPin).toString().equalsIgnoreCase(anOutputPin.toString())) )]
[retreave(anActivity, anActivity, anObjectFlow.target,'ExpansionRegion','',space,allAcitivityParameterNode,declaredParameterNode->union(newParameters),allInputPin,declaredInputPin)/]
[/for]
[/for]
[for ( anOutputPin:OutputPin | anExpansionRegion.eAllContents()->filter(OutputPin)->select(not oclAsType(OutputPin).name.oclIsUndefined()))]
[for (aControlFlow:ControlFlow | anActivity.eAllContents()->filter(ControlFlow)->select(oclAsType(ControlFlow).source.oclIsKindOf(OutputPin) and oclAsType(ControlFlow).source.oclAsType(OutputPin).toString().equalsIgnoreCase(anOutputPin.toString())) )]
[retreave(anActivity, anActivity, aControlFlow.target,'ExpansionRegion','',space,allAcitivityParameterNode,declaredParameterNode->union(newParameters),allInputPin,declaredInputPin)/]
[/for]
[/for]
[/let]
[/let]
[/let]
[/let]
[/let]
[/template]


[template public activityFinalNodeRule(anActivity : Activity, anExpansionRegion:OclAny, aNode : ActivityNode)]
false
[/template]

[template public flowFinalNodeRule(anActivity : Activity, anExpansionRegion:OclAny, aNode : ActivityNode)]
acc+0
[/template]

[template public inputPinRule(anActivity : Activity, anOwner:OclAny, anInputPin : InputPin, aCallerType:String, space:String,allAcitivityParameterNode:Sequence(ActivityParameterNode),declaredParameterNode:Sequence(ActivityParameterNode),allInputPin:Sequence(InputPin),declaredInputPin:Sequence(InputPin))]
[retreave(anActivity,anOwner,anInputPin.owner.oclAsType(ActivityNode),aCallerType,'',space,allAcitivityParameterNode,declaredParameterNode,allInputPin,declaredInputPin)/]
[/template]

[template public OutputPinRule(formule:String )]
[formule/]
[/template]

[query public emptyListActivityParrameterNode(arg0 : Activity) : Sequence(ActivityParameterNode)
	= invoke('uni.lu.snt.svv.ctie.activitydiagramsToOcl.main.Test', 'emptyListActivityParrameterNode(org.eclipse.uml2.uml.Activity)', Sequence{arg0}) /]

[query public emptyListInputPin(arg0 : Activity) : Sequence(InputPin)
	= invoke('uni.lu.snt.svv.ctie.activitydiagramsToOcl.main.Test', 'emptyListInputPin(org.eclipse.uml2.uml.Activity)', Sequence{arg0}) /]


