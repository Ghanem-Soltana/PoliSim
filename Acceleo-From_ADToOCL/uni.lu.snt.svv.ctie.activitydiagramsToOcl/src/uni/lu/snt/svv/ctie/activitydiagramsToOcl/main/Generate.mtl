[comment encoding = UTF-8 /]
[module Generate('http://www.eclipse.org/uml2/3.0.0/UML')]
[import  uni::lu::snt::svv::ctie::activitydiagramsToOcl::main::Transformation1/]


[template public generate(aModel : Package)]
[comment @main/]	
[let anActivity : Activity = aModel.allOwnedElements()->filter(Activity)->any(true)]
[transforme(anActivity,aModel)/]
[clean(anActivity.name.concat('-Result.ocl'),anActivity)/]
[lengthOf(anActivity,aModel)/]
[/let]
[/template]
 
[query public clean( arg1 : String,arg2 : Activity) : OclVoid
	= invoke('uni.lu.snt.svv.ctie.activitydiagramsToOcl.main.Test', 'clean(java.lang.String, org.eclipse.uml2.uml.Activity)', Sequence{arg1,arg2}) /]
  
[query public clean1( arg1 : String,arg2 : Activity) : OclVoid
	= invoke('uni.lu.snt.svv.ctie.activitydiagramsToOcl.main.Test', 'clean1(java.lang.String, org.eclipse.uml2.uml.Activity)', Sequence{arg1,arg2}) /]
  


[template public lengthOf(anActivity : Activity, aModel : Package)] 
[file (anActivity.name.concat('-Inputs.ocl'), false,'UTF-8')]


[let CommenOfActivity:Set(Comment) = anActivity.ownedComment]
[for (aComment:Comment |CommenOfActivity)]

[if(aComment.getAppliedStereotype('CTIE_Profile_Final::query').oclIsUndefined()=false)]
[let tempString : String = aComment.getValue(aComment.getAppliedStereotype('CTIE_Profile_Final::query'),'constraint')->asOrderedSet()->last().toString()]
[if tempString.oclIsUndefined()=false]
[for ( aconstraint:Constraint | anActivity.eAllContents()->filter(Constraint))]
[if (aconstraint.name.equalsIgnoreCase(tempString.substring(tempString.index(':')+1, tempString.index(',')-1).trim()))]
[aconstraint.specification.stringValue().trim().replaceAll(' ', '').size()/]
[/if]
[/for]
[/if]                                 
[/let]
[/if]
[/for]
[/let]
[/file]
[clean1(anActivity.name.concat('-Inputs.ocl'),anActivity)/]



[file (anActivity.name.concat('-Comptage.ocl'), false,'UTF-8')]
[let CommenOfActivity:Set(Comment) = anActivity.ownedComment]
[for (aComment:Comment |CommenOfActivity)]

[if(aComment.getAppliedStereotype('CTIE_Profile_Final::formula').oclIsUndefined()=false)]
[let tempString : String = aComment.getValue(aComment.getAppliedStereotype('CTIE_Profile_Final::formula'),'constraint')->asOrderedSet()->last().toString()]
[if tempString.oclIsUndefined()=false]
[for ( aconstraint:Constraint | anActivity.eAllContents()->filter(Constraint))]
[if (aconstraint.name.equalsIgnoreCase(tempString.substring(tempString.index(':')+1, tempString.index(',')-1).trim()))]
[aconstraint.specification.stringValue().trim().replaceAll(' ', '').size()/]
[/if]
[/for]
[/if]                                       
[/let]
[/if]

[if(aComment.getAppliedStereotype('CTIE_Profile_Final::statement').oclIsUndefined()=false)]
[let tempString : String = aComment.getValue(aComment.getAppliedStereotype('CTIE_Profile_Final::statement'),'constraint')->asOrderedSet()->last().toString()]
[if tempString.oclIsUndefined()=false]
[for ( aconstraint:Constraint | anActivity.eAllContents()->filter(Constraint))]
[if (aconstraint.name.equalsIgnoreCase(tempString.substring(tempString.index(':')+1, tempString.index(',')-1).trim()))]
[aconstraint.specification.stringValue().trim().replaceAll(' ', '').size()/]
[/if]
[/for]
[/if]                                       
[/let]
[/if]
[/for]
[/let]

[let CommenOfActivity:Set(Comment) = anActivity.ownedComment]
[let anExpansion:ExpansionRegion = anActivity.eAllContents()->filter(ExpansionRegion)->first()]
[let CommenOfExpansion:Set(Comment) = anExpansion.ownedComment]
[for (aComment:Comment |CommenOfExpansion)]
[if(CommenOfActivity->includes(aComment)=false)]

[if(aComment.getAppliedStereotype('CTIE_Profile_Final::formula').oclIsUndefined()=false)]
[let tempString : String = aComment.getValue(aComment.getAppliedStereotype('CTIE_Profile_Final::formula'),'constraint')->asOrderedSet()->last().toString()]
[if tempString.oclIsUndefined()=false]
[for ( aconstraint:Constraint | anActivity.eAllContents()->filter(Constraint))]
[if (aconstraint.name.equalsIgnoreCase(tempString.substring(tempString.index(':')+1, tempString.index(',')-1).trim()))]
[aconstraint.specification.stringValue().trim().replaceAll(' ', '').size()/]
[/if]
[/for]
[/if]                                       
[/let]
[/if]

[if(aComment.getAppliedStereotype('CTIE_Profile_Final::statement').oclIsUndefined()=false)]
[let tempString : String = aComment.getValue(aComment.getAppliedStereotype('CTIE_Profile_Final::statement'),'constraint')->asOrderedSet()->last().toString()]
[if tempString.oclIsUndefined()=false]
[for ( aconstraint:Constraint | anActivity.eAllContents()->filter(Constraint))]
[if (aconstraint.name.equalsIgnoreCase(tempString.substring(tempString.index(':')+1, tempString.index(',')-1).trim()))]
[aconstraint.specification.stringValue().trim().replaceAll(' ', '').size()/]
[/if]
[/for]
[/if]                                       
[/let]
[/if]
[/if]
[/for]
[/let]
[/let]
[/let]
[/file]
[clean1(anActivity.name.concat('-Comptage.ocl'),anActivity)/]
[/template]