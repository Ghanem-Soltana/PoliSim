import 'TaxCard.ecore'  
package TaxCard 

context Physical_Person inv inv1: 
if(self.disability_type =Disability_Types::NONE
) then self.disability_percentage = 0 else (self.disability_percentage >= 0 and self.disability_percentage <= 1) endif

context Physical_Person inv inv2: 
self.last_start_year_widower = -1

context Physical_Person inv inv3: 
self.name = 'Not important'

context Physical_Person inv inv4: 
if(if(self.oclIsTypeOf(Dependent))then 
true 
else 
	if (self.oclIsTypeOf(Physical_Person)) then 
	true
	 else
		if(self.oclAsType(Tax_Payer).getSpouse(1900).oclIsUndefined()=true) then 
		true 
		else  false endif endif endif
) then self.is_widower = false else ((self.is_widower = true) or (self.is_widower = false)) endif

context Physical_Person inv inv5: 
if(self.oclIsTypeOf(Dependent)) then (self.birth_year >= 2010.0 and self.birth_year <= 2014.0) or (self.birth_year >= 2005.0 and self.birth_year <= 2009.0) or (self.birth_year >= 2000.0 and self.birth_year <= 2004.0) or (self.birth_year >= 1995.0 and self.birth_year <= 1999.0) or (self.birth_year >= 1990.0 and self.birth_year <= 1994.0) or (self.birth_year >= 1985.0 and self.birth_year <= 1989.0) else ((self.birth_year >= 1995.0 and self.birth_year <= 1999.0) or (self.birth_year >= 1990.0 and self.birth_year <= 1994.0) or (self.birth_year >= 1985.0 and self.birth_year <= 1989.0) or (self.birth_year >= 1980.0 and self.birth_year <= 1984.0) or (self.birth_year >= 1975.0 and self.birth_year <= 1979.0) or (self.birth_year >= 1970.0 and self.birth_year <= 1974.0) or (self.birth_year >= 1965.0 and self.birth_year <= 1969.0) or (self.birth_year >= 1960.0 and self.birth_year <= 1964.0) or (self.birth_year >= 1955.0 and self.birth_year <= 1959.0) or (self.birth_year >= 1950.0 and self.birth_year <= 1954.0) or (self.birth_year >= 1945.0 and self.birth_year <= 1949.0) or (self.birth_year >= 1940.0 and self.birth_year <= 1944.0) or (self.birth_year >= 1935.0 and self.birth_year <= 1939.0) or (self.birth_year >= 1930.0 and self.birth_year <= 1934.0)) endif

context Physical_Person inv inv6: 
self.birth_month >= 1 and self.birth_month <= 12

context Physical_Person inv inv7: 
self.birth_day >= 1 and self.birth_day <= 28

context Tax_Payer inv inv8: 
self.AEP_deduction = 0

context Tax_Payer inv inv9: 
(self.dependents->forAll(oclIsKindOf(Dependent)))

context Tax_Payer inv inv10: 
(self.dependents->size() = 0) or (self.dependents->size() = 1) or (self.dependents->size() = 2) or (self.dependents->size() >= 3.0 and self.dependents->size() <= 4.0)

context Tax_Payer inv inv11: 
self.from_agent.oclIsUndefined() = false 

context Tax_Payer inv inv12: 
if(self.incomes->select(i:Income | i.oclIsTypeOf(Local_Income))->size()=0
) then (self.incomes->forAll(oclIsKindOf(Local_Income))) else true endif

context Tax_Payer inv inv13: 
(self.incomes->size() = 1)

context Tax_Payer inv inv14: 
self.incomes->size() >= 1

context Tax_Payer inv inv15: 
self.from_law.oclIsUndefined() = false 

context Dependent inv inv16: 
if(self.getAge(2014)<=2
) then self.allowances->size() = 1
 else if((self.getAge(2014)>2 and self.getAge(2014)<=18) or  (self.getAge(2014)<=27 and self.continued_studies)
) then self.allowances->size() = 1
 else (self.allowances->size() = 0) endif endif

context External_Allowance inv inv17: 
self.amount = let origin: Physical_Person = self.reciver in
let dep: Physical_Person = self.person in
let children1:Set(Dependent)=if(origin.oclIsKindOf(Tax_Payer)) then origin.oclAsType(Tax_Payer).dependents->select(allowances->size()>0) else Set{} endif in 
let union:Legal_Union_Record=origin.getLegalUnionRecord(2014) in 
let house: Household = union.household in
let children:Set(Dependent)=if (house.oclIsInvalid()) then children1 else children1->union(house.children->select(allowances->size()>0)->select(allowances->any(true).reciver=origin)) endif in 
let eligible_children:Set(Dependent) = children->select(getAge(2014)>2) in
let is_disabled:Boolean = dep.disability_type<>Disability_Types::NONE and dep.disability_percentage>0.5 in
let dep_age:Integer =  dep.getAge(2014) in
if(dep_age<=2) then 580
else if(eligible_children->size()=1) then self.getAmount(185.60, dep_age, is_disabled)
    else if(eligible_children->size()=2) then self.getAmount(220.36, dep_age, is_disabled) 
            else if(eligible_children->size()=3) then self.getAmount(267.59, dep_age, is_disabled) 
                    else if(eligible_children->size()>3) then self.getAmount(361.83, dep_age, is_disabled) 
                	      else 
                	      0.0  		       
endif               		       
endif
endif
endif
endif

context External_Allowance inv inv18: 
if(self.person.getAge(2014)<=2
) then self.starting_year = 2014 else (self.starting_year >= self.person.birth_year +2

 and self.starting_year <= 2014
) endif

context External_Allowance inv inv19: 
self.ending_year = -1


context External_Allowance inv inv20: 
self.reciver.oclIsUndefined() = false 

context FromAgent inv inv21: 
self.taxation_year = 2014

context Income inv inv22: 
self.year = 2014

context Income inv inv23: 
self.start_year = 2014


context Income inv inv24: 
if(((self.taxPayer.getAge(2014))>(60))
) then (self.income_type.oclIsKindOf(Pensions_and_Annuities_Income)) else true endif

context Income inv inv25: 
self.income_type.oclIsUndefined() = false 

context Income inv inv26: 
if(not self.income_type.oclIsKindOf(Employment_Income) and not self.income_type.oclIsTypeOf(Pensions_and_Annuities_Income) ) then self.tax_card.oclIsUndefined() = true else (self.tax_card.oclIsUndefined() = false) endif

context Income inv inv27: 
self.taxPayer.oclIsUndefined() = false 

context Income inv inv28: 
self.details->size() = 12

context Income_Type inv inv29: 
self.income.oclIsUndefined() = false 

context Tax_Card inv inv30: 
self.deduction_FD_yearly = 0

context Tax_Card inv inv31: 
self.credit_CIS_yearly = 0

context Tax_Card inv inv32: 
self.credit_CIS_monthly = 0

context Tax_Card inv inv33: 
self.credit_CIP_yearly = 0

context Tax_Card inv inv34: 
self.credit_CIP_monthly = 0

context Tax_Card inv inv35: 
self.deduction_CE_invalidity_yearly = 0

context Tax_Card inv inv36: 
self.deduction_DS_Debt_yearly = 0

context Tax_Card inv inv37: 
if(not self.income.income_type.oclIsKindOf(Employment_Income) and not self.income.income_type.oclIsTypeOf(Pensions_and_Annuities_Income) ) then self.income.oclIsUndefined() = true else true endif

context Tax_Card inv inv38: 
self.income.oclIsUndefined() = false 

context Income_Detail inv inv39: 
self.is_contributing_CNS = true

context Income_Detail inv inv40: 
if(self.income.income_type.oclIsTypeOf(Pensions_and_Annuities_Income)) then self.is_contributing_pension = false else (self.is_contributing_pension = true) endif

context Income_Detail inv inv41: 
self.is_worked = true

context Income_Detail inv inv42: 
if(not self.income.income_type.oclIsTypeOf(Employment_Income)
) then self.worked_days = 0
 else (self.worked_days >= 10 and self.worked_days <= 25) endif

context Income_Detail inv inv43: 
self.month = let details:OrderedSet(Income_Detail)=self.income.details in
details->indexOf(self)

context Income_Detail inv inv44: 
if(not self.income.income_type.oclIsTypeOf(Employment_Income)
) then self.distance = 0
 else if(self.income.details->size()>1) then self.distance = self.income.details->any(true).distance else ((self.distance >= 0.0 and self.distance <= 4.0) or (self.distance >= 5.0 and self.distance <= 9.0) or (self.distance >= 10.0 and self.distance <= 30.0) or (self.distance >= 30.0 and self.distance <= 100.0)) endif endif

context Income_Detail inv inv45: 
if(self.income.details->size()>1
) then self.amount = self.income.details->any(true).amount else true endif

context Income_Detail inv inv46: 
(self.amount >= 0.0 and self.amount <= 833.0) or (self.amount >= 834.0 and self.amount <= 1666.0) or (self.amount >= 1667.0 and self.amount <= 2500.0) or (self.amount >= 2501.0 and self.amount <= 3333.0) or (self.amount >= 3334.0 and self.amount <= 4166.0) or (self.amount >= 4167.0 and self.amount <= 5000.0) or (self.amount >= 5001.0 and self.amount <= 5833.0) or (self.amount >= 5834.0 and self.amount <= 6666.0) or (self.amount >= 6667.0 and self.amount <= 7500.0) or (self.amount >= 7501.0 and self.amount <= 8333.0) or (self.amount >= 8334.0 and self.amount <= 9166.0) or (self.amount >= 9167.0 and self.amount <= 10000.0) or (self.amount >= 10001.0 and self.amount <= 10833.0) or (self.amount >= 10834.0 and self.amount <= 11666.0) or (self.amount >= 11667.0 and self.amount <= 12500.0) or (self.amount >= 12501.0 and self.amount <= 13333.0) or (self.amount >= 13334.0 and self.amount <= 14166.0) or (self.amount >= 14167.0 and self.amount <= 15000.0) or (self.amount >= 15001.0 and self.amount <= 15833.0) or (self.amount >= 15834.0 and self.amount <= 16666.0) or (self.amount >= 16667.0 and self.amount <= 20833.0) or (self.amount >= 20834.0 and self.amount <= 41666.0) or (self.amount >= 41667.0 and self.amount <= 50000.0) or (self.amount >= 50001.0 and self.amount <= 58333.0) or (self.amount >= 58333.0 and self.amount <= 83333.0) or (self.amount >= 83333.0 and self.amount <= 333333.0)

context Expense inv inv47: 
self.declared_amount >= 50 and self.declared_amount <= if((self.income.income_amount / 2)>50) then self.income.income_amount / 2 else 50 endif

context Expense inv inv48: 
self.year_expense_was_incurred_in = 2014

context Household inv inv49: 
self.parents.oclIsUndefined() = false 

context Household inv inv50: 
(self.children->size() = 0) or (self.children->size() = 1) or (self.children->size() >= 2.0 and self.children->size() <= 5.0)

context Legal_Union_Record inv inv51: 
self.start_year >= 1900
 and self.start_year <= 2014

context Legal_Union_Record inv inv52: 
if(self.separation_cause=Separation_Causes::NONE
) then self.end_year = -1
 else (self.end_year >= self.start_year and self.end_year <= 2014) endif

context Legal_Union_Record inv inv53: 
if(self.individual_A.oclIsUndefined() and self.individual_B.oclIsUndefined()
) then (self.individual_A.oclIsKindOf(Non_Resident_Tax_Payer)) or (self.individual_A.oclIsKindOf(Resident_Tax_Payer)) else true endif

context Legal_Union_Record inv inv54: 
if(let main:Tax_Payer = if(self.individual_A.oclIsUndefined()) then self.individual_B.oclAsType(Tax_Payer) else self.individual_A.oclAsType(Tax_Payer)  endif in
if(main.oclIsTypeOf(Resident_Tax_Payer)=false) then
false
else 
if(main.incomes->any(true).income_type.oclIsTypeOf(Pensions_and_Annuities_Income))then
true
else false
endif
endif
) then (self.individual_A.oclIsKindOf(Physical_Person)) or (self.individual_A.oclIsKindOf(Tax_Payer)) else true endif

context Legal_Union_Record inv inv55: 
if(let main:Tax_Payer = if(self.individual_A.oclIsUndefined()) then self.individual_B.oclAsType(Tax_Payer) else self.individual_A.oclAsType(Tax_Payer)  endif in
if(main.oclIsTypeOf(Non_Resident_Tax_Payer)=false) then
false
else 
if(main.incomes->any(true).income_type.oclIsTypeOf(Pensions_and_Annuities_Income))then
true
else false
endif
endif
) then (self.individual_A.oclIsKindOf(Physical_Person)) or (self.individual_A.oclIsKindOf(Tax_Payer)) else true endif

context Legal_Union_Record inv inv56: 
if(let main:Tax_Payer = if(self.individual_A.oclIsUndefined()) then self.individual_B.oclAsType(Tax_Payer) else self.individual_A.oclAsType(Tax_Payer)  endif in
if(main.oclIsTypeOf(Resident_Tax_Payer)=false) then
false
else 
if(main.incomes->any(true).income_type.oclIsTypeOf(Pensions_and_Annuities_Income)=false)then
true
else false
endif
endif
) then (self.individual_A.oclIsKindOf(Physical_Person)) or (self.individual_A.oclIsKindOf(Tax_Payer)) else true endif

context Legal_Union_Record inv inv57: 
if(let main:Tax_Payer = if(self.individual_A.oclIsUndefined()) then self.individual_B.oclAsType(Tax_Payer) else self.individual_A.oclAsType(Tax_Payer)  endif in
if(main.oclIsTypeOf(Non_Resident_Tax_Payer)=false) then
false
else 
if(main.incomes->any(true).income_type.oclIsTypeOf(Pensions_and_Annuities_Income)=false)then
true
else false
endif
endif
) then (self.individual_A.oclIsKindOf(Physical_Person)) or (self.individual_A.oclIsKindOf(Tax_Payer)) else true endif

context Legal_Union_Record inv inv58: 
self.individual_A.oclIsUndefined() = false 

context Legal_Union_Record inv inv59: 
if(self.individual_A.oclIsUndefined() and self.individual_B.oclIsUndefined()
) then (self.individual_B.oclIsKindOf(Non_Resident_Tax_Payer)) or (self.individual_B.oclIsKindOf(Resident_Tax_Payer)) else true endif

context Legal_Union_Record inv inv60: 
if(let main:Tax_Payer = if(self.individual_A.oclIsUndefined()) then self.individual_B.oclAsType(Tax_Payer) else self.individual_A.oclAsType(Tax_Payer)  endif in
if(main.oclIsTypeOf(Resident_Tax_Payer)=false) then
false
else 
if(main.incomes->any(true).income_type.oclIsTypeOf(Pensions_and_Annuities_Income))then
true
else false
endif
endif
) then (self.individual_B.oclIsKindOf(Physical_Person)) or (self.individual_B.oclIsKindOf(Tax_Payer)) else true endif

context Legal_Union_Record inv inv61: 
if(let main:Tax_Payer = if(self.individual_A.oclIsUndefined()) then self.individual_B.oclAsType(Tax_Payer) else self.individual_A.oclAsType(Tax_Payer)  endif in
if(main.oclIsTypeOf(Non_Resident_Tax_Payer)=false) then
false
else 
if(main.incomes->any(true).income_type.oclIsTypeOf(Pensions_and_Annuities_Income))then
true
else false
endif
endif
) then (self.individual_B.oclIsKindOf(Physical_Person)) or (self.individual_B.oclIsKindOf(Tax_Payer)) else true endif

context Legal_Union_Record inv inv62: 
if(let main:Tax_Payer = if(self.individual_A.oclIsUndefined()) then self.individual_B.oclAsType(Tax_Payer) else self.individual_A.oclAsType(Tax_Payer)  endif in
if(main.oclIsTypeOf(Resident_Tax_Payer)=false) then
false
else 
if(main.incomes->any(true).income_type.oclIsTypeOf(Pensions_and_Annuities_Income)=false)then
true
else false
endif
endif
) then (self.individual_B.oclIsKindOf(Physical_Person)) or (self.individual_B.oclIsKindOf(Tax_Payer)) else true endif

context Legal_Union_Record inv inv63: 
if(let main:Tax_Payer = if(self.individual_A.oclIsUndefined()) then self.individual_B.oclAsType(Tax_Payer) else self.individual_A.oclAsType(Tax_Payer)  endif in
if(main.oclIsTypeOf(Non_Resident_Tax_Payer)=false) then
false
else 
if(main.incomes->any(true).income_type.oclIsTypeOf(Pensions_and_Annuities_Income)=false)then
true
else false
endif
endif
) then (self.individual_B.oclIsKindOf(Physical_Person)) or (self.individual_B.oclIsKindOf(Tax_Payer)) else true endif

context Legal_Union_Record inv inv64: 
self.individual_B.oclIsUndefined() = false 

context Legal_Union_Record inv inv65: 
self.properties->size() >= 1

context Legal_Union_Record inv inv66: 
self.household.oclIsUndefined() = false 

context Tax_Property inv inv67: 
self.taxed_jointly = true

context Tax_Property inv inv68: 
self.starting_year >= self.union_record.start_year and self.starting_year <= 2014


endpackage
